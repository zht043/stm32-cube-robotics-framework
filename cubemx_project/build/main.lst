ARM GAS  /tmp/cc4zodur.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB138:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "cmsis_os.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** 
  28:Src/main.c    **** /* USER CODE END Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  31:Src/main.c    **** /* USER CODE BEGIN PTD */
  32:Src/main.c    **** 
ARM GAS  /tmp/cc4zodur.s 			page 2


  33:Src/main.c    **** /* USER CODE END PTD */
  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  46:Src/main.c    **** UART_HandleTypeDef huart3;
  47:Src/main.c    **** 
  48:Src/main.c    **** PCD_HandleTypeDef hpcd_USB_OTG_FS;
  49:Src/main.c    **** 
  50:Src/main.c    **** osThreadId_t defaultTaskHandle;
  51:Src/main.c    **** osThreadId_t myTask02Handle;
  52:Src/main.c    **** /* USER CODE BEGIN PV */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE END PV */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  57:Src/main.c    **** void SystemClock_Config(void);
  58:Src/main.c    **** static void MX_GPIO_Init(void);
  59:Src/main.c    **** static void MX_USART3_UART_Init(void);
  60:Src/main.c    **** static void MX_USB_OTG_FS_PCD_Init(void);
  61:Src/main.c    **** void StartDefaultTask(void *argument);
  62:Src/main.c    **** void StartTask02(void *argument);
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE BEGIN PFP */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE END PFP */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  69:Src/main.c    **** /* USER CODE BEGIN 0 */
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE END 0 */
  72:Src/main.c    **** 
  73:Src/main.c    **** /**
  74:Src/main.c    ****   * @brief  The application entry point.
  75:Src/main.c    ****   * @retval int
  76:Src/main.c    ****   */
  77:Src/main.c    **** int main(void)
  78:Src/main.c    **** {
  79:Src/main.c    ****   /* USER CODE BEGIN 1 */
  80:Src/main.c    **** 
  81:Src/main.c    ****   /* USER CODE END 1 */
  82:Src/main.c    ****   
  83:Src/main.c    **** 
  84:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  85:Src/main.c    **** 
  86:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  87:Src/main.c    ****   HAL_Init();
  88:Src/main.c    **** 
  89:Src/main.c    ****   /* USER CODE BEGIN Init */
ARM GAS  /tmp/cc4zodur.s 			page 3


  90:Src/main.c    **** 
  91:Src/main.c    ****   /* USER CODE END Init */
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* Configure the system clock */
  94:Src/main.c    ****   SystemClock_Config();
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* USER CODE END SysInit */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* Initialize all configured peripherals */
 101:Src/main.c    ****   MX_GPIO_Init();
 102:Src/main.c    ****   MX_USART3_UART_Init();
 103:Src/main.c    ****   MX_USB_OTG_FS_PCD_Init();
 104:Src/main.c    ****   /* USER CODE BEGIN 2 */
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* USER CODE END 2 */
 107:Src/main.c    **** 
 108:Src/main.c    ****   osKernelInitialize();
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 111:Src/main.c    ****   /* add mutexes, ... */
 112:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 115:Src/main.c    ****   /* add semaphores, ... */
 116:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 119:Src/main.c    ****   /* start timers, add new ones, ... */
 120:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 123:Src/main.c    ****   /* add queues, ... */
 124:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* Create the thread(s) */
 127:Src/main.c    ****   /* definition and creation of defaultTask */
 128:Src/main.c    ****   const osThreadAttr_t defaultTask_attributes = {
 129:Src/main.c    ****     .name = "defaultTask",
 130:Src/main.c    ****     .priority = (osPriority_t) osPriorityNormal,
 131:Src/main.c    ****     .stack_size = 128
 132:Src/main.c    ****   };
 133:Src/main.c    ****   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 134:Src/main.c    **** 
 135:Src/main.c    ****   /* definition and creation of myTask02 */
 136:Src/main.c    ****   const osThreadAttr_t myTask02_attributes = {
 137:Src/main.c    ****     .name = "myTask02",
 138:Src/main.c    ****     .priority = (osPriority_t) osPriorityLow,
 139:Src/main.c    ****     .stack_size = 128
 140:Src/main.c    ****   };
 141:Src/main.c    ****   myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 142:Src/main.c    **** 
 143:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 144:Src/main.c    ****   /* add threads, ... */
 145:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 146:Src/main.c    **** 
ARM GAS  /tmp/cc4zodur.s 			page 4


 147:Src/main.c    ****   /* Start scheduler */
 148:Src/main.c    ****   osKernelStart();
 149:Src/main.c    ****   
 150:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 151:Src/main.c    **** 
 152:Src/main.c    ****   /* Infinite loop */
 153:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 154:Src/main.c    ****   while (1)
 155:Src/main.c    ****   {
 156:Src/main.c    ****     /* USER CODE END WHILE */
 157:Src/main.c    **** 
 158:Src/main.c    ****     /* USER CODE BEGIN 3 */
 159:Src/main.c    ****   }
 160:Src/main.c    ****   /* USER CODE END 3 */
 161:Src/main.c    **** }
 162:Src/main.c    **** 
 163:Src/main.c    **** /**
 164:Src/main.c    ****   * @brief System Clock Configuration
 165:Src/main.c    ****   * @retval None
 166:Src/main.c    ****   */
 167:Src/main.c    **** void SystemClock_Config(void)
 168:Src/main.c    **** {
 169:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 170:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 171:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 172:Src/main.c    **** 
 173:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 174:Src/main.c    ****   */
 175:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 176:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 177:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 178:Src/main.c    ****   */
 179:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 180:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 181:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 182:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 183:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 4;
 184:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 168;
 185:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 186:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 187:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 2;
 188:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 189:Src/main.c    ****   {
 190:Src/main.c    ****     Error_Handler();
 191:Src/main.c    ****   }
 192:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 193:Src/main.c    ****   */
 194:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 195:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 196:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 197:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 198:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 199:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 200:Src/main.c    **** 
 201:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 202:Src/main.c    ****   {
 203:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/cc4zodur.s 			page 5


 204:Src/main.c    ****   }
 205:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 206:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 207:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 208:Src/main.c    ****   {
 209:Src/main.c    ****     Error_Handler();
 210:Src/main.c    ****   }
 211:Src/main.c    **** }
 212:Src/main.c    **** 
 213:Src/main.c    **** /**
 214:Src/main.c    ****   * @brief USART3 Initialization Function
 215:Src/main.c    ****   * @param None
 216:Src/main.c    ****   * @retval None
 217:Src/main.c    ****   */
 218:Src/main.c    **** static void MX_USART3_UART_Init(void)
 219:Src/main.c    **** {
 220:Src/main.c    **** 
 221:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 0 */
 222:Src/main.c    **** 
 223:Src/main.c    ****   /* USER CODE END USART3_Init 0 */
 224:Src/main.c    **** 
 225:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 1 */
 226:Src/main.c    **** 
 227:Src/main.c    ****   /* USER CODE END USART3_Init 1 */
 228:Src/main.c    ****   huart3.Instance = USART3;
 229:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 230:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 231:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 232:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 233:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 234:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 235:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 236:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 237:Src/main.c    ****   {
 238:Src/main.c    ****     Error_Handler();
 239:Src/main.c    ****   }
 240:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 2 */
 241:Src/main.c    **** 
 242:Src/main.c    ****   /* USER CODE END USART3_Init 2 */
 243:Src/main.c    **** 
 244:Src/main.c    **** }
 245:Src/main.c    **** 
 246:Src/main.c    **** /**
 247:Src/main.c    ****   * @brief USB_OTG_FS Initialization Function
 248:Src/main.c    ****   * @param None
 249:Src/main.c    ****   * @retval None
 250:Src/main.c    ****   */
 251:Src/main.c    **** static void MX_USB_OTG_FS_PCD_Init(void)
 252:Src/main.c    **** {
 253:Src/main.c    **** 
 254:Src/main.c    ****   /* USER CODE BEGIN USB_OTG_FS_Init 0 */
 255:Src/main.c    **** 
 256:Src/main.c    ****   /* USER CODE END USB_OTG_FS_Init 0 */
 257:Src/main.c    **** 
 258:Src/main.c    ****   /* USER CODE BEGIN USB_OTG_FS_Init 1 */
 259:Src/main.c    **** 
 260:Src/main.c    ****   /* USER CODE END USB_OTG_FS_Init 1 */
ARM GAS  /tmp/cc4zodur.s 			page 6


 261:Src/main.c    ****   hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 262:Src/main.c    ****   hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 263:Src/main.c    ****   hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 264:Src/main.c    ****   hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 265:Src/main.c    ****   hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 266:Src/main.c    ****   hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 267:Src/main.c    ****   hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 268:Src/main.c    ****   hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 269:Src/main.c    ****   hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 270:Src/main.c    ****   hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 271:Src/main.c    ****   if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 272:Src/main.c    ****   {
 273:Src/main.c    ****     Error_Handler();
 274:Src/main.c    ****   }
 275:Src/main.c    ****   /* USER CODE BEGIN USB_OTG_FS_Init 2 */
 276:Src/main.c    **** 
 277:Src/main.c    ****   /* USER CODE END USB_OTG_FS_Init 2 */
 278:Src/main.c    **** 
 279:Src/main.c    **** }
 280:Src/main.c    **** 
 281:Src/main.c    **** /**
 282:Src/main.c    ****   * @brief GPIO Initialization Function
 283:Src/main.c    ****   * @param None
 284:Src/main.c    ****   * @retval None
 285:Src/main.c    ****   */
 286:Src/main.c    **** static void MX_GPIO_Init(void)
 287:Src/main.c    **** {
  27              		.loc 1 287 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 48
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 20
  34              		.cfi_offset 4, -20
  35              		.cfi_offset 5, -16
  36              		.cfi_offset 6, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 8DB0     		sub	sp, sp, #52
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 72
 288:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  42              		.loc 1 288 0
  43 0004 0024     		movs	r4, #0
  44 0006 0794     		str	r4, [sp, #28]
  45 0008 0894     		str	r4, [sp, #32]
  46 000a 0994     		str	r4, [sp, #36]
  47 000c 0A94     		str	r4, [sp, #40]
  48 000e 0B94     		str	r4, [sp, #44]
  49              	.LBB2:
 289:Src/main.c    **** 
 290:Src/main.c    ****   /* GPIO Ports Clock Enable */
 291:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  50              		.loc 1 291 0
  51 0010 0194     		str	r4, [sp, #4]
  52 0012 384B     		ldr	r3, .L3
ARM GAS  /tmp/cc4zodur.s 			page 7


  53 0014 1A6B     		ldr	r2, [r3, #48]
  54 0016 42F00402 		orr	r2, r2, #4
  55 001a 1A63     		str	r2, [r3, #48]
  56 001c 1A6B     		ldr	r2, [r3, #48]
  57 001e 02F00402 		and	r2, r2, #4
  58 0022 0192     		str	r2, [sp, #4]
  59 0024 019A     		ldr	r2, [sp, #4]
  60              	.LBE2:
  61              	.LBB3:
 292:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  62              		.loc 1 292 0
  63 0026 0294     		str	r4, [sp, #8]
  64 0028 1A6B     		ldr	r2, [r3, #48]
  65 002a 42F08002 		orr	r2, r2, #128
  66 002e 1A63     		str	r2, [r3, #48]
  67 0030 1A6B     		ldr	r2, [r3, #48]
  68 0032 02F08002 		and	r2, r2, #128
  69 0036 0292     		str	r2, [sp, #8]
  70 0038 029A     		ldr	r2, [sp, #8]
  71              	.LBE3:
  72              	.LBB4:
 293:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  73              		.loc 1 293 0
  74 003a 0394     		str	r4, [sp, #12]
  75 003c 1A6B     		ldr	r2, [r3, #48]
  76 003e 42F00202 		orr	r2, r2, #2
  77 0042 1A63     		str	r2, [r3, #48]
  78 0044 1A6B     		ldr	r2, [r3, #48]
  79 0046 02F00202 		and	r2, r2, #2
  80 004a 0392     		str	r2, [sp, #12]
  81 004c 039A     		ldr	r2, [sp, #12]
  82              	.LBE4:
  83              	.LBB5:
 294:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  84              		.loc 1 294 0
  85 004e 0494     		str	r4, [sp, #16]
  86 0050 1A6B     		ldr	r2, [r3, #48]
  87 0052 42F00802 		orr	r2, r2, #8
  88 0056 1A63     		str	r2, [r3, #48]
  89 0058 1A6B     		ldr	r2, [r3, #48]
  90 005a 02F00802 		and	r2, r2, #8
  91 005e 0492     		str	r2, [sp, #16]
  92 0060 049A     		ldr	r2, [sp, #16]
  93              	.LBE5:
  94              	.LBB6:
 295:Src/main.c    ****   __HAL_RCC_GPIOG_CLK_ENABLE();
  95              		.loc 1 295 0
  96 0062 0594     		str	r4, [sp, #20]
  97 0064 1A6B     		ldr	r2, [r3, #48]
  98 0066 42F04002 		orr	r2, r2, #64
  99 006a 1A63     		str	r2, [r3, #48]
 100 006c 1A6B     		ldr	r2, [r3, #48]
 101 006e 02F04002 		and	r2, r2, #64
 102 0072 0592     		str	r2, [sp, #20]
 103 0074 059A     		ldr	r2, [sp, #20]
 104              	.LBE6:
 105              	.LBB7:
ARM GAS  /tmp/cc4zodur.s 			page 8


 296:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 106              		.loc 1 296 0
 107 0076 0694     		str	r4, [sp, #24]
 108 0078 1A6B     		ldr	r2, [r3, #48]
 109 007a 42F00102 		orr	r2, r2, #1
 110 007e 1A63     		str	r2, [r3, #48]
 111 0080 1B6B     		ldr	r3, [r3, #48]
 112 0082 03F00103 		and	r3, r3, #1
 113 0086 0693     		str	r3, [sp, #24]
 114 0088 069B     		ldr	r3, [sp, #24]
 115              	.LBE7:
 297:Src/main.c    **** 
 298:Src/main.c    ****   /*Configure GPIO pin Output Level */
 299:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 116              		.loc 1 299 0
 117 008a 1B4F     		ldr	r7, .L3+4
 118 008c 2246     		mov	r2, r4
 119 008e 4FF48141 		mov	r1, #16512
 120 0092 3846     		mov	r0, r7
 121 0094 FFF7FEFF 		bl	HAL_GPIO_WritePin
 122              	.LVL0:
 300:Src/main.c    **** 
 301:Src/main.c    ****   /*Configure GPIO pin Output Level */
 302:Src/main.c    ****   HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 123              		.loc 1 302 0
 124 0098 184D     		ldr	r5, .L3+8
 125 009a 2246     		mov	r2, r4
 126 009c 4021     		movs	r1, #64
 127 009e 2846     		mov	r0, r5
 128 00a0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 129              	.LVL1:
 303:Src/main.c    **** 
 304:Src/main.c    ****   /*Configure GPIO pin : USER_Btn_Pin */
 305:Src/main.c    ****   GPIO_InitStruct.Pin = USER_Btn_Pin;
 130              		.loc 1 305 0
 131 00a4 4FF40053 		mov	r3, #8192
 132 00a8 0793     		str	r3, [sp, #28]
 306:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 133              		.loc 1 306 0
 134 00aa 154B     		ldr	r3, .L3+12
 135 00ac 0893     		str	r3, [sp, #32]
 307:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 136              		.loc 1 307 0
 137 00ae 0994     		str	r4, [sp, #36]
 308:Src/main.c    ****   HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 138              		.loc 1 308 0
 139 00b0 07A9     		add	r1, sp, #28
 140 00b2 1448     		ldr	r0, .L3+16
 141 00b4 FFF7FEFF 		bl	HAL_GPIO_Init
 142              	.LVL2:
 309:Src/main.c    **** 
 310:Src/main.c    ****   /*Configure GPIO pins : LD3_Pin LD2_Pin */
 311:Src/main.c    ****   GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 143              		.loc 1 311 0
 144 00b8 4FF48143 		mov	r3, #16512
 145 00bc 0793     		str	r3, [sp, #28]
 312:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
ARM GAS  /tmp/cc4zodur.s 			page 9


 146              		.loc 1 312 0
 147 00be 0126     		movs	r6, #1
 148 00c0 0896     		str	r6, [sp, #32]
 313:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 149              		.loc 1 313 0
 150 00c2 0994     		str	r4, [sp, #36]
 314:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 151              		.loc 1 314 0
 152 00c4 0A94     		str	r4, [sp, #40]
 315:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 153              		.loc 1 315 0
 154 00c6 07A9     		add	r1, sp, #28
 155 00c8 3846     		mov	r0, r7
 156 00ca FFF7FEFF 		bl	HAL_GPIO_Init
 157              	.LVL3:
 316:Src/main.c    **** 
 317:Src/main.c    ****   /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
 318:Src/main.c    ****   GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 158              		.loc 1 318 0
 159 00ce 4023     		movs	r3, #64
 160 00d0 0793     		str	r3, [sp, #28]
 319:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 161              		.loc 1 319 0
 162 00d2 0896     		str	r6, [sp, #32]
 320:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 163              		.loc 1 320 0
 164 00d4 0994     		str	r4, [sp, #36]
 321:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 165              		.loc 1 321 0
 166 00d6 0A94     		str	r4, [sp, #40]
 322:Src/main.c    ****   HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 167              		.loc 1 322 0
 168 00d8 07A9     		add	r1, sp, #28
 169 00da 2846     		mov	r0, r5
 170 00dc FFF7FEFF 		bl	HAL_GPIO_Init
 171              	.LVL4:
 323:Src/main.c    **** 
 324:Src/main.c    ****   /*Configure GPIO pin : USB_OverCurrent_Pin */
 325:Src/main.c    ****   GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 172              		.loc 1 325 0
 173 00e0 8023     		movs	r3, #128
 174 00e2 0793     		str	r3, [sp, #28]
 326:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 175              		.loc 1 326 0
 176 00e4 0894     		str	r4, [sp, #32]
 327:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 177              		.loc 1 327 0
 178 00e6 0994     		str	r4, [sp, #36]
 328:Src/main.c    ****   HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 179              		.loc 1 328 0
 180 00e8 07A9     		add	r1, sp, #28
 181 00ea 2846     		mov	r0, r5
 182 00ec FFF7FEFF 		bl	HAL_GPIO_Init
 183              	.LVL5:
 329:Src/main.c    **** 
 330:Src/main.c    **** }
 184              		.loc 1 330 0
ARM GAS  /tmp/cc4zodur.s 			page 10


 185 00f0 0DB0     		add	sp, sp, #52
 186              	.LCFI2:
 187              		.cfi_def_cfa_offset 20
 188              		@ sp needed
 189 00f2 F0BD     		pop	{r4, r5, r6, r7, pc}
 190              	.L4:
 191              		.align	2
 192              	.L3:
 193 00f4 00380240 		.word	1073887232
 194 00f8 00040240 		.word	1073873920
 195 00fc 00180240 		.word	1073879040
 196 0100 00001110 		.word	269549568
 197 0104 00080240 		.word	1073874944
 198              		.cfi_endproc
 199              	.LFE138:
 201              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 202              		.align	1
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 206              		.fpu fpv4-sp-d16
 208              	MX_USART3_UART_Init:
 209              	.LFB136:
 219:Src/main.c    **** 
 210              		.loc 1 219 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 0, uses_anonymous_args = 0
 214 0000 08B5     		push	{r3, lr}
 215              	.LCFI3:
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 3, -8
 218              		.cfi_offset 14, -4
 228:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 219              		.loc 1 228 0
 220 0002 0848     		ldr	r0, .L7
 221 0004 084B     		ldr	r3, .L7+4
 222 0006 0360     		str	r3, [r0]
 229:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 223              		.loc 1 229 0
 224 0008 4FF4E133 		mov	r3, #115200
 225 000c 4360     		str	r3, [r0, #4]
 230:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 226              		.loc 1 230 0
 227 000e 0023     		movs	r3, #0
 228 0010 8360     		str	r3, [r0, #8]
 231:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 229              		.loc 1 231 0
 230 0012 C360     		str	r3, [r0, #12]
 232:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 231              		.loc 1 232 0
 232 0014 0361     		str	r3, [r0, #16]
 233:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 233              		.loc 1 233 0
 234 0016 0C22     		movs	r2, #12
 235 0018 4261     		str	r2, [r0, #20]
 234:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
ARM GAS  /tmp/cc4zodur.s 			page 11


 236              		.loc 1 234 0
 237 001a 8361     		str	r3, [r0, #24]
 235:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 238              		.loc 1 235 0
 239 001c C361     		str	r3, [r0, #28]
 236:Src/main.c    ****   {
 240              		.loc 1 236 0
 241 001e FFF7FEFF 		bl	HAL_UART_Init
 242              	.LVL6:
 244:Src/main.c    **** 
 243              		.loc 1 244 0
 244 0022 08BD     		pop	{r3, pc}
 245              	.L8:
 246              		.align	2
 247              	.L7:
 248 0024 00000000 		.word	huart3
 249 0028 00480040 		.word	1073760256
 250              		.cfi_endproc
 251              	.LFE136:
 253              		.section	.text.MX_USB_OTG_FS_PCD_Init,"ax",%progbits
 254              		.align	1
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 258              		.fpu fpv4-sp-d16
 260              	MX_USB_OTG_FS_PCD_Init:
 261              	.LFB137:
 252:Src/main.c    **** 
 262              		.loc 1 252 0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 0
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 266 0000 08B5     		push	{r3, lr}
 267              	.LCFI4:
 268              		.cfi_def_cfa_offset 8
 269              		.cfi_offset 3, -8
 270              		.cfi_offset 14, -4
 261:Src/main.c    ****   hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 271              		.loc 1 261 0
 272 0002 0A48     		ldr	r0, .L11
 273 0004 4FF0A043 		mov	r3, #1342177280
 274 0008 0360     		str	r3, [r0]
 262:Src/main.c    ****   hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 275              		.loc 1 262 0
 276 000a 0623     		movs	r3, #6
 277 000c 4360     		str	r3, [r0, #4]
 263:Src/main.c    ****   hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 278              		.loc 1 263 0
 279 000e 0222     		movs	r2, #2
 280 0010 C260     		str	r2, [r0, #12]
 264:Src/main.c    ****   hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 281              		.loc 1 264 0
 282 0012 0023     		movs	r3, #0
 283 0014 0361     		str	r3, [r0, #16]
 265:Src/main.c    ****   hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 284              		.loc 1 265 0
 285 0016 8261     		str	r2, [r0, #24]
ARM GAS  /tmp/cc4zodur.s 			page 12


 266:Src/main.c    ****   hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 286              		.loc 1 266 0
 287 0018 0122     		movs	r2, #1
 288 001a C261     		str	r2, [r0, #28]
 267:Src/main.c    ****   hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 289              		.loc 1 267 0
 290 001c 0362     		str	r3, [r0, #32]
 268:Src/main.c    ****   hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 291              		.loc 1 268 0
 292 001e 4362     		str	r3, [r0, #36]
 269:Src/main.c    ****   hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 293              		.loc 1 269 0
 294 0020 C262     		str	r2, [r0, #44]
 270:Src/main.c    ****   if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 295              		.loc 1 270 0
 296 0022 0363     		str	r3, [r0, #48]
 271:Src/main.c    ****   {
 297              		.loc 1 271 0
 298 0024 FFF7FEFF 		bl	HAL_PCD_Init
 299              	.LVL7:
 279:Src/main.c    **** 
 300              		.loc 1 279 0
 301 0028 08BD     		pop	{r3, pc}
 302              	.L12:
 303 002a 00BF     		.align	2
 304              	.L11:
 305 002c 00000000 		.word	hpcd_USB_OTG_FS
 306              		.cfi_endproc
 307              	.LFE137:
 309              		.section	.text.StartDefaultTask,"ax",%progbits
 310              		.align	1
 311              		.global	StartDefaultTask
 312              		.syntax unified
 313              		.thumb
 314              		.thumb_func
 315              		.fpu fpv4-sp-d16
 317              	StartDefaultTask:
 318              	.LFB139:
 331:Src/main.c    **** 
 332:Src/main.c    **** /* USER CODE BEGIN 4 */
 333:Src/main.c    **** 
 334:Src/main.c    **** /* USER CODE END 4 */
 335:Src/main.c    **** 
 336:Src/main.c    **** /* USER CODE BEGIN Header_StartDefaultTask */
 337:Src/main.c    **** /**
 338:Src/main.c    ****   * @brief  Function implementing the defaultTask thread.
 339:Src/main.c    ****   * @param  argument: Not used 
 340:Src/main.c    ****   * @retval None
 341:Src/main.c    ****   */
 342:Src/main.c    **** /* USER CODE END Header_StartDefaultTask */
 343:Src/main.c    **** void StartDefaultTask(void *argument)
 344:Src/main.c    **** {
 319              		.loc 1 344 0
 320              		.cfi_startproc
 321              		@ Volatile: function does not return.
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc4zodur.s 			page 13


 324              	.LVL8:
 325 0000 08B5     		push	{r3, lr}
 326              	.LCFI5:
 327              		.cfi_def_cfa_offset 8
 328              		.cfi_offset 3, -8
 329              		.cfi_offset 14, -4
 330              	.LVL9:
 331              	.L14:
 345:Src/main.c    ****     
 346:Src/main.c    ****     
 347:Src/main.c    ****     
 348:Src/main.c    ****     
 349:Src/main.c    **** 
 350:Src/main.c    ****   /* USER CODE BEGIN 5 */
 351:Src/main.c    ****   /* Infinite loop */
 352:Src/main.c    ****   for(;;)
 353:Src/main.c    ****   {
 354:Src/main.c    ****     osDelay(1);
 332              		.loc 1 354 0 discriminator 1
 333 0002 0120     		movs	r0, #1
 334 0004 FFF7FEFF 		bl	osDelay
 335              	.LVL10:
 336 0008 FBE7     		b	.L14
 337              		.cfi_endproc
 338              	.LFE139:
 340              		.section	.text.StartTask02,"ax",%progbits
 341              		.align	1
 342              		.global	StartTask02
 343              		.syntax unified
 344              		.thumb
 345              		.thumb_func
 346              		.fpu fpv4-sp-d16
 348              	StartTask02:
 349              	.LFB140:
 355:Src/main.c    ****   }
 356:Src/main.c    ****   /* USER CODE END 5 */ 
 357:Src/main.c    **** }
 358:Src/main.c    **** 
 359:Src/main.c    **** /* USER CODE BEGIN Header_StartTask02 */
 360:Src/main.c    **** /**
 361:Src/main.c    **** * @brief Function implementing the myTask02 thread.
 362:Src/main.c    **** * @param argument: Not used
 363:Src/main.c    **** * @retval None
 364:Src/main.c    **** */
 365:Src/main.c    **** /* USER CODE END Header_StartTask02 */
 366:Src/main.c    **** void StartTask02(void *argument)
 367:Src/main.c    **** {
 350              		.loc 1 367 0
 351              		.cfi_startproc
 352              		@ Volatile: function does not return.
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355              	.LVL11:
 356 0000 08B5     		push	{r3, lr}
 357              	.LCFI6:
 358              		.cfi_def_cfa_offset 8
 359              		.cfi_offset 3, -8
ARM GAS  /tmp/cc4zodur.s 			page 14


 360              		.cfi_offset 14, -4
 361              	.LVL12:
 362              	.L17:
 368:Src/main.c    ****   /* USER CODE BEGIN StartTask02 */
 369:Src/main.c    ****   /* Infinite loop */
 370:Src/main.c    ****   for(;;)
 371:Src/main.c    ****   {
 372:Src/main.c    ****     osDelay(1);
 363              		.loc 1 372 0 discriminator 1
 364 0002 0120     		movs	r0, #1
 365 0004 FFF7FEFF 		bl	osDelay
 366              	.LVL13:
 367 0008 FBE7     		b	.L17
 368              		.cfi_endproc
 369              	.LFE140:
 371              		.section	.text.SystemClock_Config,"ax",%progbits
 372              		.align	1
 373              		.global	SystemClock_Config
 374              		.syntax unified
 375              		.thumb
 376              		.thumb_func
 377              		.fpu fpv4-sp-d16
 379              	SystemClock_Config:
 380              	.LFB135:
 168:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 381              		.loc 1 168 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 176
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385 0000 30B5     		push	{r4, r5, lr}
 386              	.LCFI7:
 387              		.cfi_def_cfa_offset 12
 388              		.cfi_offset 4, -12
 389              		.cfi_offset 5, -8
 390              		.cfi_offset 14, -4
 391 0002 ADB0     		sub	sp, sp, #180
 392              	.LCFI8:
 393              		.cfi_def_cfa_offset 192
 169:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 394              		.loc 1 169 0
 395 0004 3422     		movs	r2, #52
 396 0006 0021     		movs	r1, #0
 397 0008 1FA8     		add	r0, sp, #124
 398 000a FFF7FEFF 		bl	memset
 399              	.LVL14:
 170:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 400              		.loc 1 170 0
 401 000e 0024     		movs	r4, #0
 402 0010 1A94     		str	r4, [sp, #104]
 403 0012 1B94     		str	r4, [sp, #108]
 404 0014 1C94     		str	r4, [sp, #112]
 405 0016 1D94     		str	r4, [sp, #116]
 406 0018 1E94     		str	r4, [sp, #120]
 171:Src/main.c    **** 
 407              		.loc 1 171 0
 408 001a 5C22     		movs	r2, #92
 409 001c 2146     		mov	r1, r4
ARM GAS  /tmp/cc4zodur.s 			page 15


 410 001e 03A8     		add	r0, sp, #12
 411 0020 FFF7FEFF 		bl	memset
 412              	.LVL15:
 413              	.LBB8:
 175:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 414              		.loc 1 175 0
 415 0024 0194     		str	r4, [sp, #4]
 416 0026 204B     		ldr	r3, .L21
 417 0028 1A6C     		ldr	r2, [r3, #64]
 418 002a 42F08052 		orr	r2, r2, #268435456
 419 002e 1A64     		str	r2, [r3, #64]
 420 0030 1B6C     		ldr	r3, [r3, #64]
 421 0032 03F08053 		and	r3, r3, #268435456
 422 0036 0193     		str	r3, [sp, #4]
 423 0038 019B     		ldr	r3, [sp, #4]
 424              	.LBE8:
 425              	.LBB9:
 176:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 426              		.loc 1 176 0
 427 003a 0294     		str	r4, [sp, #8]
 428 003c 1B4B     		ldr	r3, .L21+4
 429 003e 1A68     		ldr	r2, [r3]
 430 0040 42F44042 		orr	r2, r2, #49152
 431 0044 1A60     		str	r2, [r3]
 432 0046 1B68     		ldr	r3, [r3]
 433 0048 03F44043 		and	r3, r3, #49152
 434 004c 0293     		str	r3, [sp, #8]
 435 004e 029B     		ldr	r3, [sp, #8]
 436              	.LBE9:
 179:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 437              		.loc 1 179 0
 438 0050 0123     		movs	r3, #1
 439 0052 1F93     		str	r3, [sp, #124]
 180:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 440              		.loc 1 180 0
 441 0054 4FF4A023 		mov	r3, #327680
 442 0058 2093     		str	r3, [sp, #128]
 181:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 443              		.loc 1 181 0
 444 005a 0225     		movs	r5, #2
 445 005c 2595     		str	r5, [sp, #148]
 182:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 4;
 446              		.loc 1 182 0
 447 005e 4FF48003 		mov	r3, #4194304
 448 0062 2693     		str	r3, [sp, #152]
 183:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 168;
 449              		.loc 1 183 0
 450 0064 0423     		movs	r3, #4
 451 0066 2793     		str	r3, [sp, #156]
 184:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 452              		.loc 1 184 0
 453 0068 A823     		movs	r3, #168
 454 006a 2893     		str	r3, [sp, #160]
 185:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 455              		.loc 1 185 0
 456 006c 2995     		str	r5, [sp, #164]
 186:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 2;
ARM GAS  /tmp/cc4zodur.s 			page 16


 457              		.loc 1 186 0
 458 006e 0723     		movs	r3, #7
 459 0070 2A93     		str	r3, [sp, #168]
 187:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 460              		.loc 1 187 0
 461 0072 2B95     		str	r5, [sp, #172]
 188:Src/main.c    ****   {
 462              		.loc 1 188 0
 463 0074 1FA8     		add	r0, sp, #124
 464 0076 FFF7FEFF 		bl	HAL_RCC_OscConfig
 465              	.LVL16:
 194:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 466              		.loc 1 194 0
 467 007a 0F23     		movs	r3, #15
 468 007c 1A93     		str	r3, [sp, #104]
 196:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 469              		.loc 1 196 0
 470 007e 1B95     		str	r5, [sp, #108]
 197:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 471              		.loc 1 197 0
 472 0080 1C94     		str	r4, [sp, #112]
 198:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 473              		.loc 1 198 0
 474 0082 4FF4A053 		mov	r3, #5120
 475 0086 1D93     		str	r3, [sp, #116]
 199:Src/main.c    **** 
 476              		.loc 1 199 0
 477 0088 4FF48053 		mov	r3, #4096
 478 008c 1E93     		str	r3, [sp, #120]
 201:Src/main.c    ****   {
 479              		.loc 1 201 0
 480 008e 0521     		movs	r1, #5
 481 0090 1AA8     		add	r0, sp, #104
 482 0092 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 483              	.LVL17:
 205:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 484              		.loc 1 205 0
 485 0096 4FF48073 		mov	r3, #256
 486 009a 0393     		str	r3, [sp, #12]
 206:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 487              		.loc 1 206 0
 488 009c 1894     		str	r4, [sp, #96]
 207:Src/main.c    ****   {
 489              		.loc 1 207 0
 490 009e 03A8     		add	r0, sp, #12
 491 00a0 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 492              	.LVL18:
 211:Src/main.c    **** 
 493              		.loc 1 211 0
 494 00a4 2DB0     		add	sp, sp, #180
 495              	.LCFI9:
 496              		.cfi_def_cfa_offset 12
 497              		@ sp needed
 498 00a6 30BD     		pop	{r4, r5, pc}
 499              	.L22:
 500              		.align	2
 501              	.L21:
ARM GAS  /tmp/cc4zodur.s 			page 17


 502 00a8 00380240 		.word	1073887232
 503 00ac 00700040 		.word	1073770496
 504              		.cfi_endproc
 505              	.LFE135:
 507              		.section	.text.main,"ax",%progbits
 508              		.align	1
 509              		.global	main
 510              		.syntax unified
 511              		.thumb
 512              		.thumb_func
 513              		.fpu fpv4-sp-d16
 515              	main:
 516              	.LFB134:
  78:Src/main.c    ****   /* USER CODE BEGIN 1 */
 517              		.loc 1 78 0
 518              		.cfi_startproc
 519              		@ Volatile: function does not return.
 520              		@ args = 0, pretend = 0, frame = 72
 521              		@ frame_needed = 0, uses_anonymous_args = 0
 522 0000 00B5     		push	{lr}
 523              	.LCFI10:
 524              		.cfi_def_cfa_offset 4
 525              		.cfi_offset 14, -4
 526 0002 93B0     		sub	sp, sp, #76
 527              	.LCFI11:
 528              		.cfi_def_cfa_offset 80
  87:Src/main.c    **** 
 529              		.loc 1 87 0
 530 0004 FFF7FEFF 		bl	HAL_Init
 531              	.LVL19:
  94:Src/main.c    **** 
 532              		.loc 1 94 0
 533 0008 FFF7FEFF 		bl	SystemClock_Config
 534              	.LVL20:
 101:Src/main.c    ****   MX_USART3_UART_Init();
 535              		.loc 1 101 0
 536 000c FFF7FEFF 		bl	MX_GPIO_Init
 537              	.LVL21:
 102:Src/main.c    ****   MX_USB_OTG_FS_PCD_Init();
 538              		.loc 1 102 0
 539 0010 FFF7FEFF 		bl	MX_USART3_UART_Init
 540              	.LVL22:
 103:Src/main.c    ****   /* USER CODE BEGIN 2 */
 541              		.loc 1 103 0
 542 0014 FFF7FEFF 		bl	MX_USB_OTG_FS_PCD_Init
 543              	.LVL23:
 108:Src/main.c    **** 
 544              		.loc 1 108 0
 545 0018 FFF7FEFF 		bl	osKernelInitialize
 546              	.LVL24:
 128:Src/main.c    ****     .name = "defaultTask",
 547              		.loc 1 128 0
 548 001c 2025     		movs	r5, #32
 549 001e 2A46     		mov	r2, r5
 550 0020 0021     		movs	r1, #0
 551 0022 0AA8     		add	r0, sp, #40
 552 0024 FFF7FEFF 		bl	memset
ARM GAS  /tmp/cc4zodur.s 			page 18


 553              	.LVL25:
 554 0028 104B     		ldr	r3, .L26
 555 002a 0993     		str	r3, [sp, #36]
 556 002c 8024     		movs	r4, #128
 557 002e 0E94     		str	r4, [sp, #56]
 558 0030 1823     		movs	r3, #24
 559 0032 0F93     		str	r3, [sp, #60]
 133:Src/main.c    **** 
 560              		.loc 1 133 0
 561 0034 09AA     		add	r2, sp, #36
 562 0036 0021     		movs	r1, #0
 563 0038 0D48     		ldr	r0, .L26+4
 564 003a FFF7FEFF 		bl	osThreadNew
 565              	.LVL26:
 566 003e 0D4B     		ldr	r3, .L26+8
 567 0040 1860     		str	r0, [r3]
 136:Src/main.c    ****     .name = "myTask02",
 568              		.loc 1 136 0
 569 0042 2A46     		mov	r2, r5
 570 0044 0021     		movs	r1, #0
 571 0046 01A8     		add	r0, sp, #4
 572 0048 FFF7FEFF 		bl	memset
 573              	.LVL27:
 574 004c 0A4B     		ldr	r3, .L26+12
 575 004e 0093     		str	r3, [sp]
 576 0050 0594     		str	r4, [sp, #20]
 577 0052 0823     		movs	r3, #8
 578 0054 0693     		str	r3, [sp, #24]
 141:Src/main.c    **** 
 579              		.loc 1 141 0
 580 0056 6A46     		mov	r2, sp
 581 0058 0021     		movs	r1, #0
 582 005a 0848     		ldr	r0, .L26+16
 583 005c FFF7FEFF 		bl	osThreadNew
 584              	.LVL28:
 585 0060 074B     		ldr	r3, .L26+20
 586 0062 1860     		str	r0, [r3]
 148:Src/main.c    ****   
 587              		.loc 1 148 0
 588 0064 FFF7FEFF 		bl	osKernelStart
 589              	.LVL29:
 590              	.L24:
 591 0068 FEE7     		b	.L24
 592              	.L27:
 593 006a 00BF     		.align	2
 594              	.L26:
 595 006c 00000000 		.word	.LC0
 596 0070 00000000 		.word	StartDefaultTask
 597 0074 00000000 		.word	defaultTaskHandle
 598 0078 0C000000 		.word	.LC1
 599 007c 00000000 		.word	StartTask02
 600 0080 00000000 		.word	myTask02Handle
 601              		.cfi_endproc
 602              	.LFE134:
 604              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 605              		.align	1
 606              		.global	HAL_TIM_PeriodElapsedCallback
ARM GAS  /tmp/cc4zodur.s 			page 19


 607              		.syntax unified
 608              		.thumb
 609              		.thumb_func
 610              		.fpu fpv4-sp-d16
 612              	HAL_TIM_PeriodElapsedCallback:
 613              	.LFB141:
 373:Src/main.c    ****   }
 374:Src/main.c    ****   /* USER CODE END StartTask02 */
 375:Src/main.c    **** }
 376:Src/main.c    **** 
 377:Src/main.c    **** /**
 378:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 379:Src/main.c    ****   * @note   This function is called  when TIM12 interrupt took place, inside
 380:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 381:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 382:Src/main.c    ****   * @param  htim : TIM handle
 383:Src/main.c    ****   * @retval None
 384:Src/main.c    ****   */
 385:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 386:Src/main.c    **** {
 614              		.loc 1 386 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618              	.LVL30:
 619 0000 08B5     		push	{r3, lr}
 620              	.LCFI12:
 621              		.cfi_def_cfa_offset 8
 622              		.cfi_offset 3, -8
 623              		.cfi_offset 14, -4
 387:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 388:Src/main.c    **** 
 389:Src/main.c    ****   /* USER CODE END Callback 0 */
 390:Src/main.c    ****   if (htim->Instance == TIM12) {
 624              		.loc 1 390 0
 625 0002 0268     		ldr	r2, [r0]
 626 0004 034B     		ldr	r3, .L32
 627 0006 9A42     		cmp	r2, r3
 628 0008 00D0     		beq	.L31
 629              	.LVL31:
 630              	.L28:
 391:Src/main.c    ****     HAL_IncTick();
 392:Src/main.c    ****   }
 393:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 394:Src/main.c    **** 
 395:Src/main.c    ****   /* USER CODE END Callback 1 */
 396:Src/main.c    **** }
 631              		.loc 1 396 0
 632 000a 08BD     		pop	{r3, pc}
 633              	.LVL32:
 634              	.L31:
 391:Src/main.c    ****     HAL_IncTick();
 635              		.loc 1 391 0
 636 000c FFF7FEFF 		bl	HAL_IncTick
 637              	.LVL33:
 638              		.loc 1 396 0
 639 0010 FBE7     		b	.L28
ARM GAS  /tmp/cc4zodur.s 			page 20


 640              	.L33:
 641 0012 00BF     		.align	2
 642              	.L32:
 643 0014 00180040 		.word	1073747968
 644              		.cfi_endproc
 645              	.LFE141:
 647              		.section	.text.Error_Handler,"ax",%progbits
 648              		.align	1
 649              		.global	Error_Handler
 650              		.syntax unified
 651              		.thumb
 652              		.thumb_func
 653              		.fpu fpv4-sp-d16
 655              	Error_Handler:
 656              	.LFB142:
 397:Src/main.c    **** 
 398:Src/main.c    **** /**
 399:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 400:Src/main.c    ****   * @retval None
 401:Src/main.c    ****   */
 402:Src/main.c    **** void Error_Handler(void)
 403:Src/main.c    **** {
 657              		.loc 1 403 0
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 0
 660              		@ frame_needed = 0, uses_anonymous_args = 0
 661              		@ link register save eliminated.
 404:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 405:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 406:Src/main.c    **** 
 407:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 408:Src/main.c    **** }
 662              		.loc 1 408 0
 663 0000 7047     		bx	lr
 664              		.cfi_endproc
 665              	.LFE142:
 667              		.comm	myTask02Handle,4,4
 668              		.comm	defaultTaskHandle,4,4
 669              		.comm	hpcd_USB_OTG_FS,1032,4
 670              		.comm	huart3,64,4
 671              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 672              		.align	2
 673              	.LC0:
 674 0000 64656661 		.ascii	"defaultTask\000"
 674      756C7454 
 674      61736B00 
 675              	.LC1:
 676 000c 6D795461 		.ascii	"myTask02\000"
 676      736B3032 
 676      00
 677              		.text
 678              	.Letext0:
 679              		.file 2 "/home/hongtao/STM32_Tools/ARM_GCC/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/includ
 680              		.file 3 "/home/hongtao/STM32_Tools/ARM_GCC/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/includ
 681              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 682              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 683              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
ARM GAS  /tmp/cc4zodur.s 			page 21


 684              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 685              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 686              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 687              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 688              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 689              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 690              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 691              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 692              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usb.h"
 693              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_pcd.h"
 694              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 695              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 696              		.file 19 "<built-in>"
ARM GAS  /tmp/cc4zodur.s 			page 22


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc4zodur.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc4zodur.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc4zodur.s:193    .text.MX_GPIO_Init:00000000000000f4 $d
     /tmp/cc4zodur.s:202    .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/cc4zodur.s:208    .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/cc4zodur.s:248    .text.MX_USART3_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart3
     /tmp/cc4zodur.s:254    .text.MX_USB_OTG_FS_PCD_Init:0000000000000000 $t
     /tmp/cc4zodur.s:260    .text.MX_USB_OTG_FS_PCD_Init:0000000000000000 MX_USB_OTG_FS_PCD_Init
     /tmp/cc4zodur.s:305    .text.MX_USB_OTG_FS_PCD_Init:000000000000002c $d
                            *COM*:0000000000000408 hpcd_USB_OTG_FS
     /tmp/cc4zodur.s:310    .text.StartDefaultTask:0000000000000000 $t
     /tmp/cc4zodur.s:317    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/cc4zodur.s:341    .text.StartTask02:0000000000000000 $t
     /tmp/cc4zodur.s:348    .text.StartTask02:0000000000000000 StartTask02
     /tmp/cc4zodur.s:372    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc4zodur.s:379    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc4zodur.s:502    .text.SystemClock_Config:00000000000000a8 $d
     /tmp/cc4zodur.s:508    .text.main:0000000000000000 $t
     /tmp/cc4zodur.s:515    .text.main:0000000000000000 main
     /tmp/cc4zodur.s:595    .text.main:000000000000006c $d
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:0000000000000004 myTask02Handle
     /tmp/cc4zodur.s:605    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc4zodur.s:612    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc4zodur.s:643    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/cc4zodur.s:648    .text.Error_Handler:0000000000000000 $t
     /tmp/cc4zodur.s:655    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc4zodur.s:672    .rodata.main.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_PCD_Init
osDelay
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
osKernelInitialize
osThreadNew
osKernelStart
HAL_IncTick
