ARM GAS  /tmp/ccv30Qft.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvTaskIsTaskSuspended:
  25              	.LFB16:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  /tmp/ccv30Qft.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
ARM GAS  /tmp/ccv30Qft.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
ARM GAS  /tmp/ccv30Qft.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
ARM GAS  /tmp/ccv30Qft.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
ARM GAS  /tmp/ccv30Qft.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
ARM GAS  /tmp/ccv30Qft.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = {0};	/*< Prioritised read
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = {0};								/*< Delayed tasks. */
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = {0};								/*< Delayed tasks (two lists are used
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;					/*< Points to the delayed ta
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;			/*< Points to the dela
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = {0};								/*< Tasks that have been readied whil
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination = {0};					/*< Tasks that have been deleted
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = {0};						/*< Tasks that are currently suspende
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
ARM GAS  /tmp/ccv30Qft.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
ARM GAS  /tmp/ccv30Qft.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv30Qft.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
ARM GAS  /tmp/ccv30Qft.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
ARM GAS  /tmp/ccv30Qft.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
ARM GAS  /tmp/ccv30Qft.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccv30Qft.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
ARM GAS  /tmp/ccv30Qft.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
ARM GAS  /tmp/ccv30Qft.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
ARM GAS  /tmp/ccv30Qft.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
ARM GAS  /tmp/ccv30Qft.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccv30Qft.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccv30Qft.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv30Qft.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv30Qft.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccv30Qft.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
ARM GAS  /tmp/ccv30Qft.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccv30Qft.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/ccv30Qft.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv30Qft.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  /tmp/ccv30Qft.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccv30Qft.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/ccv30Qft.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccv30Qft.s 			page 31


1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1726 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1734 0
  34 0000 50B1     		cbz	r0, .L8
ARM GAS  /tmp/ccv30Qft.s 			page 32


1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  35              		.loc 1 1737 0
  36 0002 4169     		ldr	r1, [r0, #20]
  37 0004 0C4A     		ldr	r2, .L9
  38 0006 9142     		cmp	r1, r2
  39 0008 0FD1     		bne	.L5
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  40              		.loc 1 1740 0
  41 000a 836A     		ldr	r3, [r0, #40]
  42 000c 0B4A     		ldr	r2, .L9+4
  43 000e 9342     		cmp	r3, r2
  44 0010 0DD0     		beq	.L6
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  45              		.loc 1 1744 0
  46 0012 73B1     		cbz	r3, .L7
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  47              		.loc 1 1727 0
  48 0014 0020     		movs	r0, #0
  49              	.LVL1:
  50 0016 7047     		bx	lr
  51              	.LVL2:
  52              	.L8:
  53              	.LBB113:
  54              	.LBB114:
  55              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
ARM GAS  /tmp/ccv30Qft.s 			page 33


  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
ARM GAS  /tmp/ccv30Qft.s 			page 34


  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
ARM GAS  /tmp/ccv30Qft.s 			page 35


 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  56              		.loc 2 195 0
ARM GAS  /tmp/ccv30Qft.s 			page 36


  57              		.syntax unified
  58              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  59 0018 4FF05003 			mov r3, #80												
  60 001c 83F31188 		msr basepri, r3											
  61 0020 BFF36F8F 		isb														
  62 0024 BFF34F8F 		dsb														
  63              	
  64              	@ 0 "" 2
  65              	.LVL3:
  66              		.thumb
  67              		.syntax unified
  68              	.L3:
  69 0028 FEE7     		b	.L3
  70              	.L5:
  71              	.LBE114:
  72              	.LBE113:
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  73              		.loc 1 1727 0
  74 002a 0020     		movs	r0, #0
  75              	.LVL4:
  76 002c 7047     		bx	lr
  77              	.LVL5:
  78              	.L6:
  79 002e 0020     		movs	r0, #0
  80              	.LVL6:
  81 0030 7047     		bx	lr
  82              	.LVL7:
  83              	.L7:
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  84              		.loc 1 1746 0
  85 0032 0120     		movs	r0, #1
  86              	.LVL8:
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  87              		.loc 1 1764 0
  88 0034 7047     		bx	lr
  89              	.L10:
  90 0036 00BF     		.align	2
  91              	.L9:
  92 0038 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccv30Qft.s 			page 37


  93 003c 00000000 		.word	.LANCHOR1
  94              		.cfi_endproc
  95              	.LFE16:
  97              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  98              		.align	1
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu fpv4-sp-d16
 104              	prvTaskCheckFreeStackSpace:
 105              	.LFB46:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccv30Qft.s 			page 38


1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccv30Qft.s 			page 39


1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccv30Qft.s 			page 40


1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
ARM GAS  /tmp/ccv30Qft.s 			page 41


1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
ARM GAS  /tmp/ccv30Qft.s 			page 42


2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv30Qft.s 			page 43


2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv30Qft.s 			page 44


2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
ARM GAS  /tmp/ccv30Qft.s 			page 45


2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv30Qft.s 			page 46


2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
ARM GAS  /tmp/ccv30Qft.s 			page 47


2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccv30Qft.s 			page 48


2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
ARM GAS  /tmp/ccv30Qft.s 			page 49


2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
ARM GAS  /tmp/ccv30Qft.s 			page 50


2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
ARM GAS  /tmp/ccv30Qft.s 			page 51


2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccv30Qft.s 			page 52


2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccv30Qft.s 			page 53


2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccv30Qft.s 			page 54


2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
ARM GAS  /tmp/ccv30Qft.s 			page 55


2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
ARM GAS  /tmp/ccv30Qft.s 			page 56


2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
ARM GAS  /tmp/ccv30Qft.s 			page 57


2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv30Qft.s 			page 58


2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
ARM GAS  /tmp/ccv30Qft.s 			page 59


3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
ARM GAS  /tmp/ccv30Qft.s 			page 60


3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/ccv30Qft.s 			page 61


3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
ARM GAS  /tmp/ccv30Qft.s 			page 62


3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
ARM GAS  /tmp/ccv30Qft.s 			page 63


3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
ARM GAS  /tmp/ccv30Qft.s 			page 64


3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccv30Qft.s 			page 65


3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccv30Qft.s 			page 66


3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/ccv30Qft.s 			page 67


3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
ARM GAS  /tmp/ccv30Qft.s 			page 68


3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccv30Qft.s 			page 69


3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 106              		.loc 1 3623 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
 111              	.LVL9:
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 112              		.loc 1 3624 0
 113 0000 0023     		movs	r3, #0
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
ARM GAS  /tmp/ccv30Qft.s 			page 70


 114              		.loc 1 3626 0
 115 0002 01E0     		b	.L12
 116              	.LVL10:
 117              	.L13:
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 118              		.loc 1 3628 0
 119 0004 0130     		adds	r0, r0, #1
 120              	.LVL11:
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 121              		.loc 1 3629 0
 122 0006 0133     		adds	r3, r3, #1
 123              	.LVL12:
 124              	.L12:
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 125              		.loc 1 3626 0
 126 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 127 000a A52A     		cmp	r2, #165
 128 000c FAD0     		beq	.L13
 129              	.LVL13:
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 130              		.loc 1 3635 0
 131 000e C3F38F00 		ubfx	r0, r3, #2, #16
 132              	.LVL14:
 133 0012 7047     		bx	lr
 134              		.cfi_endproc
 135              	.LFE46:
 137              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 138              		.align	1
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 142              		.fpu fpv4-sp-d16
 144              	prvResetNextTaskUnblockTime:
 145              	.LFB49:
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
ARM GAS  /tmp/ccv30Qft.s 			page 71


3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccv30Qft.s 			page 72


3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 146              		.loc 1 3725 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 151              		.loc 1 3728 0
 152 0000 084B     		ldr	r3, .L18
 153 0002 1B68     		ldr	r3, [r3]
 154 0004 1B68     		ldr	r3, [r3]
 155 0006 3BB1     		cbz	r3, .L17
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 156              		.loc 1 3742 0
 157 0008 064B     		ldr	r3, .L18
 158 000a 1B68     		ldr	r3, [r3]
 159 000c DB68     		ldr	r3, [r3, #12]
 160 000e DB68     		ldr	r3, [r3, #12]
 161              	.LVL15:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 162              		.loc 1 3743 0
 163 0010 5A68     		ldr	r2, [r3, #4]
 164 0012 054B     		ldr	r3, .L18+4
 165              	.LVL16:
 166 0014 1A60     		str	r2, [r3]
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccv30Qft.s 			page 73


 167              		.loc 1 3745 0
 168 0016 7047     		bx	lr
 169              	.L17:
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 170              		.loc 1 3734 0
 171 0018 034B     		ldr	r3, .L18+4
 172 001a 4FF0FF32 		mov	r2, #-1
 173 001e 1A60     		str	r2, [r3]
 174 0020 7047     		bx	lr
 175              	.L19:
 176 0022 00BF     		.align	2
 177              	.L18:
 178 0024 00000000 		.word	.LANCHOR2
 179 0028 00000000 		.word	.LANCHOR3
 180              		.cfi_endproc
 181              	.LFE49:
 183              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 184              		.align	1
 185              		.syntax unified
 186              		.thumb
 187              		.thumb_func
 188              		.fpu fpv4-sp-d16
 190              	prvInitialiseNewTask:
 191              	.LFB6:
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 192              		.loc 1 825 0
 193              		.cfi_startproc
 194              		@ args = 16, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196              	.LVL17:
 197 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 198              	.LCFI0:
 199              		.cfi_def_cfa_offset 32
 200              		.cfi_offset 4, -32
 201              		.cfi_offset 5, -28
 202              		.cfi_offset 6, -24
 203              		.cfi_offset 7, -20
 204              		.cfi_offset 8, -16
 205              		.cfi_offset 9, -12
 206              		.cfi_offset 10, -8
 207              		.cfi_offset 14, -4
 208 0004 8146     		mov	r9, r0
 209 0006 0D46     		mov	r5, r1
 210 0008 1746     		mov	r7, r2
 211 000a 9A46     		mov	r10, r3
 212 000c 089E     		ldr	r6, [sp, #32]
 213 000e DDF82480 		ldr	r8, [sp, #36]
 214 0012 0A9C     		ldr	r4, [sp, #40]
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 215              		.loc 1 847 0
 216 0014 9200     		lsls	r2, r2, #2
 217              	.LVL18:
 218 0016 A521     		movs	r1, #165
 219              	.LVL19:
 220 0018 206B     		ldr	r0, [r4, #48]
 221              	.LVL20:
 222 001a FFF7FEFF 		bl	memset
ARM GAS  /tmp/ccv30Qft.s 			page 74


 223              	.LVL21:
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 224              		.loc 1 857 0
 225 001e 236B     		ldr	r3, [r4, #48]
 226 0020 07F18042 		add	r2, r7, #1073741824
 227 0024 013A     		subs	r2, r2, #1
 228 0026 03EB8207 		add	r7, r3, r2, lsl #2
 229              	.LVL22:
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 230              		.loc 1 858 0
 231 002a 27F00707 		bic	r7, r7, #7
 232              	.LVL23:
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 233              		.loc 1 885 0
 234 002e 0023     		movs	r3, #0
 235              	.LVL24:
 236              	.L21:
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 237              		.loc 1 885 0 is_stmt 0 discriminator 1
 238 0030 0F2B     		cmp	r3, #15
 239 0032 07D8     		bhi	.L22
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 240              		.loc 1 887 0 is_stmt 1
 241 0034 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 242 0036 E218     		adds	r2, r4, r3
 243 0038 82F83410 		strb	r1, [r2, #52]
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 244              		.loc 1 892 0
 245 003c EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 246 003e 0AB1     		cbz	r2, .L22
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 247              		.loc 1 885 0 discriminator 2
 248 0040 0133     		adds	r3, r3, #1
 249              	.LVL25:
 250 0042 F5E7     		b	.L21
 251              	.L22:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 252              		.loc 1 904 0
 253 0044 0023     		movs	r3, #0
 254              	.LVL26:
 255 0046 84F84330 		strb	r3, [r4, #67]
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 256              		.loc 1 908 0
 257 004a 372E     		cmp	r6, #55
 258 004c 00D9     		bls	.L24
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 259              		.loc 1 910 0
 260 004e 3726     		movs	r6, #55
 261              	.L24:
 262              	.LVL27:
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 263              		.loc 1 917 0
 264 0050 E662     		str	r6, [r4, #44]
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 265              		.loc 1 920 0
 266 0052 E664     		str	r6, [r4, #76]
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccv30Qft.s 			page 75


 267              		.loc 1 921 0
 268 0054 0025     		movs	r5, #0
 269              	.LVL28:
 270 0056 2565     		str	r5, [r4, #80]
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 271              		.loc 1 925 0
 272 0058 201D     		adds	r0, r4, #4
 273 005a FFF7FEFF 		bl	vListInitialiseItem
 274              	.LVL29:
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 275              		.loc 1 926 0
 276 005e 04F11800 		add	r0, r4, #24
 277 0062 FFF7FEFF 		bl	vListInitialiseItem
 278              	.LVL30:
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279              		.loc 1 930 0
 280 0066 2461     		str	r4, [r4, #16]
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 281              		.loc 1 933 0
 282 0068 C6F13806 		rsb	r6, r6, #56
 283              	.LVL31:
 284 006c A661     		str	r6, [r4, #24]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 285              		.loc 1 934 0
 286 006e 6462     		str	r4, [r4, #36]
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 287              		.loc 1 976 0
 288 0070 6565     		str	r5, [r4, #84]
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 289              		.loc 1 977 0
 290 0072 84F85850 		strb	r5, [r4, #88]
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 291              		.loc 1 1004 0
 292 0076 5246     		mov	r2, r10
 293 0078 4946     		mov	r1, r9
 294 007a 3846     		mov	r0, r7
 295 007c FFF7FEFF 		bl	pxPortInitialiseStack
 296              	.LVL32:
 297 0080 2060     		str	r0, [r4]
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 298              		.loc 1 1008 0
 299 0082 B8F1000F 		cmp	r8, #0
 300 0086 01D0     		beq	.L20
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 301              		.loc 1 1012 0
 302 0088 C8F80040 		str	r4, [r8]
 303              	.L20:
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 304              		.loc 1 1018 0
 305 008c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 306              		.cfi_endproc
 307              	.LFE6:
 309              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 310              		.align	1
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
ARM GAS  /tmp/ccv30Qft.s 			page 76


 314              		.fpu fpv4-sp-d16
 316              	prvInitialiseTaskLists:
 317              	.LFB42:
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 318              		.loc 1 3431 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322 0000 38B5     		push	{r3, r4, r5, lr}
 323              	.LCFI1:
 324              		.cfi_def_cfa_offset 16
 325              		.cfi_offset 3, -16
 326              		.cfi_offset 4, -12
 327              		.cfi_offset 5, -8
 328              		.cfi_offset 14, -4
 329              	.LVL33:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 330              		.loc 1 3434 0
 331 0002 0024     		movs	r4, #0
 332 0004 07E0     		b	.L29
 333              	.LVL34:
 334              	.L30:
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 335              		.loc 1 3436 0 discriminator 3
 336 0006 04EB8402 		add	r2, r4, r4, lsl #2
 337 000a 9300     		lsls	r3, r2, #2
 338 000c 0E48     		ldr	r0, .L32
 339 000e 1844     		add	r0, r0, r3
 340 0010 FFF7FEFF 		bl	vListInitialise
 341              	.LVL35:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 342              		.loc 1 3434 0 discriminator 3
 343 0014 0134     		adds	r4, r4, #1
 344              	.LVL36:
 345              	.L29:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 346              		.loc 1 3434 0 is_stmt 0 discriminator 1
 347 0016 372C     		cmp	r4, #55
 348 0018 F5D9     		bls	.L30
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 349              		.loc 1 3439 0 is_stmt 1
 350 001a 0C4D     		ldr	r5, .L32+4
 351 001c 2846     		mov	r0, r5
 352 001e FFF7FEFF 		bl	vListInitialise
 353              	.LVL37:
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 354              		.loc 1 3440 0
 355 0022 0B4C     		ldr	r4, .L32+8
 356              	.LVL38:
 357 0024 2046     		mov	r0, r4
 358 0026 FFF7FEFF 		bl	vListInitialise
 359              	.LVL39:
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360              		.loc 1 3441 0
 361 002a 0A48     		ldr	r0, .L32+12
 362 002c FFF7FEFF 		bl	vListInitialise
 363              	.LVL40:
ARM GAS  /tmp/ccv30Qft.s 			page 77


3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 364              		.loc 1 3445 0
 365 0030 0948     		ldr	r0, .L32+16
 366 0032 FFF7FEFF 		bl	vListInitialise
 367              	.LVL41:
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 368              		.loc 1 3451 0
 369 0036 0948     		ldr	r0, .L32+20
 370 0038 FFF7FEFF 		bl	vListInitialise
 371              	.LVL42:
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 372              		.loc 1 3457 0
 373 003c 084B     		ldr	r3, .L32+24
 374 003e 1D60     		str	r5, [r3]
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 375              		.loc 1 3458 0
 376 0040 084B     		ldr	r3, .L32+28
 377 0042 1C60     		str	r4, [r3]
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 378              		.loc 1 3459 0
 379 0044 38BD     		pop	{r3, r4, r5, pc}
 380              	.L33:
 381 0046 00BF     		.align	2
 382              	.L32:
 383 0048 00000000 		.word	.LANCHOR4
 384 004c 00000000 		.word	.LANCHOR5
 385 0050 00000000 		.word	.LANCHOR6
 386 0054 00000000 		.word	.LANCHOR1
 387 0058 00000000 		.word	.LANCHOR7
 388 005c 00000000 		.word	.LANCHOR0
 389 0060 00000000 		.word	.LANCHOR2
 390 0064 00000000 		.word	.LANCHOR8
 391              		.cfi_endproc
 392              	.LFE42:
 394              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 395              		.align	1
 396              		.syntax unified
 397              		.thumb
 398              		.thumb_func
 399              		.fpu fpv4-sp-d16
 401              	prvAddNewTaskToReadyList:
 402              	.LFB7:
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 403              		.loc 1 1022 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              	.LVL43:
 408 0000 10B5     		push	{r4, lr}
 409              	.LCFI2:
 410              		.cfi_def_cfa_offset 8
 411              		.cfi_offset 4, -8
 412              		.cfi_offset 14, -4
 413 0002 0446     		mov	r4, r0
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 414              		.loc 1 1025 0
 415 0004 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /tmp/ccv30Qft.s 			page 78


 416              	.LVL44:
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 417              		.loc 1 1027 0
 418 0008 214A     		ldr	r2, .L42
 419 000a 1368     		ldr	r3, [r2]
 420 000c 0133     		adds	r3, r3, #1
 421 000e 1360     		str	r3, [r2]
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 422              		.loc 1 1028 0
 423 0010 204B     		ldr	r3, .L42+4
 424 0012 1B68     		ldr	r3, [r3]
 425 0014 5BB1     		cbz	r3, .L40
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 426              		.loc 1 1051 0
 427 0016 204B     		ldr	r3, .L42+8
 428 0018 1B68     		ldr	r3, [r3]
 429 001a 6BB9     		cbnz	r3, .L36
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 430              		.loc 1 1053 0
 431 001c 1D4B     		ldr	r3, .L42+4
 432 001e 1B68     		ldr	r3, [r3]
 433 0020 DA6A     		ldr	r2, [r3, #44]
 434 0022 E36A     		ldr	r3, [r4, #44]
 435 0024 9A42     		cmp	r2, r3
 436 0026 07D8     		bhi	.L36
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 437              		.loc 1 1055 0
 438 0028 1A4B     		ldr	r3, .L42+4
 439 002a 1C60     		str	r4, [r3]
 440 002c 04E0     		b	.L36
 441              	.L40:
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442              		.loc 1 1032 0
 443 002e 194B     		ldr	r3, .L42+4
 444 0030 1C60     		str	r4, [r3]
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 445              		.loc 1 1034 0
 446 0032 1368     		ldr	r3, [r2]
 447 0034 012B     		cmp	r3, #1
 448 0036 27D0     		beq	.L41
 449              	.L36:
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 450              		.loc 1 1068 0
 451 0038 184A     		ldr	r2, .L42+12
 452 003a 1368     		ldr	r3, [r2]
 453 003c 0133     		adds	r3, r3, #1
 454 003e 1360     		str	r3, [r2]
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 455              		.loc 1 1073 0
 456 0040 6364     		str	r3, [r4, #68]
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 457              		.loc 1 1078 0
 458 0042 E36A     		ldr	r3, [r4, #44]
 459 0044 164A     		ldr	r2, .L42+16
 460 0046 1268     		ldr	r2, [r2]
 461 0048 9342     		cmp	r3, r2
 462 004a 01D9     		bls	.L37
ARM GAS  /tmp/ccv30Qft.s 			page 79


1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 463              		.loc 1 1078 0 is_stmt 0 discriminator 1
 464 004c 144A     		ldr	r2, .L42+16
 465 004e 1360     		str	r3, [r2]
 466              	.L37:
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 467              		.loc 1 1078 0 discriminator 3
 468 0050 03EB8303 		add	r3, r3, r3, lsl #2
 469 0054 9A00     		lsls	r2, r3, #2
 470 0056 211D     		adds	r1, r4, #4
 471 0058 1248     		ldr	r0, .L42+20
 472 005a 1044     		add	r0, r0, r2
 473 005c FFF7FEFF 		bl	vListInsertEnd
 474              	.LVL45:
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475              		.loc 1 1082 0 is_stmt 1 discriminator 3
 476 0060 FFF7FEFF 		bl	vPortExitCritical
 477              	.LVL46:
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 478              		.loc 1 1084 0 discriminator 3
 479 0064 0C4B     		ldr	r3, .L42+8
 480 0066 1B68     		ldr	r3, [r3]
 481 0068 6BB1     		cbz	r3, .L34
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 482              		.loc 1 1088 0
 483 006a 0A4B     		ldr	r3, .L42+4
 484 006c 1B68     		ldr	r3, [r3]
 485 006e DA6A     		ldr	r2, [r3, #44]
 486 0070 E36A     		ldr	r3, [r4, #44]
 487 0072 9A42     		cmp	r2, r3
 488 0074 07D2     		bcs	.L34
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 489              		.loc 1 1090 0
 490 0076 0C4B     		ldr	r3, .L42+24
 491 0078 4FF08052 		mov	r2, #268435456
 492 007c 1A60     		str	r2, [r3]
 493              		.syntax unified
 494              	@ 1090 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 495 007e BFF34F8F 		dsb
 496              	@ 0 "" 2
 497              	@ 1090 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 498 0082 BFF36F8F 		isb
 499              	@ 0 "" 2
 500              		.thumb
 501              		.syntax unified
 502              	.L34:
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 503              		.loc 1 1101 0
 504 0086 10BD     		pop	{r4, pc}
 505              	.LVL47:
 506              	.L41:
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 507              		.loc 1 1039 0
 508 0088 FFF7FEFF 		bl	prvInitialiseTaskLists
 509              	.LVL48:
 510 008c D4E7     		b	.L36
 511              	.L43:
ARM GAS  /tmp/ccv30Qft.s 			page 80


 512 008e 00BF     		.align	2
 513              	.L42:
 514 0090 00000000 		.word	.LANCHOR9
 515 0094 00000000 		.word	.LANCHOR10
 516 0098 00000000 		.word	.LANCHOR11
 517 009c 00000000 		.word	.LANCHOR12
 518 00a0 00000000 		.word	.LANCHOR13
 519 00a4 00000000 		.word	.LANCHOR4
 520 00a8 04ED00E0 		.word	-536810236
 521              		.cfi_endproc
 522              	.LFE7:
 524              		.section	.text.prvDeleteTCB,"ax",%progbits
 525              		.align	1
 526              		.syntax unified
 527              		.thumb
 528              		.thumb_func
 529              		.fpu fpv4-sp-d16
 531              	prvDeleteTCB:
 532              	.LFB48:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 533              		.loc 1 3671 0
 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 0
 536              		@ frame_needed = 0, uses_anonymous_args = 0
 537              	.LVL49:
 538 0000 10B5     		push	{r4, lr}
 539              	.LCFI3:
 540              		.cfi_def_cfa_offset 8
 541              		.cfi_offset 4, -8
 542              		.cfi_offset 14, -4
 543 0002 0446     		mov	r4, r0
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 544              		.loc 1 3697 0
 545 0004 90F85930 		ldrb	r3, [r0, #89]	@ zero_extendqisi2
 546 0008 33B9     		cbnz	r3, .L45
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 547              		.loc 1 3701 0
 548 000a 006B     		ldr	r0, [r0, #48]
 549              	.LVL50:
 550 000c FFF7FEFF 		bl	vPortFree
 551              	.LVL51:
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 552              		.loc 1 3702 0
 553 0010 2046     		mov	r0, r4
 554 0012 FFF7FEFF 		bl	vPortFree
 555              	.LVL52:
 556              	.L44:
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 557              		.loc 1 3719 0
 558 0016 10BD     		pop	{r4, pc}
 559              	.LVL53:
 560              	.L45:
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 561              		.loc 1 3704 0
 562 0018 012B     		cmp	r3, #1
 563 001a 0AD0     		beq	.L50
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccv30Qft.s 			page 81


 564              		.loc 1 3714 0
 565 001c 022B     		cmp	r3, #2
 566 001e FAD0     		beq	.L44
 567              	.LBB115:
 568              	.LBB116:
 569              		.loc 2 195 0
 570              		.syntax unified
 571              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 572 0020 4FF05003 			mov r3, #80												
 573 0024 83F31188 		msr basepri, r3											
 574 0028 BFF36F8F 		isb														
 575 002c BFF34F8F 		dsb														
 576              	
 577              	@ 0 "" 2
 578              	.LVL54:
 579              		.thumb
 580              		.syntax unified
 581              	.L48:
 582 0030 FEE7     		b	.L48
 583              	.L50:
 584              	.LBE116:
 585              	.LBE115:
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 586              		.loc 1 3708 0
 587 0032 FFF7FEFF 		bl	vPortFree
 588              	.LVL55:
 589 0036 EEE7     		b	.L44
 590              		.cfi_endproc
 591              	.LFE48:
 593              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 594              		.align	1
 595              		.syntax unified
 596              		.thumb
 597              		.thumb_func
 598              		.fpu fpv4-sp-d16
 600              	prvCheckTasksWaitingTermination:
 601              	.LFB43:
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 602              		.loc 1 3463 0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 0
 605              		@ frame_needed = 0, uses_anonymous_args = 0
 606              	.LBB117:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 607              		.loc 1 3473 0
 608 0000 0F4B     		ldr	r3, .L58
 609 0002 1B68     		ldr	r3, [r3]
 610 0004 D3B1     		cbz	r3, .L57
 611              	.LBE117:
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 612              		.loc 1 3463 0
 613 0006 10B5     		push	{r4, lr}
 614              	.LCFI4:
 615              		.cfi_def_cfa_offset 8
 616              		.cfi_offset 4, -8
 617              		.cfi_offset 14, -4
 618              	.L53:
ARM GAS  /tmp/ccv30Qft.s 			page 82


 619              	.LBB118:
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 620              		.loc 1 3475 0
 621 0008 FFF7FEFF 		bl	vPortEnterCritical
 622              	.LVL56:
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 623              		.loc 1 3477 0
 624 000c 0D4B     		ldr	r3, .L58+4
 625 000e DB68     		ldr	r3, [r3, #12]
 626 0010 DC68     		ldr	r4, [r3, #12]
 627              	.LVL57:
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 628              		.loc 1 3478 0
 629 0012 201D     		adds	r0, r4, #4
 630 0014 FFF7FEFF 		bl	uxListRemove
 631              	.LVL58:
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 632              		.loc 1 3479 0
 633 0018 0B4A     		ldr	r2, .L58+8
 634 001a 1368     		ldr	r3, [r2]
 635 001c 013B     		subs	r3, r3, #1
 636 001e 1360     		str	r3, [r2]
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 637              		.loc 1 3480 0
 638 0020 074A     		ldr	r2, .L58
 639 0022 1368     		ldr	r3, [r2]
 640 0024 013B     		subs	r3, r3, #1
 641 0026 1360     		str	r3, [r2]
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 642              		.loc 1 3482 0
 643 0028 FFF7FEFF 		bl	vPortExitCritical
 644              	.LVL59:
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 645              		.loc 1 3484 0
 646 002c 2046     		mov	r0, r4
 647 002e FFF7FEFF 		bl	prvDeleteTCB
 648              	.LVL60:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 649              		.loc 1 3473 0
 650 0032 034B     		ldr	r3, .L58
 651 0034 1B68     		ldr	r3, [r3]
 652 0036 002B     		cmp	r3, #0
 653 0038 E6D1     		bne	.L53
 654              	.LBE118:
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 655              		.loc 1 3488 0
 656 003a 10BD     		pop	{r4, pc}
 657              	.LVL61:
 658              	.L57:
 659              	.LCFI5:
 660              		.cfi_def_cfa_offset 0
 661              		.cfi_restore 4
 662              		.cfi_restore 14
 663 003c 7047     		bx	lr
 664              	.L59:
 665 003e 00BF     		.align	2
 666              	.L58:
ARM GAS  /tmp/ccv30Qft.s 			page 83


 667 0040 00000000 		.word	.LANCHOR14
 668 0044 00000000 		.word	.LANCHOR7
 669 0048 00000000 		.word	.LANCHOR9
 670              		.cfi_endproc
 671              	.LFE43:
 673              		.section	.text.prvIdleTask,"ax",%progbits
 674              		.align	1
 675              		.syntax unified
 676              		.thumb
 677              		.thumb_func
 678              		.fpu fpv4-sp-d16
 680              	prvIdleTask:
 681              	.LFB41:
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 682              		.loc 1 3219 0
 683              		.cfi_startproc
 684              		@ Volatile: function does not return.
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              	.LVL62:
 688 0000 08B5     		push	{r3, lr}
 689              	.LCFI6:
 690              		.cfi_def_cfa_offset 8
 691              		.cfi_offset 3, -8
 692              		.cfi_offset 14, -4
 693              	.LVL63:
 694              	.L61:
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 695              		.loc 1 3235 0
 696 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 697              	.LVL64:
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 698              		.loc 1 3258 0
 699 0006 064B     		ldr	r3, .L64
 700 0008 1B68     		ldr	r3, [r3]
 701 000a 012B     		cmp	r3, #1
 702 000c F9D9     		bls	.L61
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 703              		.loc 1 3260 0
 704 000e 054B     		ldr	r3, .L64+4
 705 0010 4FF08052 		mov	r2, #268435456
 706 0014 1A60     		str	r2, [r3]
 707              		.syntax unified
 708              	@ 3260 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 709 0016 BFF34F8F 		dsb
 710              	@ 0 "" 2
 711              	@ 3260 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 712 001a BFF36F8F 		isb
 713              	@ 0 "" 2
 714              		.thumb
 715              		.syntax unified
 716 001e F0E7     		b	.L61
 717              	.L65:
 718              		.align	2
 719              	.L64:
 720 0020 00000000 		.word	.LANCHOR4
 721 0024 04ED00E0 		.word	-536810236
ARM GAS  /tmp/ccv30Qft.s 			page 84


 722              		.cfi_endproc
 723              	.LFE41:
 725              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 726              		.align	1
 727              		.syntax unified
 728              		.thumb
 729              		.thumb_func
 730              		.fpu fpv4-sp-d16
 732              	prvAddCurrentTaskToDelayedList:
 733              	.LFB63:
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv30Qft.s 			page 85


3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccv30Qft.s 			page 86


3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
ARM GAS  /tmp/ccv30Qft.s 			page 87


3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccv30Qft.s 			page 88


3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
ARM GAS  /tmp/ccv30Qft.s 			page 89


4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
ARM GAS  /tmp/ccv30Qft.s 			page 90


4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
ARM GAS  /tmp/ccv30Qft.s 			page 91


4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
ARM GAS  /tmp/ccv30Qft.s 			page 92


4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv30Qft.s 			page 93


4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
ARM GAS  /tmp/ccv30Qft.s 			page 94


4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv30Qft.s 			page 95


4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
ARM GAS  /tmp/ccv30Qft.s 			page 96


4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv30Qft.s 			page 97


4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccv30Qft.s 			page 98


4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv30Qft.s 			page 99


4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccv30Qft.s 			page 100


4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
ARM GAS  /tmp/ccv30Qft.s 			page 101


4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
ARM GAS  /tmp/ccv30Qft.s 			page 102


4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
ARM GAS  /tmp/ccv30Qft.s 			page 103


4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv30Qft.s 			page 104


4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 734              		.loc 1 4907 0
 735              		.cfi_startproc
 736              		@ args = 0, pretend = 0, frame = 0
 737              		@ frame_needed = 0, uses_anonymous_args = 0
 738              	.LVL65:
 739 0000 70B5     		push	{r4, r5, r6, lr}
 740              	.LCFI7:
 741              		.cfi_def_cfa_offset 16
 742              		.cfi_offset 4, -16
 743              		.cfi_offset 5, -12
 744              		.cfi_offset 6, -8
 745              		.cfi_offset 14, -4
 746 0002 0446     		mov	r4, r0
 747 0004 0E46     		mov	r6, r1
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 748              		.loc 1 4909 0
 749 0006 174B     		ldr	r3, .L73
 750 0008 1D68     		ldr	r5, [r3]
 751              	.LVL66:
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
ARM GAS  /tmp/ccv30Qft.s 			page 105


4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 752              		.loc 1 4922 0
 753 000a 174B     		ldr	r3, .L73+4
 754 000c 1868     		ldr	r0, [r3]
 755              	.LVL67:
 756 000e 0430     		adds	r0, r0, #4
 757 0010 FFF7FEFF 		bl	uxListRemove
 758              	.LVL68:
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 759              		.loc 1 4935 0
 760 0014 B4F1FF3F 		cmp	r4, #-1
 761 0018 13D0     		beq	.L71
 762              	.L67:
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 763              		.loc 1 4947 0
 764 001a 2C44     		add	r4, r4, r5
 765              	.LVL69:
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 766              		.loc 1 4950 0
 767 001c 124B     		ldr	r3, .L73+4
 768 001e 1B68     		ldr	r3, [r3]
 769 0020 5C60     		str	r4, [r3, #4]
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 770              		.loc 1 4952 0
ARM GAS  /tmp/ccv30Qft.s 			page 106


 771 0022 A542     		cmp	r5, r4
 772 0024 16D8     		bhi	.L72
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 773              		.loc 1 4962 0
 774 0026 114B     		ldr	r3, .L73+8
 775 0028 1868     		ldr	r0, [r3]
 776 002a 0F4B     		ldr	r3, .L73+4
 777 002c 1968     		ldr	r1, [r3]
 778 002e 0431     		adds	r1, r1, #4
 779 0030 FFF7FEFF 		bl	vListInsert
 780              	.LVL70:
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 781              		.loc 1 4967 0
 782 0034 0E4B     		ldr	r3, .L73+12
 783 0036 1B68     		ldr	r3, [r3]
 784 0038 A342     		cmp	r3, r4
 785 003a 12D9     		bls	.L66
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 786              		.loc 1 4969 0
 787 003c 0C4B     		ldr	r3, .L73+12
 788 003e 1C60     		str	r4, [r3]
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
ARM GAS  /tmp/ccv30Qft.s 			page 107


4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 789              		.loc 1 5015 0
 790 0040 0FE0     		b	.L66
 791              	.LVL71:
 792              	.L71:
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 793              		.loc 1 4935 0 discriminator 1
 794 0042 002E     		cmp	r6, #0
 795 0044 E9D0     		beq	.L67
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 796              		.loc 1 4940 0
 797 0046 084B     		ldr	r3, .L73+4
 798 0048 1968     		ldr	r1, [r3]
 799 004a 0431     		adds	r1, r1, #4
 800 004c 0948     		ldr	r0, .L73+16
 801 004e FFF7FEFF 		bl	vListInsertEnd
 802              	.LVL72:
 803 0052 06E0     		b	.L66
 804              	.LVL73:
 805              	.L72:
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 806              		.loc 1 4956 0
 807 0054 084B     		ldr	r3, .L73+20
 808 0056 1868     		ldr	r0, [r3]
 809 0058 034B     		ldr	r3, .L73+4
 810 005a 1968     		ldr	r1, [r3]
 811 005c 0431     		adds	r1, r1, #4
 812 005e FFF7FEFF 		bl	vListInsert
 813              	.LVL74:
 814              	.L66:
 815              		.loc 1 5015 0
 816 0062 70BD     		pop	{r4, r5, r6, pc}
 817              	.LVL75:
 818              	.L74:
ARM GAS  /tmp/ccv30Qft.s 			page 108


 819              		.align	2
 820              	.L73:
 821 0064 00000000 		.word	.LANCHOR15
 822 0068 00000000 		.word	.LANCHOR10
 823 006c 00000000 		.word	.LANCHOR2
 824 0070 00000000 		.word	.LANCHOR3
 825 0074 00000000 		.word	.LANCHOR0
 826 0078 00000000 		.word	.LANCHOR8
 827              		.cfi_endproc
 828              	.LFE63:
 830              		.section	.text.xTaskCreateStatic,"ax",%progbits
 831              		.align	1
 832              		.global	xTaskCreateStatic
 833              		.syntax unified
 834              		.thumb
 835              		.thumb_func
 836              		.fpu fpv4-sp-d16
 838              	xTaskCreateStatic:
 839              	.LFB4:
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 840              		.loc 1 582 0
 841              		.cfi_startproc
 842              		@ args = 12, pretend = 0, frame = 8
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 844              	.LVL76:
 845 0000 70B5     		push	{r4, r5, r6, lr}
 846              	.LCFI8:
 847              		.cfi_def_cfa_offset 16
 848              		.cfi_offset 4, -16
 849              		.cfi_offset 5, -12
 850              		.cfi_offset 6, -8
 851              		.cfi_offset 14, -4
 852 0002 86B0     		sub	sp, sp, #24
 853              	.LCFI9:
 854              		.cfi_def_cfa_offset 40
 855 0004 0B9D     		ldr	r5, [sp, #44]
 856 0006 0C9C     		ldr	r4, [sp, #48]
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 857              		.loc 1 586 0
 858 0008 45B9     		cbnz	r5, .L76
 859              	.LBB119:
 860              	.LBB120:
 861              		.loc 2 195 0
 862              		.syntax unified
 863              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 864 000a 4FF05003 			mov r3, #80												
 865 000e 83F31188 		msr basepri, r3											
 866 0012 BFF36F8F 		isb														
 867 0016 BFF34F8F 		dsb														
 868              	
 869              	@ 0 "" 2
 870              	.LVL77:
 871              		.thumb
 872              		.syntax unified
 873              	.L77:
 874 001a FEE7     		b	.L77
 875              	.LVL78:
ARM GAS  /tmp/ccv30Qft.s 			page 109


 876              	.L76:
 877              	.LBE120:
 878              	.LBE119:
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 879              		.loc 1 587 0
 880 001c 44B9     		cbnz	r4, .L78
 881              	.LBB121:
 882              	.LBB122:
 883              		.loc 2 195 0
 884              		.syntax unified
 885              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 886 001e 4FF05003 			mov r3, #80												
 887 0022 83F31188 		msr basepri, r3											
 888 0026 BFF36F8F 		isb														
 889 002a BFF34F8F 		dsb														
 890              	
 891              	@ 0 "" 2
 892              	.LVL79:
 893              		.thumb
 894              		.syntax unified
 895              	.L79:
 896 002e FEE7     		b	.L79
 897              	.LVL80:
 898              	.L78:
 899              	.LBE122:
 900              	.LBE121:
 901              	.LBB123:
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 902              		.loc 1 594 0
 903 0030 5C26     		movs	r6, #92
 904 0032 0496     		str	r6, [sp, #16]
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 905              		.loc 1 595 0
 906 0034 049E     		ldr	r6, [sp, #16]
 907 0036 5C2E     		cmp	r6, #92
 908 0038 08D0     		beq	.L80
 909              	.LBB124:
 910              	.LBB125:
 911              		.loc 2 195 0
 912              		.syntax unified
 913              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 914 003a 4FF05003 			mov r3, #80												
 915 003e 83F31188 		msr basepri, r3											
 916 0042 BFF36F8F 		isb														
 917 0046 BFF34F8F 		dsb														
 918              	
 919              	@ 0 "" 2
 920              	.LVL81:
 921              		.thumb
 922              		.syntax unified
 923              	.L81:
 924 004a FEE7     		b	.L81
 925              	.LVL82:
 926              	.L80:
 927              	.LBE125:
 928              	.LBE124:
 929              	.LBE123:
ARM GAS  /tmp/ccv30Qft.s 			page 110


 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930              		.loc 1 605 0
 931 004c 2563     		str	r5, [r4, #48]
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 932              		.loc 1 611 0
 933 004e 0225     		movs	r5, #2
 934 0050 84F85950 		strb	r5, [r4, #89]
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 935              		.loc 1 615 0
 936 0054 0025     		movs	r5, #0
 937 0056 0395     		str	r5, [sp, #12]
 938 0058 0294     		str	r4, [sp, #8]
 939 005a 05AD     		add	r5, sp, #20
 940 005c 0195     		str	r5, [sp, #4]
 941 005e 0A9D     		ldr	r5, [sp, #40]
 942 0060 0095     		str	r5, [sp]
 943 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 944              	.LVL83:
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 945              		.loc 1 616 0
 946 0066 2046     		mov	r0, r4
 947 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 948              	.LVL84:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 949              		.loc 1 624 0
 950 006c 0598     		ldr	r0, [sp, #20]
 951 006e 06B0     		add	sp, sp, #24
 952              	.LCFI10:
 953              		.cfi_def_cfa_offset 16
 954              		@ sp needed
 955 0070 70BD     		pop	{r4, r5, r6, pc}
 956              		.cfi_endproc
 957              	.LFE4:
 959              		.section	.text.xTaskCreate,"ax",%progbits
 960              		.align	1
 961              		.global	xTaskCreate
 962              		.syntax unified
 963              		.thumb
 964              		.thumb_func
 965              		.fpu fpv4-sp-d16
 967              	xTaskCreate:
 968              	.LFB5:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 969              		.loc 1 732 0
 970              		.cfi_startproc
 971              		@ args = 8, pretend = 0, frame = 0
 972              		@ frame_needed = 0, uses_anonymous_args = 0
 973              	.LVL85:
 974 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 975              	.LCFI11:
 976              		.cfi_def_cfa_offset 28
 977              		.cfi_offset 4, -28
 978              		.cfi_offset 5, -24
 979              		.cfi_offset 6, -20
 980              		.cfi_offset 7, -16
 981              		.cfi_offset 8, -12
 982              		.cfi_offset 9, -8
ARM GAS  /tmp/ccv30Qft.s 			page 111


 983              		.cfi_offset 14, -4
 984 0004 85B0     		sub	sp, sp, #20
 985              	.LCFI12:
 986              		.cfi_def_cfa_offset 48
 987 0006 0746     		mov	r7, r0
 988 0008 8846     		mov	r8, r1
 989 000a 1546     		mov	r5, r2
 990 000c 9946     		mov	r9, r3
 991              	.LBB126:
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 992              		.loc 1 766 0
 993 000e 9000     		lsls	r0, r2, #2
 994              	.LVL86:
 995 0010 FFF7FEFF 		bl	pvPortMalloc
 996              	.LVL87:
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 997              		.loc 1 768 0
 998 0014 08B3     		cbz	r0, .L87
 999 0016 0646     		mov	r6, r0
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1000              		.loc 1 771 0
 1001 0018 5C20     		movs	r0, #92
 1002              	.LVL88:
 1003 001a FFF7FEFF 		bl	pvPortMalloc
 1004              	.LVL89:
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1005              		.loc 1 773 0
 1006 001e 0446     		mov	r4, r0
 1007 0020 B8B1     		cbz	r0, .L85
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1008              		.loc 1 776 0
 1009 0022 0663     		str	r6, [r0, #48]
 1010              	.LVL90:
 1011              	.L86:
 1012              	.LBE126:
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1013              		.loc 1 792 0
 1014 0024 E4B1     		cbz	r4, .L88
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1015              		.loc 1 798 0
 1016 0026 0023     		movs	r3, #0
 1017 0028 84F85930 		strb	r3, [r4, #89]
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1018              		.loc 1 802 0
 1019 002c 0393     		str	r3, [sp, #12]
 1020 002e 0294     		str	r4, [sp, #8]
 1021 0030 0D9B     		ldr	r3, [sp, #52]
 1022 0032 0193     		str	r3, [sp, #4]
 1023 0034 0C9B     		ldr	r3, [sp, #48]
 1024 0036 0093     		str	r3, [sp]
 1025 0038 4B46     		mov	r3, r9
 1026 003a 2A46     		mov	r2, r5
 1027 003c 4146     		mov	r1, r8
 1028 003e 3846     		mov	r0, r7
 1029 0040 FFF7FEFF 		bl	prvInitialiseNewTask
 1030              	.LVL91:
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
ARM GAS  /tmp/ccv30Qft.s 			page 112


 1031              		.loc 1 803 0
 1032 0044 2046     		mov	r0, r4
 1033 0046 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1034              	.LVL92:
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1035              		.loc 1 804 0
 1036 004a 0120     		movs	r0, #1
 1037              	.LVL93:
 1038              	.L83:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1039              		.loc 1 812 0
 1040 004c 05B0     		add	sp, sp, #20
 1041              	.LCFI13:
 1042              		.cfi_remember_state
 1043              		.cfi_def_cfa_offset 28
 1044              		@ sp needed
 1045 004e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1046              	.LVL94:
 1047              	.L85:
 1048              	.LCFI14:
 1049              		.cfi_restore_state
 1050              	.LBB127:
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1051              		.loc 1 782 0
 1052 0052 3046     		mov	r0, r6
 1053              	.LVL95:
 1054 0054 FFF7FEFF 		bl	vPortFree
 1055              	.LVL96:
 1056 0058 E4E7     		b	.L86
 1057              	.LVL97:
 1058              	.L87:
 1059              	.LBE127:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1060              		.loc 1 808 0
 1061 005a 4FF0FF30 		mov	r0, #-1
 1062              	.LVL98:
 1063 005e F5E7     		b	.L83
 1064              	.LVL99:
 1065              	.L88:
 1066 0060 4FF0FF30 		mov	r0, #-1
 1067              	.LVL100:
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1068              		.loc 1 811 0
 1069 0064 F2E7     		b	.L83
 1070              		.cfi_endproc
 1071              	.LFE5:
 1073              		.section	.text.vTaskDelete,"ax",%progbits
 1074              		.align	1
 1075              		.global	vTaskDelete
 1076              		.syntax unified
 1077              		.thumb
 1078              		.thumb_func
 1079              		.fpu fpv4-sp-d16
 1081              	vTaskDelete:
 1082              	.LFB8:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1083              		.loc 1 1107 0
ARM GAS  /tmp/ccv30Qft.s 			page 113


 1084              		.cfi_startproc
 1085              		@ args = 0, pretend = 0, frame = 0
 1086              		@ frame_needed = 0, uses_anonymous_args = 0
 1087              	.LVL101:
 1088 0000 38B5     		push	{r3, r4, r5, lr}
 1089              	.LCFI15:
 1090              		.cfi_def_cfa_offset 16
 1091              		.cfi_offset 3, -16
 1092              		.cfi_offset 4, -12
 1093              		.cfi_offset 5, -8
 1094              		.cfi_offset 14, -4
 1095 0002 0446     		mov	r4, r0
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1096              		.loc 1 1110 0
 1097 0004 FFF7FEFF 		bl	vPortEnterCritical
 1098              	.LVL102:
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1099              		.loc 1 1114 0
 1100 0008 24B3     		cbz	r4, .L99
 1101              	.LVL103:
 1102              	.L91:
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1103              		.loc 1 1117 0 discriminator 4
 1104 000a 251D     		adds	r5, r4, #4
 1105 000c 2846     		mov	r0, r5
 1106 000e FFF7FEFF 		bl	uxListRemove
 1107              	.LVL104:
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1108              		.loc 1 1127 0 discriminator 4
 1109 0012 A36A     		ldr	r3, [r4, #40]
 1110 0014 1BB1     		cbz	r3, .L92
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1111              		.loc 1 1129 0
 1112 0016 04F11800 		add	r0, r4, #24
 1113 001a FFF7FEFF 		bl	uxListRemove
 1114              	.LVL105:
 1115              	.L92:
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1116              		.loc 1 1140 0
 1117 001e 1E4A     		ldr	r2, .L102
 1118 0020 1368     		ldr	r3, [r2]
 1119 0022 0133     		adds	r3, r3, #1
 1120 0024 1360     		str	r3, [r2]
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1121              		.loc 1 1142 0
 1122 0026 1D4B     		ldr	r3, .L102+4
 1123 0028 1B68     		ldr	r3, [r3]
 1124 002a A342     		cmp	r3, r4
 1125 002c 15D0     		beq	.L100
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 1126              		.loc 1 1165 0
 1127 002e 1C4A     		ldr	r2, .L102+8
 1128 0030 1368     		ldr	r3, [r2]
 1129 0032 013B     		subs	r3, r3, #1
 1130 0034 1360     		str	r3, [r2]
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1131              		.loc 1 1166 0
ARM GAS  /tmp/ccv30Qft.s 			page 114


 1132 0036 2046     		mov	r0, r4
 1133 0038 FFF7FEFF 		bl	prvDeleteTCB
 1134              	.LVL106:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1135              		.loc 1 1170 0
 1136 003c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1137              	.LVL107:
 1138              	.L94:
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1139              		.loc 1 1175 0
 1140 0040 FFF7FEFF 		bl	vPortExitCritical
 1141              	.LVL108:
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1142              		.loc 1 1179 0
 1143 0044 174B     		ldr	r3, .L102+12
 1144 0046 1B68     		ldr	r3, [r3]
 1145 0048 1BB1     		cbz	r3, .L90
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1146              		.loc 1 1181 0
 1147 004a 144B     		ldr	r3, .L102+4
 1148 004c 1B68     		ldr	r3, [r3]
 1149 004e A342     		cmp	r3, r4
 1150 0050 0CD0     		beq	.L101
 1151              	.L90:
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1152              		.loc 1 1191 0
 1153 0052 38BD     		pop	{r3, r4, r5, pc}
 1154              	.LVL109:
 1155              	.L99:
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1156              		.loc 1 1114 0 discriminator 1
 1157 0054 114B     		ldr	r3, .L102+4
 1158 0056 1C68     		ldr	r4, [r3]
 1159              	.LVL110:
 1160 0058 D7E7     		b	.L91
 1161              	.LVL111:
 1162              	.L100:
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1163              		.loc 1 1149 0
 1164 005a 2946     		mov	r1, r5
 1165 005c 1248     		ldr	r0, .L102+16
 1166 005e FFF7FEFF 		bl	vListInsertEnd
 1167              	.LVL112:
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1168              		.loc 1 1154 0
 1169 0062 124A     		ldr	r2, .L102+20
 1170 0064 1368     		ldr	r3, [r2]
 1171 0066 0133     		adds	r3, r3, #1
 1172 0068 1360     		str	r3, [r2]
 1173 006a E9E7     		b	.L94
 1174              	.L101:
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1175              		.loc 1 1183 0
 1176 006c 104B     		ldr	r3, .L102+24
 1177 006e 1B68     		ldr	r3, [r3]
 1178 0070 43B1     		cbz	r3, .L96
 1179              	.LBB128:
ARM GAS  /tmp/ccv30Qft.s 			page 115


 1180              	.LBB129:
 1181              		.loc 2 195 0
 1182              		.syntax unified
 1183              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1184 0072 4FF05003 			mov r3, #80												
 1185 0076 83F31188 		msr basepri, r3											
 1186 007a BFF36F8F 		isb														
 1187 007e BFF34F8F 		dsb														
 1188              	
 1189              	@ 0 "" 2
 1190              	.LVL113:
 1191              		.thumb
 1192              		.syntax unified
 1193              	.L97:
 1194 0082 FEE7     		b	.L97
 1195              	.L96:
 1196              	.LBE129:
 1197              	.LBE128:
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1198              		.loc 1 1184 0
 1199 0084 0B4B     		ldr	r3, .L102+28
 1200 0086 4FF08052 		mov	r2, #268435456
 1201 008a 1A60     		str	r2, [r3]
 1202              		.syntax unified
 1203              	@ 1184 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1204 008c BFF34F8F 		dsb
 1205              	@ 0 "" 2
 1206              	@ 1184 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1207 0090 BFF36F8F 		isb
 1208              	@ 0 "" 2
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1209              		.loc 1 1191 0
 1210              		.thumb
 1211              		.syntax unified
 1212 0094 DDE7     		b	.L90
 1213              	.L103:
 1214 0096 00BF     		.align	2
 1215              	.L102:
 1216 0098 00000000 		.word	.LANCHOR12
 1217 009c 00000000 		.word	.LANCHOR10
 1218 00a0 00000000 		.word	.LANCHOR9
 1219 00a4 00000000 		.word	.LANCHOR11
 1220 00a8 00000000 		.word	.LANCHOR7
 1221 00ac 00000000 		.word	.LANCHOR14
 1222 00b0 00000000 		.word	.LANCHOR16
 1223 00b4 04ED00E0 		.word	-536810236
 1224              		.cfi_endproc
 1225              	.LFE8:
 1227              		.section	.text.eTaskGetState,"ax",%progbits
 1228              		.align	1
 1229              		.global	eTaskGetState
 1230              		.syntax unified
 1231              		.thumb
 1232              		.thumb_func
 1233              		.fpu fpv4-sp-d16
 1235              	eTaskGetState:
 1236              	.LFB11:
ARM GAS  /tmp/ccv30Qft.s 			page 116


1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1237              		.loc 1 1328 0
 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 0
 1240              		@ frame_needed = 0, uses_anonymous_args = 0
 1241              	.LVL114:
 1242 0000 38B5     		push	{r3, r4, r5, lr}
 1243              	.LCFI16:
 1244              		.cfi_def_cfa_offset 16
 1245              		.cfi_offset 3, -16
 1246              		.cfi_offset 4, -12
 1247              		.cfi_offset 5, -8
 1248              		.cfi_offset 14, -4
 1249              	.LVL115:
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1250              		.loc 1 1333 0
 1251 0002 D0B1     		cbz	r0, .L116
 1252 0004 0546     		mov	r5, r0
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1253              		.loc 1 1335 0
 1254 0006 194B     		ldr	r3, .L119
 1255 0008 1B68     		ldr	r3, [r3]
 1256 000a 8342     		cmp	r3, r0
 1257 000c 24D0     		beq	.L109
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1258              		.loc 1 1342 0
 1259 000e FFF7FEFF 		bl	vPortEnterCritical
 1260              	.LVL116:
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1261              		.loc 1 1344 0
 1262 0012 6C69     		ldr	r4, [r5, #20]
 1263              	.LVL117:
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1264              		.loc 1 1346 0
 1265 0014 FFF7FEFF 		bl	vPortExitCritical
 1266              	.LVL118:
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1267              		.loc 1 1348 0
 1268 0018 154B     		ldr	r3, .L119+4
 1269 001a 1B68     		ldr	r3, [r3]
 1270 001c A342     		cmp	r3, r4
 1271 001e 1DD0     		beq	.L110
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1272              		.loc 1 1348 0 is_stmt 0 discriminator 1
 1273 0020 144B     		ldr	r3, .L119+8
 1274 0022 1B68     		ldr	r3, [r3]
 1275 0024 A342     		cmp	r3, r4
 1276 0026 1BD0     		beq	.L111
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1277              		.loc 1 1356 0 is_stmt 1
 1278 0028 134B     		ldr	r3, .L119+12
 1279 002a 9C42     		cmp	r4, r3
 1280 002c 0ED0     		beq	.L117
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1281              		.loc 1 1373 0
 1282 002e 134B     		ldr	r3, .L119+16
 1283 0030 9C42     		cmp	r4, r3
ARM GAS  /tmp/ccv30Qft.s 			page 117


 1284 0032 19D0     		beq	.L113
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1285              		.loc 1 1373 0 is_stmt 0 discriminator 1
 1286 0034 74B1     		cbz	r4, .L118
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1287              		.loc 1 1386 0 is_stmt 1
 1288 0036 0120     		movs	r0, #1
 1289 0038 0FE0     		b	.L107
 1290              	.LVL119:
 1291              	.L116:
 1292              	.LBB130:
 1293              	.LBB131:
 1294              		.loc 2 195 0
 1295              		.syntax unified
 1296              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1297 003a 4FF05003 			mov r3, #80												
 1298 003e 83F31188 		msr basepri, r3											
 1299 0042 BFF36F8F 		isb														
 1300 0046 BFF34F8F 		dsb														
 1301              	
 1302              	@ 0 "" 2
 1303              	.LVL120:
 1304              		.thumb
 1305              		.syntax unified
 1306              	.L106:
 1307 004a FEE7     		b	.L106
 1308              	.LVL121:
 1309              	.L117:
 1310              	.LBE131:
 1311              	.LBE130:
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1312              		.loc 1 1361 0
 1313 004c AB6A     		ldr	r3, [r5, #40]
 1314 004e 4BB9     		cbnz	r3, .L112
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1315              		.loc 1 1363 0
 1316 0050 0320     		movs	r0, #3
 1317 0052 02E0     		b	.L107
 1318              	.L118:
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1319              		.loc 1 1378 0
 1320 0054 0420     		movs	r0, #4
 1321 0056 00E0     		b	.L107
 1322              	.LVL122:
 1323              	.L109:
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1324              		.loc 1 1338 0
 1325 0058 0020     		movs	r0, #0
 1326              	.LVL123:
 1327              	.L107:
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1328              		.loc 1 1391 0
 1329 005a 38BD     		pop	{r3, r4, r5, pc}
 1330              	.LVL124:
 1331              	.L110:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1332              		.loc 1 1352 0
ARM GAS  /tmp/ccv30Qft.s 			page 118


 1333 005c 0220     		movs	r0, #2
 1334 005e FCE7     		b	.L107
 1335              	.L111:
 1336 0060 0220     		movs	r0, #2
 1337 0062 FAE7     		b	.L107
 1338              	.L112:
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1339              		.loc 1 1367 0
 1340 0064 0220     		movs	r0, #2
 1341 0066 F8E7     		b	.L107
 1342              	.L113:
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1343              		.loc 1 1378 0
 1344 0068 0420     		movs	r0, #4
 1345 006a F6E7     		b	.L107
 1346              	.L120:
 1347              		.align	2
 1348              	.L119:
 1349 006c 00000000 		.word	.LANCHOR10
 1350 0070 00000000 		.word	.LANCHOR2
 1351 0074 00000000 		.word	.LANCHOR8
 1352 0078 00000000 		.word	.LANCHOR0
 1353 007c 00000000 		.word	.LANCHOR7
 1354              		.cfi_endproc
 1355              	.LFE11:
 1357              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1358              		.align	1
 1359              		.global	uxTaskPriorityGet
 1360              		.syntax unified
 1361              		.thumb
 1362              		.thumb_func
 1363              		.fpu fpv4-sp-d16
 1365              	uxTaskPriorityGet:
 1366              	.LFB12:
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1367              		.loc 1 1399 0
 1368              		.cfi_startproc
 1369              		@ args = 0, pretend = 0, frame = 0
 1370              		@ frame_needed = 0, uses_anonymous_args = 0
 1371              	.LVL125:
 1372 0000 10B5     		push	{r4, lr}
 1373              	.LCFI17:
 1374              		.cfi_def_cfa_offset 8
 1375              		.cfi_offset 4, -8
 1376              		.cfi_offset 14, -4
 1377 0002 0446     		mov	r4, r0
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1378              		.loc 1 1403 0
 1379 0004 FFF7FEFF 		bl	vPortEnterCritical
 1380              	.LVL126:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1381              		.loc 1 1407 0
 1382 0008 24B1     		cbz	r4, .L124
 1383              	.LVL127:
 1384              	.L122:
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1385              		.loc 1 1408 0 discriminator 4
ARM GAS  /tmp/ccv30Qft.s 			page 119


 1386 000a E46A     		ldr	r4, [r4, #44]
 1387              	.LVL128:
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1388              		.loc 1 1410 0 discriminator 4
 1389 000c FFF7FEFF 		bl	vPortExitCritical
 1390              	.LVL129:
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1391              		.loc 1 1413 0 discriminator 4
 1392 0010 2046     		mov	r0, r4
 1393 0012 10BD     		pop	{r4, pc}
 1394              	.LVL130:
 1395              	.L124:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1396              		.loc 1 1407 0 discriminator 1
 1397 0014 014B     		ldr	r3, .L125
 1398 0016 1C68     		ldr	r4, [r3]
 1399              	.LVL131:
 1400 0018 F7E7     		b	.L122
 1401              	.L126:
 1402 001a 00BF     		.align	2
 1403              	.L125:
 1404 001c 00000000 		.word	.LANCHOR10
 1405              		.cfi_endproc
 1406              	.LFE12:
 1408              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1409              		.align	1
 1410              		.global	uxTaskPriorityGetFromISR
 1411              		.syntax unified
 1412              		.thumb
 1413              		.thumb_func
 1414              		.fpu fpv4-sp-d16
 1416              	uxTaskPriorityGetFromISR:
 1417              	.LFB13:
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1418              		.loc 1 1421 0
 1419              		.cfi_startproc
 1420              		@ args = 0, pretend = 0, frame = 0
 1421              		@ frame_needed = 0, uses_anonymous_args = 0
 1422              	.LVL132:
 1423 0000 10B5     		push	{r4, lr}
 1424              	.LCFI18:
 1425              		.cfi_def_cfa_offset 8
 1426              		.cfi_offset 4, -8
 1427              		.cfi_offset 14, -4
 1428 0002 0446     		mov	r4, r0
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1429              		.loc 1 1441 0
 1430 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1431              	.LVL133:
 1432              	.LBB132:
 1433              	.LBB133:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
ARM GAS  /tmp/ccv30Qft.s 			page 120


 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1434              		.loc 2 211 0
 1435              		.syntax unified
 1436              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1437 0008 EFF31183 			mrs r3, basepri											
 1438 000c 4FF05002 		mov r2, #80												
 1439 0010 82F31188 		msr basepri, r2											
 1440 0014 BFF36F8F 		isb														
 1441 0018 BFF34F8F 		dsb														
 1442              	
 1443              	@ 0 "" 2
 1444              		.thumb
 1445              		.syntax unified
 1446              	.LBE133:
 1447              	.LBE132:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1448              		.loc 1 1447 0
 1449 001c 1CB1     		cbz	r4, .L130
 1450              	.LVL134:
 1451              	.L128:
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1452              		.loc 1 1448 0 discriminator 4
 1453 001e E06A     		ldr	r0, [r4, #44]
 1454              	.LVL135:
 1455              	.LBB134:
 1456              	.LBB135:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1457              		.loc 2 229 0 discriminator 4
 1458              		.syntax unified
 1459              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1460 0020 83F31188 			msr basepri, r3	
ARM GAS  /tmp/ccv30Qft.s 			page 121


 1461              	@ 0 "" 2
 1462              	.LVL136:
 1463              		.thumb
 1464              		.syntax unified
 1465              	.LBE135:
 1466              	.LBE134:
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1467              		.loc 1 1453 0 discriminator 4
 1468 0024 10BD     		pop	{r4, pc}
 1469              	.LVL137:
 1470              	.L130:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1471              		.loc 1 1447 0 discriminator 1
 1472 0026 014A     		ldr	r2, .L131
 1473 0028 1468     		ldr	r4, [r2]
 1474              	.LVL138:
 1475 002a F8E7     		b	.L128
 1476              	.L132:
 1477              		.align	2
 1478              	.L131:
 1479 002c 00000000 		.word	.LANCHOR10
 1480              		.cfi_endproc
 1481              	.LFE13:
 1483              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1484              		.align	1
 1485              		.global	vTaskPrioritySet
 1486              		.syntax unified
 1487              		.thumb
 1488              		.thumb_func
 1489              		.fpu fpv4-sp-d16
 1491              	vTaskPrioritySet:
 1492              	.LFB14:
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1493              		.loc 1 1461 0
 1494              		.cfi_startproc
 1495              		@ args = 0, pretend = 0, frame = 0
 1496              		@ frame_needed = 0, uses_anonymous_args = 0
 1497              	.LVL139:
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1498              		.loc 1 1466 0
 1499 0000 3729     		cmp	r1, #55
 1500 0002 08D9     		bls	.L134
 1501              	.LBB136:
 1502              	.LBB137:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1503              		.loc 2 195 0
 1504              		.syntax unified
 1505              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1506 0004 4FF05003 			mov r3, #80												
 1507 0008 83F31188 		msr basepri, r3											
 1508 000c BFF36F8F 		isb														
 1509 0010 BFF34F8F 		dsb														
 1510              	
 1511              	@ 0 "" 2
 1512              	.LVL140:
 1513              		.thumb
 1514              		.syntax unified
ARM GAS  /tmp/ccv30Qft.s 			page 122


 1515              	.L135:
 1516 0014 FEE7     		b	.L135
 1517              	.L134:
 1518              	.LBE137:
 1519              	.LBE136:
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1520              		.loc 1 1461 0
 1521 0016 70B5     		push	{r4, r5, r6, lr}
 1522              	.LCFI19:
 1523              		.cfi_def_cfa_offset 16
 1524              		.cfi_offset 4, -16
 1525              		.cfi_offset 5, -12
 1526              		.cfi_offset 6, -8
 1527              		.cfi_offset 14, -4
 1528 0018 0446     		mov	r4, r0
 1529 001a 0D46     		mov	r5, r1
 1530              	.LVL141:
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1531              		.loc 1 1478 0
 1532 001c FFF7FEFF 		bl	vPortEnterCritical
 1533              	.LVL142:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1534              		.loc 1 1482 0
 1535 0020 0CB9     		cbnz	r4, .L136
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1536              		.loc 1 1482 0 is_stmt 0 discriminator 1
 1537 0022 264B     		ldr	r3, .L149
 1538 0024 1C68     		ldr	r4, [r3]
 1539              	.LVL143:
 1540              	.L136:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1541              		.loc 1 1488 0 is_stmt 1 discriminator 4
 1542 0026 E26C     		ldr	r2, [r4, #76]
 1543              	.LVL144:
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1544              		.loc 1 1496 0 discriminator 4
 1545 0028 9542     		cmp	r5, r2
 1546 002a 37D0     		beq	.L137
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1547              		.loc 1 1500 0
 1548 002c 39D9     		bls	.L138
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1549              		.loc 1 1502 0
 1550 002e 234B     		ldr	r3, .L149
 1551 0030 1B68     		ldr	r3, [r3]
 1552 0032 A342     		cmp	r3, r4
 1553 0034 3BD0     		beq	.L144
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1554              		.loc 1 1507 0
 1555 0036 214B     		ldr	r3, .L149
 1556 0038 1B68     		ldr	r3, [r3]
 1557 003a DB6A     		ldr	r3, [r3, #44]
 1558 003c AB42     		cmp	r3, r5
 1559 003e 38D9     		bls	.L145
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1560              		.loc 1 1464 0
 1561 0040 0026     		movs	r6, #0
ARM GAS  /tmp/ccv30Qft.s 			page 123


 1562              	.L139:
 1563              	.LVL145:
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1564              		.loc 1 1540 0
 1565 0042 E36A     		ldr	r3, [r4, #44]
 1566              	.LVL146:
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1567              		.loc 1 1546 0
 1568 0044 9A42     		cmp	r2, r3
 1569 0046 00D1     		bne	.L140
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1570              		.loc 1 1548 0
 1571 0048 E562     		str	r5, [r4, #44]
 1572              	.L140:
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1573              		.loc 1 1556 0
 1574 004a E564     		str	r5, [r4, #76]
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1575              		.loc 1 1566 0
 1576 004c A269     		ldr	r2, [r4, #24]
 1577              	.LVL147:
 1578 004e 002A     		cmp	r2, #0
 1579 0050 02DB     		blt	.L141
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1580              		.loc 1 1568 0
 1581 0052 C5F13805 		rsb	r5, r5, #56
 1582              	.LVL148:
 1583 0056 A561     		str	r5, [r4, #24]
 1584              	.L141:
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1585              		.loc 1 1579 0
 1586 0058 6269     		ldr	r2, [r4, #20]
 1587 005a 1949     		ldr	r1, .L149+4
 1588 005c 1420     		movs	r0, #20
 1589 005e 00FB0313 		mla	r3, r0, r3, r1
 1590              	.LVL149:
 1591 0062 9A42     		cmp	r2, r3
 1592 0064 11D1     		bne	.L142
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1593              		.loc 1 1584 0
 1594 0066 251D     		adds	r5, r4, #4
 1595 0068 2846     		mov	r0, r5
 1596 006a FFF7FEFF 		bl	uxListRemove
 1597              	.LVL150:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1598              		.loc 1 1595 0
 1599 006e E36A     		ldr	r3, [r4, #44]
 1600 0070 144A     		ldr	r2, .L149+8
 1601 0072 1268     		ldr	r2, [r2]
 1602 0074 9342     		cmp	r3, r2
 1603 0076 01D9     		bls	.L143
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1604              		.loc 1 1595 0 is_stmt 0 discriminator 1
 1605 0078 124A     		ldr	r2, .L149+8
 1606 007a 1360     		str	r3, [r2]
 1607              	.L143:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccv30Qft.s 			page 124


 1608              		.loc 1 1595 0 discriminator 3
 1609 007c 2946     		mov	r1, r5
 1610 007e 104A     		ldr	r2, .L149+4
 1611 0080 1420     		movs	r0, #20
 1612 0082 00FB0320 		mla	r0, r0, r3, r2
 1613 0086 FFF7FEFF 		bl	vListInsertEnd
 1614              	.LVL151:
 1615              	.L142:
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1616              		.loc 1 1602 0 is_stmt 1
 1617 008a 3EB1     		cbz	r6, .L137
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1618              		.loc 1 1604 0
 1619 008c 0E4B     		ldr	r3, .L149+12
 1620 008e 4FF08052 		mov	r2, #268435456
 1621 0092 1A60     		str	r2, [r3]
 1622              		.syntax unified
 1623              	@ 1604 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1624 0094 BFF34F8F 		dsb
 1625              	@ 0 "" 2
 1626              	@ 1604 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1627 0098 BFF36F8F 		isb
 1628              	@ 0 "" 2
 1629              	.LVL152:
 1630              		.thumb
 1631              		.syntax unified
 1632              	.L137:
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1633              		.loc 1 1616 0
 1634 009c FFF7FEFF 		bl	vPortExitCritical
 1635              	.LVL153:
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1636              		.loc 1 1617 0
 1637 00a0 70BD     		pop	{r4, r5, r6, pc}
 1638              	.LVL154:
 1639              	.L138:
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1640              		.loc 1 1523 0
 1641 00a2 064B     		ldr	r3, .L149
 1642 00a4 1B68     		ldr	r3, [r3]
 1643 00a6 A342     		cmp	r3, r4
 1644 00a8 05D0     		beq	.L146
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1645              		.loc 1 1464 0
 1646 00aa 0026     		movs	r6, #0
 1647 00ac C9E7     		b	.L139
 1648              	.L144:
 1649 00ae 0026     		movs	r6, #0
 1650 00b0 C7E7     		b	.L139
 1651              	.L145:
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1652              		.loc 1 1509 0
 1653 00b2 0126     		movs	r6, #1
 1654 00b4 C5E7     		b	.L139
 1655              	.L146:
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1656              		.loc 1 1528 0
ARM GAS  /tmp/ccv30Qft.s 			page 125


 1657 00b6 0126     		movs	r6, #1
 1658 00b8 C3E7     		b	.L139
 1659              	.L150:
 1660 00ba 00BF     		.align	2
 1661              	.L149:
 1662 00bc 00000000 		.word	.LANCHOR10
 1663 00c0 00000000 		.word	.LANCHOR4
 1664 00c4 00000000 		.word	.LANCHOR13
 1665 00c8 04ED00E0 		.word	-536810236
 1666              		.cfi_endproc
 1667              	.LFE14:
 1669              		.section	.text.vTaskResume,"ax",%progbits
 1670              		.align	1
 1671              		.global	vTaskResume
 1672              		.syntax unified
 1673              		.thumb
 1674              		.thumb_func
 1675              		.fpu fpv4-sp-d16
 1677              	vTaskResume:
 1678              	.LFB17:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1679              		.loc 1 1772 0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 0
 1682              		@ frame_needed = 0, uses_anonymous_args = 0
 1683              	.LVL155:
 1684 0000 38B5     		push	{r3, r4, r5, lr}
 1685              	.LCFI20:
 1686              		.cfi_def_cfa_offset 16
 1687              		.cfi_offset 3, -16
 1688              		.cfi_offset 4, -12
 1689              		.cfi_offset 5, -8
 1690              		.cfi_offset 14, -4
 1691              	.LVL156:
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1692              		.loc 1 1776 0
 1693 0002 68B1     		cbz	r0, .L158
 1694 0004 0446     		mov	r4, r0
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1695              		.loc 1 1780 0 discriminator 1
 1696 0006 1B4B     		ldr	r3, .L160
 1697 0008 1B68     		ldr	r3, [r3]
 1698 000a 8342     		cmp	r3, r0
 1699 000c 07D0     		beq	.L151
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1700              		.loc 1 1782 0
 1701 000e FFF7FEFF 		bl	vPortEnterCritical
 1702              	.LVL157:
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1703              		.loc 1 1784 0
 1704 0012 2046     		mov	r0, r4
 1705 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1706              	.LVL158:
 1707 0018 58B9     		cbnz	r0, .L159
 1708              	.L155:
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1709              		.loc 1 1811 0
ARM GAS  /tmp/ccv30Qft.s 			page 126


 1710 001a FFF7FEFF 		bl	vPortExitCritical
 1711              	.LVL159:
 1712              	.L151:
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1713              		.loc 1 1817 0
 1714 001e 38BD     		pop	{r3, r4, r5, pc}
 1715              	.LVL160:
 1716              	.L158:
 1717              	.LBB138:
 1718              	.LBB139:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1719              		.loc 2 195 0
 1720              		.syntax unified
 1721              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1722 0020 4FF05003 			mov r3, #80												
 1723 0024 83F31188 		msr basepri, r3											
 1724 0028 BFF36F8F 		isb														
 1725 002c BFF34F8F 		dsb														
 1726              	
 1727              	@ 0 "" 2
 1728              	.LVL161:
 1729              		.thumb
 1730              		.syntax unified
 1731              	.L153:
 1732 0030 FEE7     		b	.L153
 1733              	.LVL162:
 1734              	.L159:
 1735              	.LBE139:
 1736              	.LBE138:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1737              		.loc 1 1790 0
 1738 0032 251D     		adds	r5, r4, #4
 1739 0034 2846     		mov	r0, r5
 1740 0036 FFF7FEFF 		bl	uxListRemove
 1741              	.LVL163:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1742              		.loc 1 1791 0
 1743 003a E36A     		ldr	r3, [r4, #44]
 1744 003c 0E4A     		ldr	r2, .L160+4
 1745 003e 1268     		ldr	r2, [r2]
 1746 0040 9342     		cmp	r3, r2
 1747 0042 01D9     		bls	.L156
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1748              		.loc 1 1791 0 is_stmt 0 discriminator 1
 1749 0044 0C4A     		ldr	r2, .L160+4
 1750 0046 1360     		str	r3, [r2]
 1751              	.L156:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1752              		.loc 1 1791 0 discriminator 3
 1753 0048 2946     		mov	r1, r5
 1754 004a 0C4A     		ldr	r2, .L160+8
 1755 004c 1420     		movs	r0, #20
 1756 004e 00FB0320 		mla	r0, r0, r3, r2
 1757 0052 FFF7FEFF 		bl	vListInsertEnd
 1758              	.LVL164:
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1759              		.loc 1 1794 0 is_stmt 1 discriminator 3
ARM GAS  /tmp/ccv30Qft.s 			page 127


 1760 0056 E26A     		ldr	r2, [r4, #44]
 1761 0058 064B     		ldr	r3, .L160
 1762 005a 1B68     		ldr	r3, [r3]
 1763 005c DB6A     		ldr	r3, [r3, #44]
 1764 005e 9A42     		cmp	r2, r3
 1765 0060 DBD3     		bcc	.L155
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1766              		.loc 1 1799 0
 1767 0062 074B     		ldr	r3, .L160+12
 1768 0064 4FF08052 		mov	r2, #268435456
 1769 0068 1A60     		str	r2, [r3]
 1770              		.syntax unified
 1771              	@ 1799 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1772 006a BFF34F8F 		dsb
 1773              	@ 0 "" 2
 1774              	@ 1799 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1775 006e BFF36F8F 		isb
 1776              	@ 0 "" 2
 1777              		.thumb
 1778              		.syntax unified
 1779 0072 D2E7     		b	.L155
 1780              	.L161:
 1781              		.align	2
 1782              	.L160:
 1783 0074 00000000 		.word	.LANCHOR10
 1784 0078 00000000 		.word	.LANCHOR13
 1785 007c 00000000 		.word	.LANCHOR4
 1786 0080 04ED00E0 		.word	-536810236
 1787              		.cfi_endproc
 1788              	.LFE17:
 1790              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1791              		.align	1
 1792              		.global	xTaskResumeFromISR
 1793              		.syntax unified
 1794              		.thumb
 1795              		.thumb_func
 1796              		.fpu fpv4-sp-d16
 1798              	xTaskResumeFromISR:
 1799              	.LFB18:
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1800              		.loc 1 1826 0
 1801              		.cfi_startproc
 1802              		@ args = 0, pretend = 0, frame = 0
 1803              		@ frame_needed = 0, uses_anonymous_args = 0
 1804              	.LVL165:
 1805 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1806              	.LCFI21:
 1807              		.cfi_def_cfa_offset 24
 1808              		.cfi_offset 3, -24
 1809              		.cfi_offset 4, -20
 1810              		.cfi_offset 5, -16
 1811              		.cfi_offset 6, -12
 1812              		.cfi_offset 7, -8
 1813              		.cfi_offset 14, -4
 1814              	.LVL166:
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1815              		.loc 1 1831 0
ARM GAS  /tmp/ccv30Qft.s 			page 128


 1816 0002 40B9     		cbnz	r0, .L163
 1817              	.LBB140:
 1818              	.LBB141:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1819              		.loc 2 195 0
 1820              		.syntax unified
 1821              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1822 0004 4FF05003 			mov r3, #80												
 1823 0008 83F31188 		msr basepri, r3											
 1824 000c BFF36F8F 		isb														
 1825 0010 BFF34F8F 		dsb														
 1826              	
 1827              	@ 0 "" 2
 1828              	.LVL167:
 1829              		.thumb
 1830              		.syntax unified
 1831              	.L164:
 1832 0014 FEE7     		b	.L164
 1833              	.L163:
 1834 0016 0446     		mov	r4, r0
 1835              	.LBE141:
 1836              	.LBE140:
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1837              		.loc 1 1849 0
 1838 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1839              	.LVL168:
 1840              	.LBB142:
 1841              	.LBB143:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1842              		.loc 2 211 0
 1843              		.syntax unified
 1844              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1845 001c EFF31187 			mrs r7, basepri											
 1846 0020 4FF05003 		mov r3, #80												
 1847 0024 83F31188 		msr basepri, r3											
 1848 0028 BFF36F8F 		isb														
 1849 002c BFF34F8F 		dsb														
 1850              	
 1851              	@ 0 "" 2
 1852              		.thumb
 1853              		.syntax unified
 1854              	.LBE143:
 1855              	.LBE142:
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1856              		.loc 1 1853 0
 1857 0030 2046     		mov	r0, r4
 1858 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1859              	.LVL169:
 1860 0036 40B3     		cbz	r0, .L169
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1861              		.loc 1 1858 0
 1862 0038 154B     		ldr	r3, .L172
 1863 003a 1B68     		ldr	r3, [r3]
 1864 003c F3B9     		cbnz	r3, .L166
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1865              		.loc 1 1862 0
 1866 003e E26A     		ldr	r2, [r4, #44]
ARM GAS  /tmp/ccv30Qft.s 			page 129


 1867 0040 144B     		ldr	r3, .L172+4
 1868 0042 1B68     		ldr	r3, [r3]
 1869 0044 DB6A     		ldr	r3, [r3, #44]
 1870 0046 9A42     		cmp	r2, r3
 1871 0048 16D2     		bcs	.L170
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1872              		.loc 1 1827 0
 1873 004a 0025     		movs	r5, #0
 1874              	.L167:
 1875              	.LVL170:
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1876              		.loc 1 1871 0
 1877 004c 261D     		adds	r6, r4, #4
 1878 004e 3046     		mov	r0, r6
 1879 0050 FFF7FEFF 		bl	uxListRemove
 1880              	.LVL171:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1881              		.loc 1 1872 0
 1882 0054 E36A     		ldr	r3, [r4, #44]
 1883 0056 104A     		ldr	r2, .L172+8
 1884 0058 1268     		ldr	r2, [r2]
 1885 005a 9342     		cmp	r3, r2
 1886 005c 01D9     		bls	.L168
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1887              		.loc 1 1872 0 is_stmt 0 discriminator 1
 1888 005e 0E4A     		ldr	r2, .L172+8
 1889 0060 1360     		str	r3, [r2]
 1890              	.L168:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1891              		.loc 1 1872 0 discriminator 3
 1892 0062 3146     		mov	r1, r6
 1893 0064 0D4A     		ldr	r2, .L172+12
 1894 0066 1420     		movs	r0, #20
 1895 0068 00FB0320 		mla	r0, r0, r3, r2
 1896 006c FFF7FEFF 		bl	vListInsertEnd
 1897              	.LVL172:
 1898              	.L165:
 1899              	.LBB144:
 1900              	.LBB145:
 1901              		.loc 2 229 0 is_stmt 1
 1902              		.syntax unified
 1903              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1904 0070 87F31188 			msr basepri, r7	
 1905              	@ 0 "" 2
 1906              	.LVL173:
 1907              		.thumb
 1908              		.syntax unified
 1909              	.LBE145:
 1910              	.LBE144:
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1911              		.loc 1 1890 0
 1912 0074 2846     		mov	r0, r5
 1913 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1914              	.LVL174:
 1915              	.L170:
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1916              		.loc 1 1864 0
ARM GAS  /tmp/ccv30Qft.s 			page 130


 1917 0078 0125     		movs	r5, #1
 1918 007a E7E7     		b	.L167
 1919              	.L166:
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1920              		.loc 1 1879 0
 1921 007c 04F11801 		add	r1, r4, #24
 1922 0080 0748     		ldr	r0, .L172+16
 1923 0082 FFF7FEFF 		bl	vListInsertEnd
 1924              	.LVL175:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1925              		.loc 1 1827 0
 1926 0086 0025     		movs	r5, #0
 1927 0088 F2E7     		b	.L165
 1928              	.L169:
 1929 008a 0025     		movs	r5, #0
 1930 008c F0E7     		b	.L165
 1931              	.L173:
 1932 008e 00BF     		.align	2
 1933              	.L172:
 1934 0090 00000000 		.word	.LANCHOR16
 1935 0094 00000000 		.word	.LANCHOR10
 1936 0098 00000000 		.word	.LANCHOR13
 1937 009c 00000000 		.word	.LANCHOR4
 1938 00a0 00000000 		.word	.LANCHOR1
 1939              		.cfi_endproc
 1940              	.LFE18:
 1942              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1943              		.align	1
 1944              		.global	vTaskStartScheduler
 1945              		.syntax unified
 1946              		.thumb
 1947              		.thumb_func
 1948              		.fpu fpv4-sp-d16
 1950              	vTaskStartScheduler:
 1951              	.LFB19:
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1952              		.loc 1 1896 0
 1953              		.cfi_startproc
 1954              		@ args = 0, pretend = 0, frame = 16
 1955              		@ frame_needed = 0, uses_anonymous_args = 0
 1956 0000 10B5     		push	{r4, lr}
 1957              	.LCFI22:
 1958              		.cfi_def_cfa_offset 8
 1959              		.cfi_offset 4, -8
 1960              		.cfi_offset 14, -4
 1961 0002 88B0     		sub	sp, sp, #32
 1962              	.LCFI23:
 1963              		.cfi_def_cfa_offset 40
 1964              	.LBB146:
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1965              		.loc 1 1902 0
 1966 0004 0024     		movs	r4, #0
 1967 0006 0594     		str	r4, [sp, #20]
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1968              		.loc 1 1903 0
 1969 0008 0694     		str	r4, [sp, #24]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
ARM GAS  /tmp/ccv30Qft.s 			page 131


 1970              		.loc 1 1908 0
 1971 000a 07AA     		add	r2, sp, #28
 1972 000c 06A9     		add	r1, sp, #24
 1973 000e 05A8     		add	r0, sp, #20
 1974 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 1975              	.LVL176:
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 1976              		.loc 1 1909 0
 1977 0014 059B     		ldr	r3, [sp, #20]
 1978 0016 0293     		str	r3, [sp, #8]
 1979 0018 069B     		ldr	r3, [sp, #24]
 1980 001a 0193     		str	r3, [sp, #4]
 1981 001c 0094     		str	r4, [sp]
 1982 001e 2346     		mov	r3, r4
 1983 0020 079A     		ldr	r2, [sp, #28]
 1984 0022 1749     		ldr	r1, .L183
 1985 0024 1748     		ldr	r0, .L183+4
 1986 0026 FFF7FEFF 		bl	xTaskCreateStatic
 1987              	.LVL177:
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1988              		.loc 1 1917 0
 1989 002a 40B1     		cbz	r0, .L175
 1990              	.LVL178:
 1991              	.LBE146:
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1992              		.loc 1 1942 0
 1993 002c FFF7FEFF 		bl	xTimerCreateTimerTask
 1994              	.LVL179:
 1995              	.L176:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1996              		.loc 1 1951 0
 1997 0030 0128     		cmp	r0, #1
 1998 0032 06D0     		beq	.L181
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1999              		.loc 1 2006 0
 2000 0034 B0F1FF3F 		cmp	r0, #-1
 2001 0038 18D0     		beq	.L182
 2002              	.LVL180:
 2003              	.L174:
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2004              		.loc 1 2012 0
 2005 003a 08B0     		add	sp, sp, #32
 2006              	.LCFI24:
 2007              		.cfi_remember_state
 2008              		.cfi_def_cfa_offset 8
 2009              		@ sp needed
 2010 003c 10BD     		pop	{r4, pc}
 2011              	.L175:
 2012              	.LCFI25:
 2013              		.cfi_restore_state
 2014              	.LVL181:
 2015              	.LBB147:
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2016              		.loc 1 1923 0
 2017 003e 0020     		movs	r0, #0
 2018 0040 F6E7     		b	.L176
 2019              	.LVL182:
ARM GAS  /tmp/ccv30Qft.s 			page 132


 2020              	.L181:
 2021              	.LBE147:
 2022              	.LBB148:
 2023              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2024              		.loc 2 195 0
 2025              		.syntax unified
 2026              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2027 0042 4FF05003 			mov r3, #80												
 2028 0046 83F31188 		msr basepri, r3											
 2029 004a BFF36F8F 		isb														
 2030 004e BFF34F8F 		dsb														
 2031              	
 2032              	@ 0 "" 2
 2033              		.thumb
 2034              		.syntax unified
 2035              	.LBE149:
 2036              	.LBE148:
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2037              		.loc 1 1977 0
 2038 0052 0D4B     		ldr	r3, .L183+8
 2039 0054 4FF0FF32 		mov	r2, #-1
 2040 0058 1A60     		str	r2, [r3]
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2041              		.loc 1 1978 0
 2042 005a 0C4B     		ldr	r3, .L183+12
 2043 005c 0122     		movs	r2, #1
 2044 005e 1A60     		str	r2, [r3]
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2045              		.loc 1 1979 0
 2046 0060 0B4B     		ldr	r3, .L183+16
 2047 0062 0022     		movs	r2, #0
 2048 0064 1A60     		str	r2, [r3]
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2049              		.loc 1 1991 0
 2050 0066 FFF7FEFF 		bl	xPortStartScheduler
 2051              	.LVL183:
 2052 006a E6E7     		b	.L174
 2053              	.LVL184:
 2054              	.L182:
 2055              	.LBB150:
 2056              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2057              		.loc 2 195 0
 2058              		.syntax unified
 2059              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2060 006c 4FF05003 			mov r3, #80												
 2061 0070 83F31188 		msr basepri, r3											
 2062 0074 BFF36F8F 		isb														
 2063 0078 BFF34F8F 		dsb														
 2064              	
 2065              	@ 0 "" 2
 2066              	.LVL185:
 2067              		.thumb
 2068              		.syntax unified
 2069              	.L179:
 2070 007c FEE7     		b	.L179
ARM GAS  /tmp/ccv30Qft.s 			page 133


 2071              	.L184:
 2072 007e 00BF     		.align	2
 2073              	.L183:
 2074 0080 00000000 		.word	.LC0
 2075 0084 00000000 		.word	prvIdleTask
 2076 0088 00000000 		.word	.LANCHOR3
 2077 008c 00000000 		.word	.LANCHOR11
 2078 0090 00000000 		.word	.LANCHOR15
 2079              	.LBE151:
 2080              	.LBE150:
 2081              		.cfi_endproc
 2082              	.LFE19:
 2084              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2085              		.align	1
 2086              		.global	vTaskEndScheduler
 2087              		.syntax unified
 2088              		.thumb
 2089              		.thumb_func
 2090              		.fpu fpv4-sp-d16
 2092              	vTaskEndScheduler:
 2093              	.LFB20:
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2094              		.loc 1 2016 0
 2095              		.cfi_startproc
 2096              		@ args = 0, pretend = 0, frame = 0
 2097              		@ frame_needed = 0, uses_anonymous_args = 0
 2098 0000 08B5     		push	{r3, lr}
 2099              	.LCFI26:
 2100              		.cfi_def_cfa_offset 8
 2101              		.cfi_offset 3, -8
 2102              		.cfi_offset 14, -4
 2103              	.LBB152:
 2104              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2105              		.loc 2 195 0
 2106              		.syntax unified
 2107              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2108 0002 4FF05003 			mov r3, #80												
 2109 0006 83F31188 		msr basepri, r3											
 2110 000a BFF36F8F 		isb														
 2111 000e BFF34F8F 		dsb														
 2112              	
 2113              	@ 0 "" 2
 2114              		.thumb
 2115              		.syntax unified
 2116              	.LBE153:
 2117              	.LBE152:
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2118              		.loc 1 2021 0
 2119 0012 034B     		ldr	r3, .L187
 2120 0014 0022     		movs	r2, #0
 2121 0016 1A60     		str	r2, [r3]
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2122              		.loc 1 2022 0
 2123 0018 FFF7FEFF 		bl	vPortEndScheduler
 2124              	.LVL186:
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  /tmp/ccv30Qft.s 			page 134


 2125              		.loc 1 2023 0
 2126 001c 08BD     		pop	{r3, pc}
 2127              	.L188:
 2128 001e 00BF     		.align	2
 2129              	.L187:
 2130 0020 00000000 		.word	.LANCHOR11
 2131              		.cfi_endproc
 2132              	.LFE20:
 2134              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2135              		.align	1
 2136              		.global	vTaskSuspendAll
 2137              		.syntax unified
 2138              		.thumb
 2139              		.thumb_func
 2140              		.fpu fpv4-sp-d16
 2142              	vTaskSuspendAll:
 2143              	.LFB21:
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 2144              		.loc 1 2027 0
 2145              		.cfi_startproc
 2146              		@ args = 0, pretend = 0, frame = 0
 2147              		@ frame_needed = 0, uses_anonymous_args = 0
 2148              		@ link register save eliminated.
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2149              		.loc 1 2032 0
 2150 0000 024A     		ldr	r2, .L190
 2151 0002 1368     		ldr	r3, [r2]
 2152 0004 0133     		adds	r3, r3, #1
 2153 0006 1360     		str	r3, [r2]
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2154              		.loc 1 2033 0
 2155 0008 7047     		bx	lr
 2156              	.L191:
 2157 000a 00BF     		.align	2
 2158              	.L190:
 2159 000c 00000000 		.word	.LANCHOR16
 2160              		.cfi_endproc
 2161              	.LFE21:
 2163              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2164              		.align	1
 2165              		.global	xTaskGetTickCount
 2166              		.syntax unified
 2167              		.thumb
 2168              		.thumb_func
 2169              		.fpu fpv4-sp-d16
 2171              	xTaskGetTickCount:
 2172              	.LFB23:
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2173              		.loc 1 2210 0
 2174              		.cfi_startproc
 2175              		@ args = 0, pretend = 0, frame = 0
 2176              		@ frame_needed = 0, uses_anonymous_args = 0
 2177              		@ link register save eliminated.
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2178              		.loc 1 2216 0
 2179 0000 014B     		ldr	r3, .L193
 2180 0002 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccv30Qft.s 			page 135


 2181              	.LVL187:
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2182              		.loc 1 2221 0
 2183 0004 7047     		bx	lr
 2184              	.L194:
 2185 0006 00BF     		.align	2
 2186              	.L193:
 2187 0008 00000000 		.word	.LANCHOR15
 2188              		.cfi_endproc
 2189              	.LFE23:
 2191              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2192              		.align	1
 2193              		.global	xTaskGetTickCountFromISR
 2194              		.syntax unified
 2195              		.thumb
 2196              		.thumb_func
 2197              		.fpu fpv4-sp-d16
 2199              	xTaskGetTickCountFromISR:
 2200              	.LFB24:
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2201              		.loc 1 2225 0
 2202              		.cfi_startproc
 2203              		@ args = 0, pretend = 0, frame = 0
 2204              		@ frame_needed = 0, uses_anonymous_args = 0
 2205 0000 08B5     		push	{r3, lr}
 2206              	.LCFI27:
 2207              		.cfi_def_cfa_offset 8
 2208              		.cfi_offset 3, -8
 2209              		.cfi_offset 14, -4
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2210              		.loc 1 2243 0
 2211 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2212              	.LVL188:
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2213              		.loc 1 2247 0
 2214 0006 014B     		ldr	r3, .L197
 2215 0008 1868     		ldr	r0, [r3]
 2216              	.LVL189:
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2217              		.loc 1 2252 0
 2218 000a 08BD     		pop	{r3, pc}
 2219              	.L198:
 2220              		.align	2
 2221              	.L197:
 2222 000c 00000000 		.word	.LANCHOR15
 2223              		.cfi_endproc
 2224              	.LFE24:
 2226              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2227              		.align	1
 2228              		.global	uxTaskGetNumberOfTasks
 2229              		.syntax unified
 2230              		.thumb
 2231              		.thumb_func
 2232              		.fpu fpv4-sp-d16
 2234              	uxTaskGetNumberOfTasks:
 2235              	.LFB25:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
ARM GAS  /tmp/ccv30Qft.s 			page 136


 2236              		.loc 1 2256 0
 2237              		.cfi_startproc
 2238              		@ args = 0, pretend = 0, frame = 0
 2239              		@ frame_needed = 0, uses_anonymous_args = 0
 2240              		@ link register save eliminated.
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2241              		.loc 1 2259 0
 2242 0000 014B     		ldr	r3, .L200
 2243 0002 1868     		ldr	r0, [r3]
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2244              		.loc 1 2260 0
 2245 0004 7047     		bx	lr
 2246              	.L201:
 2247 0006 00BF     		.align	2
 2248              	.L200:
 2249 0008 00000000 		.word	.LANCHOR9
 2250              		.cfi_endproc
 2251              	.LFE25:
 2253              		.section	.text.pcTaskGetName,"ax",%progbits
 2254              		.align	1
 2255              		.global	pcTaskGetName
 2256              		.syntax unified
 2257              		.thumb
 2258              		.thumb_func
 2259              		.fpu fpv4-sp-d16
 2261              	pcTaskGetName:
 2262              	.LFB26:
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2263              		.loc 1 2264 0
 2264              		.cfi_startproc
 2265              		@ args = 0, pretend = 0, frame = 0
 2266              		@ frame_needed = 0, uses_anonymous_args = 0
 2267              		@ link register save eliminated.
 2268              	.LVL190:
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2269              		.loc 1 2269 0
 2270 0000 0346     		mov	r3, r0
 2271 0002 18B1     		cbz	r0, .L206
 2272              	.LVL191:
 2273              	.L203:
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2274              		.loc 1 2270 0 discriminator 4
 2275 0004 2BB1     		cbz	r3, .L207
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2276              		.loc 1 2272 0
 2277 0006 03F13400 		add	r0, r3, #52
 2278 000a 7047     		bx	lr
 2279              	.LVL192:
 2280              	.L206:
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2281              		.loc 1 2269 0 discriminator 1
 2282 000c 054B     		ldr	r3, .L208
 2283 000e 1B68     		ldr	r3, [r3]
 2284              	.LVL193:
 2285 0010 F8E7     		b	.L203
 2286              	.LVL194:
 2287              	.L207:
ARM GAS  /tmp/ccv30Qft.s 			page 137


 2288              	.LBB154:
 2289              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2290              		.loc 2 195 0
 2291              		.syntax unified
 2292              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2293 0012 4FF05003 			mov r3, #80												
 2294 0016 83F31188 		msr basepri, r3											
 2295 001a BFF36F8F 		isb														
 2296 001e BFF34F8F 		dsb														
 2297              	
 2298              	@ 0 "" 2
 2299              	.LVL195:
 2300              		.thumb
 2301              		.syntax unified
 2302              	.L205:
 2303 0022 FEE7     		b	.L205
 2304              	.L209:
 2305              		.align	2
 2306              	.L208:
 2307 0024 00000000 		.word	.LANCHOR10
 2308              	.LBE155:
 2309              	.LBE154:
 2310              		.cfi_endproc
 2311              	.LFE26:
 2313              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2314              		.align	1
 2315              		.global	xTaskIncrementTick
 2316              		.syntax unified
 2317              		.thumb
 2318              		.thumb_func
 2319              		.fpu fpv4-sp-d16
 2321              	xTaskIncrementTick:
 2322              	.LFB28:
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2323              		.loc 1 2584 0
 2324              		.cfi_startproc
 2325              		@ args = 0, pretend = 0, frame = 0
 2326              		@ frame_needed = 0, uses_anonymous_args = 0
 2327 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2328              	.LCFI28:
 2329              		.cfi_def_cfa_offset 24
 2330              		.cfi_offset 3, -24
 2331              		.cfi_offset 4, -20
 2332              		.cfi_offset 5, -16
 2333              		.cfi_offset 6, -12
 2334              		.cfi_offset 7, -8
 2335              		.cfi_offset 14, -4
 2336              	.LVL196:
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2337              		.loc 1 2593 0
 2338 0002 3A4B     		ldr	r3, .L232
 2339 0004 1B68     		ldr	r3, [r3]
 2340 0006 002B     		cmp	r3, #0
 2341 0008 64D1     		bne	.L211
 2342              	.LBB156:
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv30Qft.s 			page 138


 2343              		.loc 1 2597 0
 2344 000a 394B     		ldr	r3, .L232+4
 2345 000c 1D68     		ldr	r5, [r3]
 2346 000e 0135     		adds	r5, r5, #1
 2347              	.LVL197:
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2348              		.loc 1 2601 0
 2349 0010 1D60     		str	r5, [r3]
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2350              		.loc 1 2603 0
 2351 0012 C5B9     		cbnz	r5, .L212
 2352              	.LBB157:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2353              		.loc 1 2605 0
 2354 0014 374B     		ldr	r3, .L232+8
 2355 0016 1B68     		ldr	r3, [r3]
 2356 0018 1B68     		ldr	r3, [r3]
 2357 001a 43B1     		cbz	r3, .L213
 2358              	.LBB158:
 2359              	.LBB159:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2360              		.loc 2 195 0
 2361              		.syntax unified
 2362              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2363 001c 4FF05003 			mov r3, #80												
 2364 0020 83F31188 		msr basepri, r3											
 2365 0024 BFF36F8F 		isb														
 2366 0028 BFF34F8F 		dsb														
 2367              	
 2368              	@ 0 "" 2
 2369              	.LVL198:
 2370              		.thumb
 2371              		.syntax unified
 2372              	.L214:
 2373 002c FEE7     		b	.L214
 2374              	.L213:
 2375              	.LBE159:
 2376              	.LBE158:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2377              		.loc 1 2605 0 discriminator 2
 2378 002e 314A     		ldr	r2, .L232+8
 2379 0030 1168     		ldr	r1, [r2]
 2380              	.LVL199:
 2381 0032 314B     		ldr	r3, .L232+12
 2382 0034 1868     		ldr	r0, [r3]
 2383 0036 1060     		str	r0, [r2]
 2384 0038 1960     		str	r1, [r3]
 2385 003a 304A     		ldr	r2, .L232+16
 2386 003c 1368     		ldr	r3, [r2]
 2387 003e 0133     		adds	r3, r3, #1
 2388 0040 1360     		str	r3, [r2]
 2389 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2390              	.LVL200:
 2391              	.L212:
 2392              	.LBE157:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2393              		.loc 1 2616 0
ARM GAS  /tmp/ccv30Qft.s 			page 139


 2394 0046 2E4B     		ldr	r3, .L232+20
 2395 0048 1B68     		ldr	r3, [r3]
 2396 004a AB42     		cmp	r3, r5
 2397 004c 38D9     		bls	.L225
 2398              	.LBE156:
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2399              		.loc 1 2587 0
 2400 004e 0024     		movs	r4, #0
 2401              	.LVL201:
 2402              	.L216:
 2403              	.LBB160:
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2404              		.loc 1 2699 0
 2405 0050 2C4B     		ldr	r3, .L232+24
 2406 0052 1B68     		ldr	r3, [r3]
 2407 0054 DB6A     		ldr	r3, [r3, #44]
 2408 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2409 005a 9A00     		lsls	r2, r3, #2
 2410 005c 2A4B     		ldr	r3, .L232+28
 2411 005e 9B58     		ldr	r3, [r3, r2]
 2412 0060 012B     		cmp	r3, #1
 2413 0062 3CD9     		bls	.L223
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2414              		.loc 1 2701 0
 2415 0064 0124     		movs	r4, #1
 2416              	.LVL202:
 2417 0066 3AE0     		b	.L223
 2418              	.LVL203:
 2419              	.L226:
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2420              		.loc 1 2682 0
 2421 0068 0124     		movs	r4, #1
 2422              	.LVL204:
 2423              	.L215:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2424              		.loc 1 2620 0
 2425 006a 224B     		ldr	r3, .L232+8
 2426 006c 1B68     		ldr	r3, [r3]
 2427 006e 1B68     		ldr	r3, [r3]
 2428 0070 43B3     		cbz	r3, .L230
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2429              		.loc 1 2636 0
 2430 0072 204B     		ldr	r3, .L232+8
 2431 0074 1B68     		ldr	r3, [r3]
 2432 0076 DB68     		ldr	r3, [r3, #12]
 2433 0078 DE68     		ldr	r6, [r3, #12]
 2434              	.LVL205:
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2435              		.loc 1 2637 0
 2436 007a 7368     		ldr	r3, [r6, #4]
 2437              	.LVL206:
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2438              		.loc 1 2639 0
 2439 007c 9D42     		cmp	r5, r3
 2440 007e 26D3     		bcc	.L231
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2441              		.loc 1 2655 0
ARM GAS  /tmp/ccv30Qft.s 			page 140


 2442 0080 371D     		adds	r7, r6, #4
 2443 0082 3846     		mov	r0, r7
 2444 0084 FFF7FEFF 		bl	uxListRemove
 2445              	.LVL207:
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2446              		.loc 1 2659 0
 2447 0088 B36A     		ldr	r3, [r6, #40]
 2448 008a 1BB1     		cbz	r3, .L219
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2449              		.loc 1 2661 0
 2450 008c 06F11800 		add	r0, r6, #24
 2451 0090 FFF7FEFF 		bl	uxListRemove
 2452              	.LVL208:
 2453              	.L219:
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2454              		.loc 1 2670 0
 2455 0094 F36A     		ldr	r3, [r6, #44]
 2456 0096 1D4A     		ldr	r2, .L232+32
 2457 0098 1268     		ldr	r2, [r2]
 2458 009a 9342     		cmp	r3, r2
 2459 009c 01D9     		bls	.L220
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2460              		.loc 1 2670 0 is_stmt 0 discriminator 1
 2461 009e 1B4A     		ldr	r2, .L232+32
 2462 00a0 1360     		str	r3, [r2]
 2463              	.L220:
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2464              		.loc 1 2670 0 discriminator 3
 2465 00a2 03EB8303 		add	r3, r3, r3, lsl #2
 2466 00a6 9A00     		lsls	r2, r3, #2
 2467 00a8 3946     		mov	r1, r7
 2468 00aa 1748     		ldr	r0, .L232+28
 2469 00ac 1044     		add	r0, r0, r2
 2470 00ae FFF7FEFF 		bl	vListInsertEnd
 2471              	.LVL209:
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2472              		.loc 1 2680 0 is_stmt 1 discriminator 3
 2473 00b2 F26A     		ldr	r2, [r6, #44]
 2474 00b4 134B     		ldr	r3, .L232+24
 2475 00b6 1B68     		ldr	r3, [r3]
 2476 00b8 DB6A     		ldr	r3, [r3, #44]
 2477 00ba 9A42     		cmp	r2, r3
 2478 00bc D4D2     		bcs	.L226
 2479 00be D4E7     		b	.L215
 2480              	.LVL210:
 2481              	.L225:
 2482              	.LBE160:
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2483              		.loc 1 2587 0
 2484 00c0 0024     		movs	r4, #0
 2485 00c2 D2E7     		b	.L215
 2486              	.LVL211:
 2487              	.L230:
 2488              	.LBB161:
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2489              		.loc 1 2627 0
 2490 00c4 0E4B     		ldr	r3, .L232+20
ARM GAS  /tmp/ccv30Qft.s 			page 141


 2491 00c6 4FF0FF32 		mov	r2, #-1
 2492 00ca 1A60     		str	r2, [r3]
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2493              		.loc 1 2628 0
 2494 00cc C0E7     		b	.L216
 2495              	.LVL212:
 2496              	.L231:
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 2497              		.loc 1 2646 0
 2498 00ce 0C4A     		ldr	r2, .L232+20
 2499 00d0 1360     		str	r3, [r2]
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2500              		.loc 1 2647 0
 2501 00d2 BDE7     		b	.L216
 2502              	.LVL213:
 2503              	.L211:
 2504              	.LBE161:
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2505              		.loc 1 2727 0
 2506 00d4 0E4A     		ldr	r2, .L232+36
 2507 00d6 1368     		ldr	r3, [r2]
 2508 00d8 0133     		adds	r3, r3, #1
 2509 00da 1360     		str	r3, [r2]
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2510              		.loc 1 2587 0
 2511 00dc 0024     		movs	r4, #0
 2512              	.LVL214:
 2513              	.L223:
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2514              		.loc 1 2740 0
 2515 00de 0D4B     		ldr	r3, .L232+40
 2516 00e0 1B68     		ldr	r3, [r3]
 2517 00e2 03B1     		cbz	r3, .L210
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2518              		.loc 1 2742 0
 2519 00e4 0124     		movs	r4, #1
 2520              	.LVL215:
 2521              	.L210:
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2522              		.loc 1 2752 0
 2523 00e6 2046     		mov	r0, r4
 2524 00e8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2525              	.L233:
 2526 00ea 00BF     		.align	2
 2527              	.L232:
 2528 00ec 00000000 		.word	.LANCHOR16
 2529 00f0 00000000 		.word	.LANCHOR15
 2530 00f4 00000000 		.word	.LANCHOR2
 2531 00f8 00000000 		.word	.LANCHOR8
 2532 00fc 00000000 		.word	.LANCHOR17
 2533 0100 00000000 		.word	.LANCHOR3
 2534 0104 00000000 		.word	.LANCHOR10
 2535 0108 00000000 		.word	.LANCHOR4
 2536 010c 00000000 		.word	.LANCHOR13
 2537 0110 00000000 		.word	.LANCHOR18
 2538 0114 00000000 		.word	.LANCHOR19
 2539              		.cfi_endproc
ARM GAS  /tmp/ccv30Qft.s 			page 142


 2540              	.LFE28:
 2542              		.section	.text.xTaskResumeAll,"ax",%progbits
 2543              		.align	1
 2544              		.global	xTaskResumeAll
 2545              		.syntax unified
 2546              		.thumb
 2547              		.thumb_func
 2548              		.fpu fpv4-sp-d16
 2550              	xTaskResumeAll:
 2551              	.LFB22:
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2552              		.loc 1 2100 0
 2553              		.cfi_startproc
 2554              		@ args = 0, pretend = 0, frame = 0
 2555              		@ frame_needed = 0, uses_anonymous_args = 0
 2556 0000 38B5     		push	{r3, r4, r5, lr}
 2557              	.LCFI29:
 2558              		.cfi_def_cfa_offset 16
 2559              		.cfi_offset 3, -16
 2560              		.cfi_offset 4, -12
 2561              		.cfi_offset 5, -8
 2562              		.cfi_offset 14, -4
 2563              	.LVL216:
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2564              		.loc 1 2106 0
 2565 0002 334B     		ldr	r3, .L251
 2566 0004 1B68     		ldr	r3, [r3]
 2567 0006 43B9     		cbnz	r3, .L235
 2568              	.LBB162:
 2569              	.LBB163:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2570              		.loc 2 195 0
 2571              		.syntax unified
 2572              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2573 0008 4FF05003 			mov r3, #80												
 2574 000c 83F31188 		msr basepri, r3											
 2575 0010 BFF36F8F 		isb														
 2576 0014 BFF34F8F 		dsb														
 2577              	
 2578              	@ 0 "" 2
 2579              	.LVL217:
 2580              		.thumb
 2581              		.syntax unified
 2582              	.L236:
 2583 0018 FEE7     		b	.L236
 2584              	.L235:
 2585              	.LBE163:
 2586              	.LBE162:
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2587              		.loc 1 2113 0
 2588 001a FFF7FEFF 		bl	vPortEnterCritical
 2589              	.LVL218:
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2590              		.loc 1 2115 0
 2591 001e 2C4B     		ldr	r3, .L251
 2592 0020 1A68     		ldr	r2, [r3]
 2593 0022 013A     		subs	r2, r2, #1
ARM GAS  /tmp/ccv30Qft.s 			page 143


 2594 0024 1A60     		str	r2, [r3]
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2595              		.loc 1 2117 0
 2596 0026 1B68     		ldr	r3, [r3]
 2597 0028 002B     		cmp	r3, #0
 2598 002a 4DD1     		bne	.L246
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2599              		.loc 1 2119 0
 2600 002c 294B     		ldr	r3, .L251+4
 2601 002e 1B68     		ldr	r3, [r3]
 2602 0030 23B9     		cbnz	r3, .L247
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2603              		.loc 1 2102 0
 2604 0032 0024     		movs	r4, #0
 2605              	.LVL219:
 2606              	.L237:
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2607              		.loc 1 2203 0
 2608 0034 FFF7FEFF 		bl	vPortExitCritical
 2609              	.LVL220:
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2610              		.loc 1 2206 0
 2611 0038 2046     		mov	r0, r4
 2612 003a 38BD     		pop	{r3, r4, r5, pc}
 2613              	.LVL221:
 2614              	.L247:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2615              		.loc 1 2101 0
 2616 003c 0024     		movs	r4, #0
 2617              	.LVL222:
 2618              	.L238:
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2619              		.loc 1 2123 0
 2620 003e 264B     		ldr	r3, .L251+8
 2621 0040 1B68     		ldr	r3, [r3]
 2622 0042 1BB3     		cbz	r3, .L250
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2623              		.loc 1 2125 0
 2624 0044 244B     		ldr	r3, .L251+8
 2625 0046 DB68     		ldr	r3, [r3, #12]
 2626 0048 DC68     		ldr	r4, [r3, #12]
 2627              	.LVL223:
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2628              		.loc 1 2126 0
 2629 004a 04F11800 		add	r0, r4, #24
 2630 004e FFF7FEFF 		bl	uxListRemove
 2631              	.LVL224:
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2632              		.loc 1 2127 0
 2633 0052 251D     		adds	r5, r4, #4
 2634 0054 2846     		mov	r0, r5
 2635 0056 FFF7FEFF 		bl	uxListRemove
 2636              	.LVL225:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2637              		.loc 1 2128 0
 2638 005a E36A     		ldr	r3, [r4, #44]
 2639 005c 1F4A     		ldr	r2, .L251+12
ARM GAS  /tmp/ccv30Qft.s 			page 144


 2640 005e 1268     		ldr	r2, [r2]
 2641 0060 9342     		cmp	r3, r2
 2642 0062 01D9     		bls	.L239
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2643              		.loc 1 2128 0 is_stmt 0 discriminator 1
 2644 0064 1D4A     		ldr	r2, .L251+12
 2645 0066 1360     		str	r3, [r2]
 2646              	.L239:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2647              		.loc 1 2128 0 discriminator 3
 2648 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2649 006c 9A00     		lsls	r2, r3, #2
 2650 006e 2946     		mov	r1, r5
 2651 0070 1B48     		ldr	r0, .L251+16
 2652 0072 1044     		add	r0, r0, r2
 2653 0074 FFF7FEFF 		bl	vListInsertEnd
 2654              	.LVL226:
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2655              		.loc 1 2132 0 is_stmt 1 discriminator 3
 2656 0078 E26A     		ldr	r2, [r4, #44]
 2657 007a 1A4B     		ldr	r3, .L251+20
 2658 007c 1B68     		ldr	r3, [r3]
 2659 007e DB6A     		ldr	r3, [r3, #44]
 2660 0080 9A42     		cmp	r2, r3
 2661 0082 DCD3     		bcc	.L238
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2662              		.loc 1 2134 0
 2663 0084 184B     		ldr	r3, .L251+24
 2664 0086 0122     		movs	r2, #1
 2665 0088 1A60     		str	r2, [r3]
 2666 008a D8E7     		b	.L238
 2667              	.L250:
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2668              		.loc 1 2142 0
 2669 008c 0CB1     		cbz	r4, .L242
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2670              		.loc 1 2150 0
 2671 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2672              	.LVL227:
 2673              	.L242:
 2674              	.LBB164:
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2675              		.loc 1 2158 0
 2676 0092 164B     		ldr	r3, .L251+28
 2677 0094 1C68     		ldr	r4, [r3]
 2678              	.LVL228:
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2679              		.loc 1 2160 0
 2680 0096 54B1     		cbz	r4, .L243
 2681              	.L245:
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2682              		.loc 1 2164 0
 2683 0098 FFF7FEFF 		bl	xTaskIncrementTick
 2684              	.LVL229:
 2685 009c 10B1     		cbz	r0, .L244
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2686              		.loc 1 2166 0
ARM GAS  /tmp/ccv30Qft.s 			page 145


 2687 009e 124B     		ldr	r3, .L251+24
 2688 00a0 0122     		movs	r2, #1
 2689 00a2 1A60     		str	r2, [r3]
 2690              	.L244:
 2691              	.LVL230:
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2692              		.loc 1 2173 0
 2693 00a4 013C     		subs	r4, r4, #1
 2694              	.LVL231:
 2695 00a6 F7D1     		bne	.L245
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2696              		.loc 1 2175 0
 2697 00a8 104B     		ldr	r3, .L251+28
 2698 00aa 0022     		movs	r2, #0
 2699 00ac 1A60     		str	r2, [r3]
 2700              	.L243:
 2701              	.LBE164:
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2702              		.loc 1 2183 0
 2703 00ae 0E4B     		ldr	r3, .L251+24
 2704 00b0 1B68     		ldr	r3, [r3]
 2705 00b2 5BB1     		cbz	r3, .L248
 2706              	.LVL232:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2707              		.loc 1 2190 0
 2708 00b4 0E4B     		ldr	r3, .L251+32
 2709 00b6 4FF08052 		mov	r2, #268435456
 2710 00ba 1A60     		str	r2, [r3]
 2711              		.syntax unified
 2712              	@ 2190 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2713 00bc BFF34F8F 		dsb
 2714              	@ 0 "" 2
 2715              	@ 2190 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2716 00c0 BFF36F8F 		isb
 2717              	@ 0 "" 2
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2718              		.loc 1 2187 0
 2719              		.thumb
 2720              		.syntax unified
 2721 00c4 0124     		movs	r4, #1
 2722              	.LVL233:
 2723 00c6 B5E7     		b	.L237
 2724              	.LVL234:
 2725              	.L246:
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2726              		.loc 1 2102 0
 2727 00c8 0024     		movs	r4, #0
 2728 00ca B3E7     		b	.L237
 2729              	.LVL235:
 2730              	.L248:
 2731 00cc 0024     		movs	r4, #0
 2732              	.LVL236:
 2733 00ce B1E7     		b	.L237
 2734              	.L252:
 2735              		.align	2
 2736              	.L251:
 2737 00d0 00000000 		.word	.LANCHOR16
ARM GAS  /tmp/ccv30Qft.s 			page 146


 2738 00d4 00000000 		.word	.LANCHOR9
 2739 00d8 00000000 		.word	.LANCHOR1
 2740 00dc 00000000 		.word	.LANCHOR13
 2741 00e0 00000000 		.word	.LANCHOR4
 2742 00e4 00000000 		.word	.LANCHOR10
 2743 00e8 00000000 		.word	.LANCHOR19
 2744 00ec 00000000 		.word	.LANCHOR18
 2745 00f0 04ED00E0 		.word	-536810236
 2746              		.cfi_endproc
 2747              	.LFE22:
 2749              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2750              		.align	1
 2751              		.global	vTaskDelayUntil
 2752              		.syntax unified
 2753              		.thumb
 2754              		.thumb_func
 2755              		.fpu fpv4-sp-d16
 2757              	vTaskDelayUntil:
 2758              	.LFB9:
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 2759              		.loc 1 1199 0
 2760              		.cfi_startproc
 2761              		@ args = 0, pretend = 0, frame = 0
 2762              		@ frame_needed = 0, uses_anonymous_args = 0
 2763              	.LVL237:
 2764 0000 38B5     		push	{r3, r4, r5, lr}
 2765              	.LCFI30:
 2766              		.cfi_def_cfa_offset 16
 2767              		.cfi_offset 3, -16
 2768              		.cfi_offset 4, -12
 2769              		.cfi_offset 5, -8
 2770              		.cfi_offset 14, -4
 2771              	.LVL238:
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2772              		.loc 1 1203 0
 2773 0002 50B1     		cbz	r0, .L269
 2774 0004 0546     		mov	r5, r0
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2775              		.loc 1 1204 0
 2776 0006 89B9     		cbnz	r1, .L256
 2777              	.LBB165:
 2778              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2779              		.loc 2 195 0
 2780              		.syntax unified
 2781              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2782 0008 4FF05003 			mov r3, #80												
 2783 000c 83F31188 		msr basepri, r3											
 2784 0010 BFF36F8F 		isb														
 2785 0014 BFF34F8F 		dsb														
 2786              	
 2787              	@ 0 "" 2
 2788              	.LVL239:
 2789              		.thumb
 2790              		.syntax unified
 2791              	.L257:
 2792 0018 FEE7     		b	.L257
ARM GAS  /tmp/ccv30Qft.s 			page 147


 2793              	.L269:
 2794              	.LBE166:
 2795              	.LBE165:
 2796              	.LBB167:
 2797              	.LBB168:
 2798              		.syntax unified
 2799              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2800 001a 4FF05003 			mov r3, #80												
 2801 001e 83F31188 		msr basepri, r3											
 2802 0022 BFF36F8F 		isb														
 2803 0026 BFF34F8F 		dsb														
 2804              	
 2805              	@ 0 "" 2
 2806              	.LVL240:
 2807              		.thumb
 2808              		.syntax unified
 2809              	.L255:
 2810 002a FEE7     		b	.L255
 2811              	.L256:
 2812              	.LBE168:
 2813              	.LBE167:
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2814              		.loc 1 1205 0
 2815 002c 1A4B     		ldr	r3, .L270
 2816 002e 1B68     		ldr	r3, [r3]
 2817 0030 43B1     		cbz	r3, .L258
 2818              	.LBB169:
 2819              	.LBB170:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2820              		.loc 2 195 0
 2821              		.syntax unified
 2822              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2823 0032 4FF05003 			mov r3, #80												
 2824 0036 83F31188 		msr basepri, r3											
 2825 003a BFF36F8F 		isb														
 2826 003e BFF34F8F 		dsb														
 2827              	
 2828              	@ 0 "" 2
 2829              	.LVL241:
 2830              		.thumb
 2831              		.syntax unified
 2832              	.L259:
 2833 0042 FEE7     		b	.L259
 2834              	.L258:
 2835 0044 0C46     		mov	r4, r1
 2836              	.LBE170:
 2837              	.LBE169:
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2838              		.loc 1 1207 0
 2839 0046 FFF7FEFF 		bl	vTaskSuspendAll
 2840              	.LVL242:
 2841              	.LBB171:
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2842              		.loc 1 1211 0
 2843 004a 144B     		ldr	r3, .L270+4
 2844 004c 1868     		ldr	r0, [r3]
 2845              	.LVL243:
ARM GAS  /tmp/ccv30Qft.s 			page 148


1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2846              		.loc 1 1214 0
 2847 004e 2A68     		ldr	r2, [r5]
 2848 0050 1444     		add	r4, r4, r2
 2849              	.LVL244:
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2850              		.loc 1 1216 0
 2851 0052 8242     		cmp	r2, r0
 2852 0054 18D9     		bls	.L260
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2853              		.loc 1 1223 0
 2854 0056 A242     		cmp	r2, r4
 2855 0058 0CD8     		bhi	.L261
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2856              		.loc 1 1248 0
 2857 005a 2C60     		str	r4, [r5]
 2858              	.LVL245:
 2859              	.L262:
 2860              	.LBE171:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2861              		.loc 1 1263 0
 2862 005c FFF7FEFF 		bl	xTaskResumeAll
 2863              	.LVL246:
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2864              		.loc 1 1267 0
 2865 0060 38B9     		cbnz	r0, .L253
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2866              		.loc 1 1269 0
 2867 0062 0F4B     		ldr	r3, .L270+8
 2868 0064 4FF08052 		mov	r2, #268435456
 2869 0068 1A60     		str	r2, [r3]
 2870              		.syntax unified
 2871              	@ 1269 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2872 006a BFF34F8F 		dsb
 2873              	@ 0 "" 2
 2874              	@ 1269 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2875 006e BFF36F8F 		isb
 2876              	@ 0 "" 2
 2877              		.thumb
 2878              		.syntax unified
 2879              	.L253:
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2880              		.loc 1 1275 0
 2881 0072 38BD     		pop	{r3, r4, r5, pc}
 2882              	.LVL247:
 2883              	.L261:
 2884              	.LBB172:
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2885              		.loc 1 1223 0 discriminator 1
 2886 0074 A042     		cmp	r0, r4
 2887 0076 01D3     		bcc	.L263
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2888              		.loc 1 1248 0
 2889 0078 2C60     		str	r4, [r5]
 2890 007a EFE7     		b	.L262
 2891              	.L263:
 2892              	.LVL248:
ARM GAS  /tmp/ccv30Qft.s 			page 149


 2893 007c 2C60     		str	r4, [r5]
 2894              	.L264:
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2895              		.loc 1 1256 0
 2896 007e 0021     		movs	r1, #0
 2897 0080 201A     		subs	r0, r4, r0
 2898              	.LVL249:
 2899 0082 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2900              	.LVL250:
 2901 0086 E9E7     		b	.L262
 2902              	.LVL251:
 2903              	.L260:
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2904              		.loc 1 1237 0
 2905 0088 A242     		cmp	r2, r4
 2906 008a 01D8     		bhi	.L265
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2907              		.loc 1 1237 0 is_stmt 0 discriminator 1
 2908 008c A042     		cmp	r0, r4
 2909 008e 01D2     		bcs	.L266
 2910              	.L265:
 2911              	.LVL252:
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2912              		.loc 1 1248 0 is_stmt 1
 2913 0090 2C60     		str	r4, [r5]
 2914 0092 F4E7     		b	.L264
 2915              	.LVL253:
 2916              	.L266:
 2917 0094 2C60     		str	r4, [r5]
 2918 0096 E1E7     		b	.L262
 2919              	.L271:
 2920              		.align	2
 2921              	.L270:
 2922 0098 00000000 		.word	.LANCHOR16
 2923 009c 00000000 		.word	.LANCHOR15
 2924 00a0 04ED00E0 		.word	-536810236
 2925              	.LBE172:
 2926              		.cfi_endproc
 2927              	.LFE9:
 2929              		.section	.text.vTaskDelay,"ax",%progbits
 2930              		.align	1
 2931              		.global	vTaskDelay
 2932              		.syntax unified
 2933              		.thumb
 2934              		.thumb_func
 2935              		.fpu fpv4-sp-d16
 2937              	vTaskDelay:
 2938              	.LFB10:
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2939              		.loc 1 1283 0
 2940              		.cfi_startproc
 2941              		@ args = 0, pretend = 0, frame = 0
 2942              		@ frame_needed = 0, uses_anonymous_args = 0
 2943              	.LVL254:
 2944 0000 10B5     		push	{r4, lr}
 2945              	.LCFI31:
 2946              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccv30Qft.s 			page 150


 2947              		.cfi_offset 4, -8
 2948              		.cfi_offset 14, -4
 2949              	.LVL255:
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2950              		.loc 1 1287 0
 2951 0002 A8B1     		cbz	r0, .L273
 2952 0004 0446     		mov	r4, r0
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2953              		.loc 1 1289 0
 2954 0006 0F4B     		ldr	r3, .L278
 2955 0008 1B68     		ldr	r3, [r3]
 2956 000a 43B1     		cbz	r3, .L274
 2957              	.LBB173:
 2958              	.LBB174:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2959              		.loc 2 195 0
 2960              		.syntax unified
 2961              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2962 000c 4FF05003 			mov r3, #80												
 2963 0010 83F31188 		msr basepri, r3											
 2964 0014 BFF36F8F 		isb														
 2965 0018 BFF34F8F 		dsb														
 2966              	
 2967              	@ 0 "" 2
 2968              	.LVL256:
 2969              		.thumb
 2970              		.syntax unified
 2971              	.L275:
 2972 001c FEE7     		b	.L275
 2973              	.L274:
 2974              	.LBE174:
 2975              	.LBE173:
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2976              		.loc 1 1290 0
 2977 001e FFF7FEFF 		bl	vTaskSuspendAll
 2978              	.LVL257:
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2979              		.loc 1 1301 0
 2980 0022 0021     		movs	r1, #0
 2981 0024 2046     		mov	r0, r4
 2982 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2983              	.LVL258:
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2984              		.loc 1 1303 0
 2985 002a FFF7FEFF 		bl	xTaskResumeAll
 2986              	.LVL259:
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2987              		.loc 1 1312 0
 2988 002e 38B9     		cbnz	r0, .L272
 2989              	.LVL260:
 2990              	.L273:
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2991              		.loc 1 1314 0
 2992 0030 054B     		ldr	r3, .L278+4
 2993 0032 4FF08052 		mov	r2, #268435456
 2994 0036 1A60     		str	r2, [r3]
 2995              		.syntax unified
ARM GAS  /tmp/ccv30Qft.s 			page 151


 2996              	@ 1314 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2997 0038 BFF34F8F 		dsb
 2998              	@ 0 "" 2
 2999              	@ 1314 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3000 003c BFF36F8F 		isb
 3001              	@ 0 "" 2
 3002              		.thumb
 3003              		.syntax unified
 3004              	.L272:
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3005              		.loc 1 1320 0
 3006 0040 10BD     		pop	{r4, pc}
 3007              	.L279:
 3008 0042 00BF     		.align	2
 3009              	.L278:
 3010 0044 00000000 		.word	.LANCHOR16
 3011 0048 04ED00E0 		.word	-536810236
 3012              		.cfi_endproc
 3013              	.LFE10:
 3015              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3016              		.align	1
 3017              		.global	vTaskSwitchContext
 3018              		.syntax unified
 3019              		.thumb
 3020              		.thumb_func
 3021              		.fpu fpv4-sp-d16
 3023              	vTaskSwitchContext:
 3024              	.LFB29:
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3025              		.loc 1 2846 0
 3026              		.cfi_startproc
 3027              		@ args = 0, pretend = 0, frame = 0
 3028              		@ frame_needed = 0, uses_anonymous_args = 0
 3029              		@ link register save eliminated.
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3030              		.loc 1 2847 0
 3031 0000 204B     		ldr	r3, .L295
 3032 0002 1B68     		ldr	r3, [r3]
 3033 0004 1BB1     		cbz	r3, .L281
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3034              		.loc 1 2851 0
 3035 0006 204B     		ldr	r3, .L295+4
 3036 0008 0122     		movs	r2, #1
 3037 000a 1A60     		str	r2, [r3]
 3038 000c 7047     		bx	lr
 3039              	.L281:
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3040              		.loc 1 2855 0
 3041 000e 1E4B     		ldr	r3, .L295+4
 3042 0010 0022     		movs	r2, #0
 3043 0012 1A60     		str	r2, [r3]
 3044              	.LBB175:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3045              		.loc 1 2890 0
 3046 0014 1D4B     		ldr	r3, .L295+8
 3047 0016 1B68     		ldr	r3, [r3]
 3048              	.LVL261:
ARM GAS  /tmp/ccv30Qft.s 			page 152


 3049              	.L283:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3050              		.loc 1 2890 0 is_stmt 0 discriminator 4
 3051 0018 03EB8301 		add	r1, r3, r3, lsl #2
 3052 001c 8A00     		lsls	r2, r1, #2
 3053 001e 1C49     		ldr	r1, .L295+12
 3054 0020 8A58     		ldr	r2, [r1, r2]
 3055 0022 5AB9     		cbnz	r2, .L292
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3056              		.loc 1 2890 0 discriminator 5
 3057 0024 0BB1     		cbz	r3, .L293
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3058              		.loc 1 2890 0 discriminator 3
 3059 0026 013B     		subs	r3, r3, #1
 3060              	.LVL262:
 3061 0028 F6E7     		b	.L283
 3062              	.L293:
 3063              	.LBB176:
 3064              	.LBB177:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3065              		.loc 2 195 0 is_stmt 1
 3066              		.syntax unified
 3067              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3068 002a 4FF05003 			mov r3, #80												
 3069 002e 83F31188 		msr basepri, r3											
 3070 0032 BFF36F8F 		isb														
 3071 0036 BFF34F8F 		dsb														
 3072              	
 3073              	@ 0 "" 2
 3074              	.LVL263:
 3075              		.thumb
 3076              		.syntax unified
 3077              	.L285:
 3078 003a FEE7     		b	.L285
 3079              	.LVL264:
 3080              	.L292:
 3081              	.LBE177:
 3082              	.LBE176:
 3083              	.LBE175:
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3084              		.loc 1 2846 0 discriminator 6
 3085 003c 10B4     		push	{r4}
 3086              	.LCFI32:
 3087              		.cfi_def_cfa_offset 4
 3088              		.cfi_offset 4, -4
 3089              	.LVL265:
 3090              	.LBB180:
 3091              	.LBB178:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3092              		.loc 1 2890 0 discriminator 6
 3093 003e 0846     		mov	r0, r1
 3094 0040 9A00     		lsls	r2, r3, #2
 3095 0042 D418     		adds	r4, r2, r3
 3096 0044 A100     		lsls	r1, r4, #2
 3097 0046 0144     		add	r1, r1, r0
 3098 0048 4C68     		ldr	r4, [r1, #4]
 3099 004a 6468     		ldr	r4, [r4, #4]
ARM GAS  /tmp/ccv30Qft.s 			page 153


 3100 004c 4C60     		str	r4, [r1, #4]
 3101 004e 1A44     		add	r2, r2, r3
 3102 0050 9100     		lsls	r1, r2, #2
 3103 0052 0831     		adds	r1, r1, #8
 3104 0054 0844     		add	r0, r0, r1
 3105 0056 8442     		cmp	r4, r0
 3106 0058 0DD0     		beq	.L294
 3107              	.L287:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3108              		.loc 1 2890 0 is_stmt 0 discriminator 9
 3109 005a 03EB8302 		add	r2, r3, r3, lsl #2
 3110 005e 9100     		lsls	r1, r2, #2
 3111 0060 0B4A     		ldr	r2, .L295+12
 3112 0062 0A44     		add	r2, r2, r1
 3113 0064 5268     		ldr	r2, [r2, #4]
 3114 0066 D168     		ldr	r1, [r2, #12]
 3115 0068 0A4A     		ldr	r2, .L295+16
 3116 006a 1160     		str	r1, [r2]
 3117              	.LBE178:
 3118 006c 074A     		ldr	r2, .L295+8
 3119 006e 1360     		str	r3, [r2]
 3120              	.LBE180:
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3121              		.loc 1 2901 0 is_stmt 1 discriminator 9
 3122 0070 5DF8044B 		ldr	r4, [sp], #4
 3123              	.LCFI33:
 3124              		.cfi_remember_state
 3125              		.cfi_restore 4
 3126              		.cfi_def_cfa_offset 0
 3127 0074 7047     		bx	lr
 3128              	.L294:
 3129              	.LCFI34:
 3130              		.cfi_restore_state
 3131              	.LBB181:
 3132              	.LBB179:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3133              		.loc 1 2890 0 discriminator 7
 3134 0076 6168     		ldr	r1, [r4, #4]
 3135 0078 0548     		ldr	r0, .L295+12
 3136 007a 1422     		movs	r2, #20
 3137 007c 02FB0302 		mla	r2, r2, r3, r0
 3138 0080 5160     		str	r1, [r2, #4]
 3139 0082 EAE7     		b	.L287
 3140              	.L296:
 3141              		.align	2
 3142              	.L295:
 3143 0084 00000000 		.word	.LANCHOR16
 3144 0088 00000000 		.word	.LANCHOR19
 3145 008c 00000000 		.word	.LANCHOR13
 3146 0090 00000000 		.word	.LANCHOR4
 3147 0094 00000000 		.word	.LANCHOR10
 3148              	.LBE179:
 3149              	.LBE181:
 3150              		.cfi_endproc
 3151              	.LFE29:
 3153              		.section	.text.vTaskSuspend,"ax",%progbits
 3154              		.align	1
ARM GAS  /tmp/ccv30Qft.s 			page 154


 3155              		.global	vTaskSuspend
 3156              		.syntax unified
 3157              		.thumb
 3158              		.thumb_func
 3159              		.fpu fpv4-sp-d16
 3161              	vTaskSuspend:
 3162              	.LFB15:
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3163              		.loc 1 1625 0
 3164              		.cfi_startproc
 3165              		@ args = 0, pretend = 0, frame = 0
 3166              		@ frame_needed = 0, uses_anonymous_args = 0
 3167              	.LVL266:
 3168 0000 38B5     		push	{r3, r4, r5, lr}
 3169              	.LCFI35:
 3170              		.cfi_def_cfa_offset 16
 3171              		.cfi_offset 3, -16
 3172              		.cfi_offset 4, -12
 3173              		.cfi_offset 5, -8
 3174              		.cfi_offset 14, -4
 3175 0002 0446     		mov	r4, r0
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3176              		.loc 1 1628 0
 3177 0004 FFF7FEFF 		bl	vPortEnterCritical
 3178              	.LVL267:
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3179              		.loc 1 1632 0
 3180 0008 E4B1     		cbz	r4, .L308
 3181              	.LVL268:
 3182              	.L298:
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3183              		.loc 1 1638 0 discriminator 4
 3184 000a 251D     		adds	r5, r4, #4
 3185 000c 2846     		mov	r0, r5
 3186 000e FFF7FEFF 		bl	uxListRemove
 3187              	.LVL269:
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3188              		.loc 1 1648 0 discriminator 4
 3189 0012 A36A     		ldr	r3, [r4, #40]
 3190 0014 1BB1     		cbz	r3, .L299
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3191              		.loc 1 1650 0
 3192 0016 04F11800 		add	r0, r4, #24
 3193 001a FFF7FEFF 		bl	uxListRemove
 3194              	.LVL270:
 3195              	.L299:
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3196              		.loc 1 1657 0
 3197 001e 2946     		mov	r1, r5
 3198 0020 2248     		ldr	r0, .L312
 3199 0022 FFF7FEFF 		bl	vListInsertEnd
 3200              	.LVL271:
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3201              		.loc 1 1661 0
 3202 0026 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 3203 002a DBB2     		uxtb	r3, r3
 3204 002c 012B     		cmp	r3, #1
ARM GAS  /tmp/ccv30Qft.s 			page 155


 3205 002e 0CD0     		beq	.L309
 3206              	.L300:
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3207              		.loc 1 1670 0
 3208 0030 FFF7FEFF 		bl	vPortExitCritical
 3209              	.LVL272:
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3210              		.loc 1 1672 0
 3211 0034 1E4B     		ldr	r3, .L312+4
 3212 0036 1B68     		ldr	r3, [r3]
 3213 0038 5BB9     		cbnz	r3, .L310
 3214              	.L301:
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3215              		.loc 1 1687 0
 3216 003a 1E4B     		ldr	r3, .L312+8
 3217 003c 1B68     		ldr	r3, [r3]
 3218 003e A342     		cmp	r3, r4
 3219 0040 0ED0     		beq	.L311
 3220              	.L297:
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3221              		.loc 1 1718 0
 3222 0042 38BD     		pop	{r3, r4, r5, pc}
 3223              	.LVL273:
 3224              	.L308:
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3225              		.loc 1 1632 0 discriminator 1
 3226 0044 1B4B     		ldr	r3, .L312+8
 3227 0046 1C68     		ldr	r4, [r3]
 3228              	.LVL274:
 3229 0048 DFE7     		b	.L298
 3230              	.LVL275:
 3231              	.L309:
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3232              		.loc 1 1665 0
 3233 004a 0023     		movs	r3, #0
 3234 004c 84F85830 		strb	r3, [r4, #88]
 3235 0050 EEE7     		b	.L300
 3236              	.L310:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3237              		.loc 1 1676 0
 3238 0052 FFF7FEFF 		bl	vPortEnterCritical
 3239              	.LVL276:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3240              		.loc 1 1678 0
 3241 0056 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3242              	.LVL277:
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3243              		.loc 1 1680 0
 3244 005a FFF7FEFF 		bl	vPortExitCritical
 3245              	.LVL278:
 3246 005e ECE7     		b	.L301
 3247              	.L311:
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3248              		.loc 1 1689 0
 3249 0060 134B     		ldr	r3, .L312+4
 3250 0062 1B68     		ldr	r3, [r3]
 3251 0064 A3B1     		cbz	r3, .L303
ARM GAS  /tmp/ccv30Qft.s 			page 156


1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3252              		.loc 1 1692 0
 3253 0066 144B     		ldr	r3, .L312+12
 3254 0068 1B68     		ldr	r3, [r3]
 3255 006a 43B1     		cbz	r3, .L304
 3256              	.LBB182:
 3257              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3258              		.loc 2 195 0
 3259              		.syntax unified
 3260              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3261 006c 4FF05003 			mov r3, #80												
 3262 0070 83F31188 		msr basepri, r3											
 3263 0074 BFF36F8F 		isb														
 3264 0078 BFF34F8F 		dsb														
 3265              	
 3266              	@ 0 "" 2
 3267              	.LVL279:
 3268              		.thumb
 3269              		.syntax unified
 3270              	.L305:
 3271 007c FEE7     		b	.L305
 3272              	.L304:
 3273              	.LBE183:
 3274              	.LBE182:
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3275              		.loc 1 1693 0
 3276 007e 0F4B     		ldr	r3, .L312+16
 3277 0080 4FF08052 		mov	r2, #268435456
 3278 0084 1A60     		str	r2, [r3]
 3279              		.syntax unified
 3280              	@ 1693 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3281 0086 BFF34F8F 		dsb
 3282              	@ 0 "" 2
 3283              	@ 1693 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3284 008a BFF36F8F 		isb
 3285              	@ 0 "" 2
 3286              		.thumb
 3287              		.syntax unified
 3288 008e D8E7     		b	.L297
 3289              	.L303:
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3290              		.loc 1 1700 0
 3291 0090 064B     		ldr	r3, .L312
 3292 0092 1A68     		ldr	r2, [r3]
 3293 0094 0A4B     		ldr	r3, .L312+20
 3294 0096 1B68     		ldr	r3, [r3]
 3295 0098 9A42     		cmp	r2, r3
 3296 009a 03D1     		bne	.L306
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3297              		.loc 1 1706 0
 3298 009c 054B     		ldr	r3, .L312+8
 3299 009e 0022     		movs	r2, #0
 3300 00a0 1A60     		str	r2, [r3]
 3301 00a2 CEE7     		b	.L297
 3302              	.L306:
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccv30Qft.s 			page 157


 3303              		.loc 1 1710 0
 3304 00a4 FFF7FEFF 		bl	vTaskSwitchContext
 3305              	.LVL280:
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3306              		.loc 1 1718 0
 3307 00a8 CBE7     		b	.L297
 3308              	.L313:
 3309 00aa 00BF     		.align	2
 3310              	.L312:
 3311 00ac 00000000 		.word	.LANCHOR0
 3312 00b0 00000000 		.word	.LANCHOR11
 3313 00b4 00000000 		.word	.LANCHOR10
 3314 00b8 00000000 		.word	.LANCHOR16
 3315 00bc 04ED00E0 		.word	-536810236
 3316 00c0 00000000 		.word	.LANCHOR9
 3317              		.cfi_endproc
 3318              	.LFE15:
 3320              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3321              		.align	1
 3322              		.global	vTaskPlaceOnEventList
 3323              		.syntax unified
 3324              		.thumb
 3325              		.thumb_func
 3326              		.fpu fpv4-sp-d16
 3328              	vTaskPlaceOnEventList:
 3329              	.LFB30:
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3330              		.loc 1 2905 0
 3331              		.cfi_startproc
 3332              		@ args = 0, pretend = 0, frame = 0
 3333              		@ frame_needed = 0, uses_anonymous_args = 0
 3334              	.LVL281:
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3335              		.loc 1 2906 0
 3336 0000 40B9     		cbnz	r0, .L315
 3337              	.LBB184:
 3338              	.LBB185:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3339              		.loc 2 195 0
 3340              		.syntax unified
 3341              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3342 0002 4FF05003 			mov r3, #80												
 3343 0006 83F31188 		msr basepri, r3											
 3344 000a BFF36F8F 		isb														
 3345 000e BFF34F8F 		dsb														
 3346              	
 3347              	@ 0 "" 2
 3348              	.LVL282:
 3349              		.thumb
 3350              		.syntax unified
 3351              	.L316:
 3352 0012 FEE7     		b	.L316
 3353              	.L315:
 3354              	.LBE185:
 3355              	.LBE184:
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3356              		.loc 1 2905 0
ARM GAS  /tmp/ccv30Qft.s 			page 158


 3357 0014 10B5     		push	{r4, lr}
 3358              	.LCFI36:
 3359              		.cfi_def_cfa_offset 8
 3360              		.cfi_offset 4, -8
 3361              		.cfi_offset 14, -4
 3362 0016 0C46     		mov	r4, r1
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3363              		.loc 1 2915 0
 3364 0018 044B     		ldr	r3, .L319
 3365 001a 1968     		ldr	r1, [r3]
 3366              	.LVL283:
 3367 001c 1831     		adds	r1, r1, #24
 3368 001e FFF7FEFF 		bl	vListInsert
 3369              	.LVL284:
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3370              		.loc 1 2917 0
 3371 0022 0121     		movs	r1, #1
 3372 0024 2046     		mov	r0, r4
 3373 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3374              	.LVL285:
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3375              		.loc 1 2918 0
 3376 002a 10BD     		pop	{r4, pc}
 3377              	.LVL286:
 3378              	.L320:
 3379              		.align	2
 3380              	.L319:
 3381 002c 00000000 		.word	.LANCHOR10
 3382              		.cfi_endproc
 3383              	.LFE30:
 3385              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3386              		.align	1
 3387              		.global	vTaskPlaceOnUnorderedEventList
 3388              		.syntax unified
 3389              		.thumb
 3390              		.thumb_func
 3391              		.fpu fpv4-sp-d16
 3393              	vTaskPlaceOnUnorderedEventList:
 3394              	.LFB31:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3395              		.loc 1 2922 0
 3396              		.cfi_startproc
 3397              		@ args = 0, pretend = 0, frame = 0
 3398              		@ frame_needed = 0, uses_anonymous_args = 0
 3399              	.LVL287:
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3400              		.loc 1 2923 0
 3401 0000 40B9     		cbnz	r0, .L322
 3402              	.LBB186:
 3403              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3404              		.loc 2 195 0
 3405              		.syntax unified
 3406              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3407 0002 4FF05003 			mov r3, #80												
 3408 0006 83F31188 		msr basepri, r3											
 3409 000a BFF36F8F 		isb														
ARM GAS  /tmp/ccv30Qft.s 			page 159


 3410 000e BFF34F8F 		dsb														
 3411              	
 3412              	@ 0 "" 2
 3413              	.LVL288:
 3414              		.thumb
 3415              		.syntax unified
 3416              	.L323:
 3417 0012 FEE7     		b	.L323
 3418              	.L322:
 3419 0014 0346     		mov	r3, r0
 3420              	.LBE187:
 3421              	.LBE186:
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3422              		.loc 1 2927 0
 3423 0016 0F48     		ldr	r0, .L328
 3424              	.LVL289:
 3425 0018 0068     		ldr	r0, [r0]
 3426 001a 40B9     		cbnz	r0, .L324
 3427              	.LBB188:
 3428              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3429              		.loc 2 195 0
 3430              		.syntax unified
 3431              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3432 001c 4FF05003 			mov r3, #80												
 3433 0020 83F31188 		msr basepri, r3											
 3434 0024 BFF36F8F 		isb														
 3435 0028 BFF34F8F 		dsb														
 3436              	
 3437              	@ 0 "" 2
 3438              	.LVL290:
 3439              		.thumb
 3440              		.syntax unified
 3441              	.L325:
 3442 002c FEE7     		b	.L325
 3443              	.LVL291:
 3444              	.L324:
 3445              	.LBE189:
 3446              	.LBE188:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3447              		.loc 1 2922 0
 3448 002e 10B5     		push	{r4, lr}
 3449              	.LCFI37:
 3450              		.cfi_def_cfa_offset 8
 3451              		.cfi_offset 4, -8
 3452              		.cfi_offset 14, -4
 3453 0030 1846     		mov	r0, r3
 3454 0032 1446     		mov	r4, r2
 3455 0034 0B46     		mov	r3, r1
 3456              	.LVL292:
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3457              		.loc 1 2932 0
 3458 0036 084A     		ldr	r2, .L328+4
 3459              	.LVL293:
 3460 0038 1168     		ldr	r1, [r2]
 3461              	.LVL294:
 3462 003a 43F00043 		orr	r3, r3, #-2147483648
ARM GAS  /tmp/ccv30Qft.s 			page 160


 3463              	.LVL295:
 3464 003e 8B61     		str	r3, [r1, #24]
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3465              		.loc 1 2939 0
 3466 0040 1168     		ldr	r1, [r2]
 3467 0042 1831     		adds	r1, r1, #24
 3468 0044 FFF7FEFF 		bl	vListInsertEnd
 3469              	.LVL296:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3470              		.loc 1 2941 0
 3471 0048 0121     		movs	r1, #1
 3472 004a 2046     		mov	r0, r4
 3473 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3474              	.LVL297:
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3475              		.loc 1 2942 0
 3476 0050 10BD     		pop	{r4, pc}
 3477              	.LVL298:
 3478              	.L329:
 3479 0052 00BF     		.align	2
 3480              	.L328:
 3481 0054 00000000 		.word	.LANCHOR16
 3482 0058 00000000 		.word	.LANCHOR10
 3483              		.cfi_endproc
 3484              	.LFE31:
 3486              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3487              		.align	1
 3488              		.global	vTaskPlaceOnEventListRestricted
 3489              		.syntax unified
 3490              		.thumb
 3491              		.thumb_func
 3492              		.fpu fpv4-sp-d16
 3494              	vTaskPlaceOnEventListRestricted:
 3495              	.LFB32:
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 3496              		.loc 1 2948 0
 3497              		.cfi_startproc
 3498              		@ args = 0, pretend = 0, frame = 0
 3499              		@ frame_needed = 0, uses_anonymous_args = 0
 3500              	.LVL299:
 3501 0000 38B5     		push	{r3, r4, r5, lr}
 3502              	.LCFI38:
 3503              		.cfi_def_cfa_offset 16
 3504              		.cfi_offset 3, -16
 3505              		.cfi_offset 4, -12
 3506              		.cfi_offset 5, -8
 3507              		.cfi_offset 14, -4
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3508              		.loc 1 2949 0
 3509 0002 40B9     		cbnz	r0, .L331
 3510              	.LBB190:
 3511              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3512              		.loc 2 195 0
 3513              		.syntax unified
 3514              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3515 0004 4FF05003 			mov r3, #80												
ARM GAS  /tmp/ccv30Qft.s 			page 161


 3516 0008 83F31188 		msr basepri, r3											
 3517 000c BFF36F8F 		isb														
 3518 0010 BFF34F8F 		dsb														
 3519              	
 3520              	@ 0 "" 2
 3521              	.LVL300:
 3522              		.thumb
 3523              		.syntax unified
 3524              	.L332:
 3525 0014 FEE7     		b	.L332
 3526              	.L331:
 3527 0016 0C46     		mov	r4, r1
 3528 0018 1546     		mov	r5, r2
 3529              	.LBE191:
 3530              	.LBE190:
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3531              		.loc 1 2961 0
 3532 001a 064A     		ldr	r2, .L336
 3533              	.LVL301:
 3534 001c 1168     		ldr	r1, [r2]
 3535              	.LVL302:
 3536 001e 1831     		adds	r1, r1, #24
 3537 0020 FFF7FEFF 		bl	vListInsertEnd
 3538              	.LVL303:
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3539              		.loc 1 2966 0
 3540 0024 0DB1     		cbz	r5, .L333
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3541              		.loc 1 2968 0
 3542 0026 4FF0FF34 		mov	r4, #-1
 3543              	.LVL304:
 3544              	.L333:
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3545              		.loc 1 2972 0
 3546 002a 2946     		mov	r1, r5
 3547 002c 2046     		mov	r0, r4
 3548 002e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3549              	.LVL305:
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3550              		.loc 1 2973 0
 3551 0032 38BD     		pop	{r3, r4, r5, pc}
 3552              	.LVL306:
 3553              	.L337:
 3554              		.align	2
 3555              	.L336:
 3556 0034 00000000 		.word	.LANCHOR10
 3557              		.cfi_endproc
 3558              	.LFE32:
 3560              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3561              		.align	1
 3562              		.global	xTaskRemoveFromEventList
 3563              		.syntax unified
 3564              		.thumb
 3565              		.thumb_func
 3566              		.fpu fpv4-sp-d16
 3568              	xTaskRemoveFromEventList:
 3569              	.LFB33:
ARM GAS  /tmp/ccv30Qft.s 			page 162


2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3570              		.loc 1 2979 0
 3571              		.cfi_startproc
 3572              		@ args = 0, pretend = 0, frame = 0
 3573              		@ frame_needed = 0, uses_anonymous_args = 0
 3574              	.LVL307:
 3575 0000 38B5     		push	{r3, r4, r5, lr}
 3576              	.LCFI39:
 3577              		.cfi_def_cfa_offset 16
 3578              		.cfi_offset 3, -16
 3579              		.cfi_offset 4, -12
 3580              		.cfi_offset 5, -8
 3581              		.cfi_offset 14, -4
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3582              		.loc 1 2996 0
 3583 0002 C368     		ldr	r3, [r0, #12]
 3584 0004 DC68     		ldr	r4, [r3, #12]
 3585              	.LVL308:
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3586              		.loc 1 2997 0
 3587 0006 44B9     		cbnz	r4, .L339
 3588              	.LBB192:
 3589              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3590              		.loc 2 195 0
 3591              		.syntax unified
 3592              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3593 0008 4FF05003 			mov r3, #80												
 3594 000c 83F31188 		msr basepri, r3											
 3595 0010 BFF36F8F 		isb														
 3596 0014 BFF34F8F 		dsb														
 3597              	
 3598              	@ 0 "" 2
 3599              	.LVL309:
 3600              		.thumb
 3601              		.syntax unified
 3602              	.L340:
 3603 0018 FEE7     		b	.L340
 3604              	.L339:
 3605              	.LBE193:
 3606              	.LBE192:
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3607              		.loc 1 2998 0
 3608 001a 04F11805 		add	r5, r4, #24
 3609 001e 2846     		mov	r0, r5
 3610              	.LVL310:
 3611 0020 FFF7FEFF 		bl	uxListRemove
 3612              	.LVL311:
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3613              		.loc 1 3000 0
 3614 0024 134B     		ldr	r3, .L347
 3615 0026 1B68     		ldr	r3, [r3]
 3616 0028 E3B9     		cbnz	r3, .L341
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3617              		.loc 1 3002 0
 3618 002a 251D     		adds	r5, r4, #4
 3619 002c 2846     		mov	r0, r5
ARM GAS  /tmp/ccv30Qft.s 			page 163


 3620 002e FFF7FEFF 		bl	uxListRemove
 3621              	.LVL312:
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3622              		.loc 1 3003 0
 3623 0032 E36A     		ldr	r3, [r4, #44]
 3624 0034 104A     		ldr	r2, .L347+4
 3625 0036 1268     		ldr	r2, [r2]
 3626 0038 9342     		cmp	r3, r2
 3627 003a 01D9     		bls	.L342
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3628              		.loc 1 3003 0 is_stmt 0 discriminator 1
 3629 003c 0E4A     		ldr	r2, .L347+4
 3630 003e 1360     		str	r3, [r2]
 3631              	.L342:
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3632              		.loc 1 3003 0 discriminator 3
 3633 0040 03EB8303 		add	r3, r3, r3, lsl #2
 3634 0044 9A00     		lsls	r2, r3, #2
 3635 0046 2946     		mov	r1, r5
 3636 0048 0C48     		ldr	r0, .L347+8
 3637 004a 1044     		add	r0, r0, r2
 3638 004c FFF7FEFF 		bl	vListInsertEnd
 3639              	.LVL313:
 3640              	.L343:
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3641              		.loc 1 3012 0 is_stmt 1
 3642 0050 E26A     		ldr	r2, [r4, #44]
 3643 0052 0B4B     		ldr	r3, .L347+12
 3644 0054 1B68     		ldr	r3, [r3]
 3645 0056 DB6A     		ldr	r3, [r3, #44]
 3646 0058 9A42     		cmp	r2, r3
 3647 005a 08D9     		bls	.L345
 3648              	.LVL314:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3649              		.loc 1 3021 0
 3650 005c 0120     		movs	r0, #1
 3651 005e 094B     		ldr	r3, .L347+16
 3652 0060 1860     		str	r0, [r3]
 3653              	.LVL315:
 3654              	.L338:
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3655              		.loc 1 3043 0
 3656 0062 38BD     		pop	{r3, r4, r5, pc}
 3657              	.LVL316:
 3658              	.L341:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3659              		.loc 1 3009 0
 3660 0064 2946     		mov	r1, r5
 3661 0066 0848     		ldr	r0, .L347+20
 3662 0068 FFF7FEFF 		bl	vListInsertEnd
 3663              	.LVL317:
 3664 006c F0E7     		b	.L343
 3665              	.L345:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3666              		.loc 1 3025 0
 3667 006e 0020     		movs	r0, #0
 3668              	.LVL318:
ARM GAS  /tmp/ccv30Qft.s 			page 164


3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3669              		.loc 1 3042 0
 3670 0070 F7E7     		b	.L338
 3671              	.L348:
 3672 0072 00BF     		.align	2
 3673              	.L347:
 3674 0074 00000000 		.word	.LANCHOR16
 3675 0078 00000000 		.word	.LANCHOR13
 3676 007c 00000000 		.word	.LANCHOR4
 3677 0080 00000000 		.word	.LANCHOR10
 3678 0084 00000000 		.word	.LANCHOR19
 3679 0088 00000000 		.word	.LANCHOR1
 3680              		.cfi_endproc
 3681              	.LFE33:
 3683              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3684              		.align	1
 3685              		.global	vTaskRemoveFromUnorderedEventList
 3686              		.syntax unified
 3687              		.thumb
 3688              		.thumb_func
 3689              		.fpu fpv4-sp-d16
 3691              	vTaskRemoveFromUnorderedEventList:
 3692              	.LFB34:
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3693              		.loc 1 3047 0
 3694              		.cfi_startproc
 3695              		@ args = 0, pretend = 0, frame = 0
 3696              		@ frame_needed = 0, uses_anonymous_args = 0
 3697              	.LVL319:
 3698 0000 38B5     		push	{r3, r4, r5, lr}
 3699              	.LCFI40:
 3700              		.cfi_def_cfa_offset 16
 3701              		.cfi_offset 3, -16
 3702              		.cfi_offset 4, -12
 3703              		.cfi_offset 5, -8
 3704              		.cfi_offset 14, -4
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3705              		.loc 1 3052 0
 3706 0002 1C4B     		ldr	r3, .L358
 3707 0004 1B68     		ldr	r3, [r3]
 3708 0006 43B9     		cbnz	r3, .L350
 3709              	.LBB194:
 3710              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3711              		.loc 2 195 0
 3712              		.syntax unified
 3713              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3714 0008 4FF05003 			mov r3, #80												
 3715 000c 83F31188 		msr basepri, r3											
 3716 0010 BFF36F8F 		isb														
 3717 0014 BFF34F8F 		dsb														
 3718              	
 3719              	@ 0 "" 2
 3720              	.LVL320:
 3721              		.thumb
 3722              		.syntax unified
 3723              	.L351:
ARM GAS  /tmp/ccv30Qft.s 			page 165


 3724 0018 FEE7     		b	.L351
 3725              	.L350:
 3726              	.LBE195:
 3727              	.LBE194:
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3728              		.loc 1 3055 0
 3729 001a 41F00041 		orr	r1, r1, #-2147483648
 3730              	.LVL321:
 3731 001e 0160     		str	r1, [r0]
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3732              		.loc 1 3059 0
 3733 0020 C468     		ldr	r4, [r0, #12]
 3734              	.LVL322:
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3735              		.loc 1 3060 0
 3736 0022 F4B1     		cbz	r4, .L357
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3737              		.loc 1 3061 0
 3738 0024 FFF7FEFF 		bl	uxListRemove
 3739              	.LVL323:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3740              		.loc 1 3066 0
 3741 0028 251D     		adds	r5, r4, #4
 3742 002a 2846     		mov	r0, r5
 3743 002c FFF7FEFF 		bl	uxListRemove
 3744              	.LVL324:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3745              		.loc 1 3067 0
 3746 0030 E36A     		ldr	r3, [r4, #44]
 3747 0032 114A     		ldr	r2, .L358+4
 3748 0034 1268     		ldr	r2, [r2]
 3749 0036 9342     		cmp	r3, r2
 3750 0038 01D9     		bls	.L354
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3751              		.loc 1 3067 0 is_stmt 0 discriminator 1
 3752 003a 0F4A     		ldr	r2, .L358+4
 3753 003c 1360     		str	r3, [r2]
 3754              	.L354:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3755              		.loc 1 3067 0 discriminator 3
 3756 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3757 0042 9A00     		lsls	r2, r3, #2
 3758 0044 2946     		mov	r1, r5
 3759 0046 0D48     		ldr	r0, .L358+8
 3760 0048 1044     		add	r0, r0, r2
 3761 004a FFF7FEFF 		bl	vListInsertEnd
 3762              	.LVL325:
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3763              		.loc 1 3069 0 is_stmt 1 discriminator 3
 3764 004e E26A     		ldr	r2, [r4, #44]
 3765 0050 0B4B     		ldr	r3, .L358+12
 3766 0052 1B68     		ldr	r3, [r3]
 3767 0054 DB6A     		ldr	r3, [r3, #44]
 3768 0056 9A42     		cmp	r2, r3
 3769 0058 02D9     		bls	.L349
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3770              		.loc 1 3075 0
ARM GAS  /tmp/ccv30Qft.s 			page 166


 3771 005a 0A4B     		ldr	r3, .L358+16
 3772 005c 0122     		movs	r2, #1
 3773 005e 1A60     		str	r2, [r3]
 3774              	.L349:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3775              		.loc 1 3077 0
 3776 0060 38BD     		pop	{r3, r4, r5, pc}
 3777              	.LVL326:
 3778              	.L357:
 3779              	.LBB196:
 3780              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3781              		.loc 2 195 0
 3782              		.syntax unified
 3783              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3784 0062 4FF05003 			mov r3, #80												
 3785 0066 83F31188 		msr basepri, r3											
 3786 006a BFF36F8F 		isb														
 3787 006e BFF34F8F 		dsb														
 3788              	
 3789              	@ 0 "" 2
 3790              	.LVL327:
 3791              		.thumb
 3792              		.syntax unified
 3793              	.L353:
 3794 0072 FEE7     		b	.L353
 3795              	.L359:
 3796              		.align	2
 3797              	.L358:
 3798 0074 00000000 		.word	.LANCHOR16
 3799 0078 00000000 		.word	.LANCHOR13
 3800 007c 00000000 		.word	.LANCHOR4
 3801 0080 00000000 		.word	.LANCHOR10
 3802 0084 00000000 		.word	.LANCHOR19
 3803              	.LBE197:
 3804              	.LBE196:
 3805              		.cfi_endproc
 3806              	.LFE34:
 3808              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3809              		.align	1
 3810              		.global	vTaskSetTimeOutState
 3811              		.syntax unified
 3812              		.thumb
 3813              		.thumb_func
 3814              		.fpu fpv4-sp-d16
 3816              	vTaskSetTimeOutState:
 3817              	.LFB35:
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3818              		.loc 1 3081 0
 3819              		.cfi_startproc
 3820              		@ args = 0, pretend = 0, frame = 0
 3821              		@ frame_needed = 0, uses_anonymous_args = 0
 3822              	.LVL328:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3823              		.loc 1 3082 0
 3824 0000 40B9     		cbnz	r0, .L361
 3825              	.LBB198:
ARM GAS  /tmp/ccv30Qft.s 			page 167


 3826              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3827              		.loc 2 195 0
 3828              		.syntax unified
 3829              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3830 0002 4FF05003 			mov r3, #80												
 3831 0006 83F31188 		msr basepri, r3											
 3832 000a BFF36F8F 		isb														
 3833 000e BFF34F8F 		dsb														
 3834              	
 3835              	@ 0 "" 2
 3836              	.LVL329:
 3837              		.thumb
 3838              		.syntax unified
 3839              	.L362:
 3840 0012 FEE7     		b	.L362
 3841              	.L361:
 3842              	.LBE199:
 3843              	.LBE198:
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3844              		.loc 1 3081 0
 3845 0014 10B5     		push	{r4, lr}
 3846              	.LCFI41:
 3847              		.cfi_def_cfa_offset 8
 3848              		.cfi_offset 4, -8
 3849              		.cfi_offset 14, -4
 3850 0016 0446     		mov	r4, r0
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3851              		.loc 1 3083 0
 3852 0018 FFF7FEFF 		bl	vPortEnterCritical
 3853              	.LVL330:
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3854              		.loc 1 3085 0
 3855 001c 044B     		ldr	r3, .L365
 3856 001e 1B68     		ldr	r3, [r3]
 3857 0020 2360     		str	r3, [r4]
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3858              		.loc 1 3086 0
 3859 0022 044B     		ldr	r3, .L365+4
 3860 0024 1B68     		ldr	r3, [r3]
 3861 0026 6360     		str	r3, [r4, #4]
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3862              		.loc 1 3088 0
 3863 0028 FFF7FEFF 		bl	vPortExitCritical
 3864              	.LVL331:
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3865              		.loc 1 3089 0
 3866 002c 10BD     		pop	{r4, pc}
 3867              	.LVL332:
 3868              	.L366:
 3869 002e 00BF     		.align	2
 3870              	.L365:
 3871 0030 00000000 		.word	.LANCHOR17
 3872 0034 00000000 		.word	.LANCHOR15
 3873              		.cfi_endproc
 3874              	.LFE35:
 3876              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
ARM GAS  /tmp/ccv30Qft.s 			page 168


 3877              		.align	1
 3878              		.global	vTaskInternalSetTimeOutState
 3879              		.syntax unified
 3880              		.thumb
 3881              		.thumb_func
 3882              		.fpu fpv4-sp-d16
 3884              	vTaskInternalSetTimeOutState:
 3885              	.LFB36:
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3886              		.loc 1 3093 0
 3887              		.cfi_startproc
 3888              		@ args = 0, pretend = 0, frame = 0
 3889              		@ frame_needed = 0, uses_anonymous_args = 0
 3890              		@ link register save eliminated.
 3891              	.LVL333:
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3892              		.loc 1 3095 0
 3893 0000 034B     		ldr	r3, .L368
 3894 0002 1B68     		ldr	r3, [r3]
 3895 0004 0360     		str	r3, [r0]
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3896              		.loc 1 3096 0
 3897 0006 034B     		ldr	r3, .L368+4
 3898 0008 1B68     		ldr	r3, [r3]
 3899 000a 4360     		str	r3, [r0, #4]
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3900              		.loc 1 3097 0
 3901 000c 7047     		bx	lr
 3902              	.L369:
 3903 000e 00BF     		.align	2
 3904              	.L368:
 3905 0010 00000000 		.word	.LANCHOR17
 3906 0014 00000000 		.word	.LANCHOR15
 3907              		.cfi_endproc
 3908              	.LFE36:
 3910              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3911              		.align	1
 3912              		.global	xTaskCheckForTimeOut
 3913              		.syntax unified
 3914              		.thumb
 3915              		.thumb_func
 3916              		.fpu fpv4-sp-d16
 3918              	xTaskCheckForTimeOut:
 3919              	.LFB37:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3920              		.loc 1 3101 0
 3921              		.cfi_startproc
 3922              		@ args = 0, pretend = 0, frame = 0
 3923              		@ frame_needed = 0, uses_anonymous_args = 0
 3924              	.LVL334:
 3925 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3926              	.LCFI42:
 3927              		.cfi_def_cfa_offset 24
 3928              		.cfi_offset 3, -24
 3929              		.cfi_offset 4, -20
 3930              		.cfi_offset 5, -16
 3931              		.cfi_offset 6, -12
ARM GAS  /tmp/ccv30Qft.s 			page 169


 3932              		.cfi_offset 7, -8
 3933              		.cfi_offset 14, -4
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3934              		.loc 1 3104 0
 3935 0002 50B1     		cbz	r0, .L381
 3936 0004 0546     		mov	r5, r0
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3937              		.loc 1 3105 0
 3938 0006 89B9     		cbnz	r1, .L373
 3939              	.LBB200:
 3940              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3941              		.loc 2 195 0
 3942              		.syntax unified
 3943              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3944 0008 4FF05003 			mov r3, #80												
 3945 000c 83F31188 		msr basepri, r3											
 3946 0010 BFF36F8F 		isb														
 3947 0014 BFF34F8F 		dsb														
 3948              	
 3949              	@ 0 "" 2
 3950              	.LVL335:
 3951              		.thumb
 3952              		.syntax unified
 3953              	.L374:
 3954 0018 FEE7     		b	.L374
 3955              	.L381:
 3956              	.LBE201:
 3957              	.LBE200:
 3958              	.LBB202:
 3959              	.LBB203:
 3960              		.syntax unified
 3961              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3962 001a 4FF05003 			mov r3, #80												
 3963 001e 83F31188 		msr basepri, r3											
 3964 0022 BFF36F8F 		isb														
 3965 0026 BFF34F8F 		dsb														
 3966              	
 3967              	@ 0 "" 2
 3968              	.LVL336:
 3969              		.thumb
 3970              		.syntax unified
 3971              	.L372:
 3972 002a FEE7     		b	.L372
 3973              	.L373:
 3974 002c 0C46     		mov	r4, r1
 3975              	.LBE203:
 3976              	.LBE202:
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3977              		.loc 1 3107 0
 3978 002e FFF7FEFF 		bl	vPortEnterCritical
 3979              	.LVL337:
 3980              	.LBB204:
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3981              		.loc 1 3110 0
 3982 0032 114B     		ldr	r3, .L383
 3983 0034 1968     		ldr	r1, [r3]
ARM GAS  /tmp/ccv30Qft.s 			page 170


 3984              	.LVL338:
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3985              		.loc 1 3111 0
 3986 0036 6868     		ldr	r0, [r5, #4]
 3987 0038 0A1A     		subs	r2, r1, r0
 3988              	.LVL339:
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3989              		.loc 1 3125 0
 3990 003a 2368     		ldr	r3, [r4]
 3991 003c B3F1FF3F 		cmp	r3, #-1
 3992 0040 16D0     		beq	.L378
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3993              		.loc 1 3135 0
 3994 0042 2F68     		ldr	r7, [r5]
 3995 0044 0D4E     		ldr	r6, .L383+4
 3996 0046 3668     		ldr	r6, [r6]
 3997 0048 B742     		cmp	r7, r6
 3998 004a 01D0     		beq	.L376
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3999              		.loc 1 3135 0 is_stmt 0 discriminator 1
 4000 004c 8842     		cmp	r0, r1
 4001 004e 11D9     		bls	.L379
 4002              	.L376:
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4003              		.loc 1 3144 0 is_stmt 1
 4004 0050 9342     		cmp	r3, r2
 4005 0052 03D8     		bhi	.L382
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4006              		.loc 1 3153 0
 4007 0054 0023     		movs	r3, #0
 4008 0056 2360     		str	r3, [r4]
 4009              	.LVL340:
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4010              		.loc 1 3154 0
 4011 0058 0124     		movs	r4, #1
 4012              	.LVL341:
 4013 005a 05E0     		b	.L375
 4014              	.LVL342:
 4015              	.L382:
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4016              		.loc 1 3147 0
 4017 005c 9B1A     		subs	r3, r3, r2
 4018 005e 2360     		str	r3, [r4]
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4019              		.loc 1 3148 0
 4020 0060 2846     		mov	r0, r5
 4021 0062 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 4022              	.LVL343:
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4023              		.loc 1 3149 0
 4024 0066 0024     		movs	r4, #0
 4025              	.LVL344:
 4026              	.L375:
 4027              	.LBE204:
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4028              		.loc 1 3157 0
 4029 0068 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccv30Qft.s 			page 171


 4030              	.LVL345:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4031              		.loc 1 3160 0
 4032 006c 2046     		mov	r0, r4
 4033 006e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4034              	.LVL346:
 4035              	.L378:
 4036              	.LBB205:
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4037              		.loc 1 3130 0
 4038 0070 0024     		movs	r4, #0
 4039              	.LVL347:
 4040 0072 F9E7     		b	.L375
 4041              	.LVL348:
 4042              	.L379:
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4043              		.loc 1 3142 0
 4044 0074 0124     		movs	r4, #1
 4045              	.LVL349:
 4046 0076 F7E7     		b	.L375
 4047              	.L384:
 4048              		.align	2
 4049              	.L383:
 4050 0078 00000000 		.word	.LANCHOR15
 4051 007c 00000000 		.word	.LANCHOR17
 4052              	.LBE205:
 4053              		.cfi_endproc
 4054              	.LFE37:
 4056              		.section	.text.vTaskMissedYield,"ax",%progbits
 4057              		.align	1
 4058              		.global	vTaskMissedYield
 4059              		.syntax unified
 4060              		.thumb
 4061              		.thumb_func
 4062              		.fpu fpv4-sp-d16
 4064              	vTaskMissedYield:
 4065              	.LFB38:
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4066              		.loc 1 3164 0
 4067              		.cfi_startproc
 4068              		@ args = 0, pretend = 0, frame = 0
 4069              		@ frame_needed = 0, uses_anonymous_args = 0
 4070              		@ link register save eliminated.
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4071              		.loc 1 3165 0
 4072 0000 014B     		ldr	r3, .L386
 4073 0002 0122     		movs	r2, #1
 4074 0004 1A60     		str	r2, [r3]
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4075              		.loc 1 3166 0
 4076 0006 7047     		bx	lr
 4077              	.L387:
 4078              		.align	2
 4079              	.L386:
 4080 0008 00000000 		.word	.LANCHOR19
 4081              		.cfi_endproc
 4082              	.LFE38:
ARM GAS  /tmp/ccv30Qft.s 			page 172


 4084              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4085              		.align	1
 4086              		.global	uxTaskGetTaskNumber
 4087              		.syntax unified
 4088              		.thumb
 4089              		.thumb_func
 4090              		.fpu fpv4-sp-d16
 4092              	uxTaskGetTaskNumber:
 4093              	.LFB39:
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 4094              		.loc 1 3172 0
 4095              		.cfi_startproc
 4096              		@ args = 0, pretend = 0, frame = 0
 4097              		@ frame_needed = 0, uses_anonymous_args = 0
 4098              		@ link register save eliminated.
 4099              	.LVL350:
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4100              		.loc 1 3176 0
 4101 0000 08B1     		cbz	r0, .L390
 4102              	.LVL351:
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4103              		.loc 1 3179 0
 4104 0002 806C     		ldr	r0, [r0, #72]
 4105              	.LVL352:
 4106 0004 7047     		bx	lr
 4107              	.LVL353:
 4108              	.L390:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4109              		.loc 1 3183 0
 4110 0006 0020     		movs	r0, #0
 4111              	.LVL354:
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4112              		.loc 1 3187 0
 4113 0008 7047     		bx	lr
 4114              		.cfi_endproc
 4115              	.LFE39:
 4117              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4118              		.align	1
 4119              		.global	vTaskSetTaskNumber
 4120              		.syntax unified
 4121              		.thumb
 4122              		.thumb_func
 4123              		.fpu fpv4-sp-d16
 4125              	vTaskSetTaskNumber:
 4126              	.LFB40:
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4127              		.loc 1 3195 0
 4128              		.cfi_startproc
 4129              		@ args = 0, pretend = 0, frame = 0
 4130              		@ frame_needed = 0, uses_anonymous_args = 0
 4131              		@ link register save eliminated.
 4132              	.LVL355:
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4133              		.loc 1 3198 0
 4134 0000 00B1     		cbz	r0, .L391
 4135              	.LVL356:
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccv30Qft.s 			page 173


 4136              		.loc 1 3201 0
 4137 0002 8164     		str	r1, [r0, #72]
 4138              	.LVL357:
 4139              	.L391:
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4140              		.loc 1 3203 0
 4141 0004 7047     		bx	lr
 4142              		.cfi_endproc
 4143              	.LFE40:
 4145              		.section	.text.vTaskGetInfo,"ax",%progbits
 4146              		.align	1
 4147              		.global	vTaskGetInfo
 4148              		.syntax unified
 4149              		.thumb
 4150              		.thumb_func
 4151              		.fpu fpv4-sp-d16
 4153              	vTaskGetInfo:
 4154              	.LFB44:
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4155              		.loc 1 3494 0
 4156              		.cfi_startproc
 4157              		@ args = 0, pretend = 0, frame = 0
 4158              		@ frame_needed = 0, uses_anonymous_args = 0
 4159              	.LVL358:
 4160 0000 70B5     		push	{r4, r5, r6, lr}
 4161              	.LCFI43:
 4162              		.cfi_def_cfa_offset 16
 4163              		.cfi_offset 4, -16
 4164              		.cfi_offset 5, -12
 4165              		.cfi_offset 6, -8
 4166              		.cfi_offset 14, -4
 4167 0002 0C46     		mov	r4, r1
 4168 0004 1646     		mov	r6, r2
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4169              		.loc 1 3498 0
 4170 0006 0546     		mov	r5, r0
 4171 0008 D0B1     		cbz	r0, .L402
 4172              	.LVL359:
 4173              	.L394:
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4174              		.loc 1 3500 0 discriminator 4
 4175 000a 2560     		str	r5, [r4]
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4176              		.loc 1 3501 0 discriminator 4
 4177 000c 05F13402 		add	r2, r5, #52
 4178 0010 6260     		str	r2, [r4, #4]
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4179              		.loc 1 3502 0 discriminator 4
 4180 0012 EA6A     		ldr	r2, [r5, #44]
 4181 0014 2261     		str	r2, [r4, #16]
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4182              		.loc 1 3503 0 discriminator 4
 4183 0016 2A6B     		ldr	r2, [r5, #48]
 4184 0018 E261     		str	r2, [r4, #28]
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4185              		.loc 1 3504 0 discriminator 4
 4186 001a 6A6C     		ldr	r2, [r5, #68]
ARM GAS  /tmp/ccv30Qft.s 			page 174


 4187 001c A260     		str	r2, [r4, #8]
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4188              		.loc 1 3508 0 discriminator 4
 4189 001e EA6C     		ldr	r2, [r5, #76]
 4190 0020 6261     		str	r2, [r4, #20]
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4191              		.loc 1 3522 0 discriminator 4
 4192 0022 0022     		movs	r2, #0
 4193 0024 A261     		str	r2, [r4, #24]
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4194              		.loc 1 3529 0 discriminator 4
 4195 0026 052B     		cmp	r3, #5
 4196 0028 19D0     		beq	.L395
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4197              		.loc 1 3531 0
 4198 002a 124A     		ldr	r2, .L406
 4199 002c 1268     		ldr	r2, [r2]
 4200 002e AA42     		cmp	r2, r5
 4201 0030 09D0     		beq	.L403
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4202              		.loc 1 3537 0
 4203 0032 2373     		strb	r3, [r4, #12]
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4204              		.loc 1 3544 0
 4205 0034 032B     		cmp	r3, #3
 4206 0036 09D0     		beq	.L404
 4207              	.LVL360:
 4208              	.L397:
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4209              		.loc 1 3566 0
 4210 0038 B6B9     		cbnz	r6, .L405
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4211              		.loc 1 3580 0
 4212 003a 0023     		movs	r3, #0
 4213 003c 2384     		strh	r3, [r4, #32]	@ movhi
 4214              	.L393:
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4215              		.loc 1 3582 0
 4216 003e 70BD     		pop	{r4, r5, r6, pc}
 4217              	.LVL361:
 4218              	.L402:
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4219              		.loc 1 3498 0 discriminator 1
 4220 0040 0C4A     		ldr	r2, .L406
 4221              	.LVL362:
 4222 0042 1568     		ldr	r5, [r2]
 4223              	.LVL363:
 4224 0044 E1E7     		b	.L394
 4225              	.LVL364:
 4226              	.L403:
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4227              		.loc 1 3533 0
 4228 0046 0023     		movs	r3, #0
 4229              	.LVL365:
 4230 0048 2373     		strb	r3, [r4, #12]
 4231 004a F5E7     		b	.L397
 4232              	.LVL366:
ARM GAS  /tmp/ccv30Qft.s 			page 175


 4233              	.L404:
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4234              		.loc 1 3546 0
 4235 004c FFF7FEFF 		bl	vTaskSuspendAll
 4236              	.LVL367:
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 4237              		.loc 1 3548 0
 4238 0050 AB6A     		ldr	r3, [r5, #40]
 4239 0052 0BB1     		cbz	r3, .L398
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 4240              		.loc 1 3550 0
 4241 0054 0223     		movs	r3, #2
 4242 0056 2373     		strb	r3, [r4, #12]
 4243              	.L398:
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4244              		.loc 1 3553 0
 4245 0058 FFF7FEFF 		bl	xTaskResumeAll
 4246              	.LVL368:
 4247 005c ECE7     		b	.L397
 4248              	.LVL369:
 4249              	.L395:
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4250              		.loc 1 3561 0
 4251 005e 2846     		mov	r0, r5
 4252 0060 FFF7FEFF 		bl	eTaskGetState
 4253              	.LVL370:
 4254 0064 2073     		strb	r0, [r4, #12]
 4255 0066 E7E7     		b	.L397
 4256              	.L405:
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4257              		.loc 1 3574 0
 4258 0068 286B     		ldr	r0, [r5, #48]
 4259 006a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4260              	.LVL371:
 4261 006e 2084     		strh	r0, [r4, #32]	@ movhi
 4262 0070 E5E7     		b	.L393
 4263              	.L407:
 4264 0072 00BF     		.align	2
 4265              	.L406:
 4266 0074 00000000 		.word	.LANCHOR10
 4267              		.cfi_endproc
 4268              	.LFE44:
 4270              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4271              		.align	1
 4272              		.syntax unified
 4273              		.thumb
 4274              		.thumb_func
 4275              		.fpu fpv4-sp-d16
 4277              	prvListTasksWithinSingleList:
 4278              	.LFB45:
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4279              		.loc 1 3590 0
 4280              		.cfi_startproc
 4281              		@ args = 0, pretend = 0, frame = 0
 4282              		@ frame_needed = 0, uses_anonymous_args = 0
 4283              	.LVL372:
 4284 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
ARM GAS  /tmp/ccv30Qft.s 			page 176


 4285              	.LCFI44:
 4286              		.cfi_def_cfa_offset 32
 4287              		.cfi_offset 4, -32
 4288              		.cfi_offset 5, -28
 4289              		.cfi_offset 6, -24
 4290              		.cfi_offset 7, -20
 4291              		.cfi_offset 8, -16
 4292              		.cfi_offset 9, -12
 4293              		.cfi_offset 10, -8
 4294              		.cfi_offset 14, -4
 4295              	.LVL373:
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4296              		.loc 1 3594 0
 4297 0004 0B68     		ldr	r3, [r1]
 4298 0006 3BB3     		cbz	r3, .L413
 4299              	.LVL374:
 4300              	.LBB206:
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4301              		.loc 1 3596 0
 4302 0008 4B68     		ldr	r3, [r1, #4]
 4303 000a 5B68     		ldr	r3, [r3, #4]
 4304 000c 4B60     		str	r3, [r1, #4]
 4305 000e 01F10809 		add	r9, r1, #8
 4306 0012 4B45     		cmp	r3, r9
 4307 0014 07D0     		beq	.L415
 4308              	.L410:
 4309 0016 9046     		mov	r8, r2
 4310 0018 0C46     		mov	r4, r1
 4311 001a 0746     		mov	r7, r0
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4312              		.loc 1 3596 0 is_stmt 0 discriminator 3
 4313 001c 4B68     		ldr	r3, [r1, #4]
 4314 001e D3F80CA0 		ldr	r10, [r3, #12]
 4315              	.LVL375:
 4316              	.LBE206:
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4317              		.loc 1 3592 0 is_stmt 1 discriminator 3
 4318 0022 0025     		movs	r5, #0
 4319 0024 10E0     		b	.L412
 4320              	.LVL376:
 4321              	.L415:
 4322              	.LBB207:
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4323              		.loc 1 3596 0 discriminator 1
 4324 0026 5B68     		ldr	r3, [r3, #4]
 4325 0028 4B60     		str	r3, [r1, #4]
 4326 002a F4E7     		b	.L410
 4327              	.LVL377:
 4328              	.L411:
 4329              	.LBE207:
 4330              	.LBB208:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4331              		.loc 1 3604 0 discriminator 3
 4332 002c 6368     		ldr	r3, [r4, #4]
 4333 002e DE68     		ldr	r6, [r3, #12]
 4334              	.LVL378:
 4335              	.LBE208:
ARM GAS  /tmp/ccv30Qft.s 			page 177


3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 4336              		.loc 1 3605 0 discriminator 3
 4337 0030 05EBC503 		add	r3, r5, r5, lsl #3
 4338 0034 9900     		lsls	r1, r3, #2
 4339 0036 4346     		mov	r3, r8
 4340 0038 0122     		movs	r2, #1
 4341 003a 3944     		add	r1, r1, r7
 4342 003c 3046     		mov	r0, r6
 4343 003e FFF7FEFF 		bl	vTaskGetInfo
 4344              	.LVL379:
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4345              		.loc 1 3606 0 discriminator 3
 4346 0042 0135     		adds	r5, r5, #1
 4347              	.LVL380:
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4348              		.loc 1 3607 0 discriminator 3
 4349 0044 B245     		cmp	r10, r6
 4350 0046 08D0     		beq	.L408
 4351              	.LVL381:
 4352              	.L412:
 4353              	.LBB209:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4354              		.loc 1 3604 0
 4355 0048 6368     		ldr	r3, [r4, #4]
 4356 004a 5B68     		ldr	r3, [r3, #4]
 4357 004c 6360     		str	r3, [r4, #4]
 4358 004e 9945     		cmp	r9, r3
 4359 0050 ECD1     		bne	.L411
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4360              		.loc 1 3604 0 is_stmt 0 discriminator 1
 4361 0052 5B68     		ldr	r3, [r3, #4]
 4362 0054 6360     		str	r3, [r4, #4]
 4363 0056 E9E7     		b	.L411
 4364              	.LVL382:
 4365              	.L413:
 4366              	.LBE209:
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4367              		.loc 1 3592 0 is_stmt 1
 4368 0058 0025     		movs	r5, #0
 4369              	.LVL383:
 4370              	.L408:
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4371              		.loc 1 3615 0
 4372 005a 2846     		mov	r0, r5
 4373 005c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4374              		.cfi_endproc
 4375              	.LFE45:
 4377              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4378              		.align	1
 4379              		.global	uxTaskGetSystemState
 4380              		.syntax unified
 4381              		.thumb
 4382              		.thumb_func
 4383              		.fpu fpv4-sp-d16
 4385              	uxTaskGetSystemState:
 4386              	.LFB27:
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
ARM GAS  /tmp/ccv30Qft.s 			page 178


 4387              		.loc 1 2404 0
 4388              		.cfi_startproc
 4389              		@ args = 0, pretend = 0, frame = 0
 4390              		@ frame_needed = 0, uses_anonymous_args = 0
 4391              	.LVL384:
 4392 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4393              	.LCFI45:
 4394              		.cfi_def_cfa_offset 24
 4395              		.cfi_offset 3, -24
 4396              		.cfi_offset 4, -20
 4397              		.cfi_offset 5, -16
 4398              		.cfi_offset 6, -12
 4399              		.cfi_offset 7, -8
 4400              		.cfi_offset 14, -4
 4401 0002 0746     		mov	r7, r0
 4402 0004 0C46     		mov	r4, r1
 4403 0006 1646     		mov	r6, r2
 4404              	.LVL385:
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4405              		.loc 1 2407 0
 4406 0008 FFF7FEFF 		bl	vTaskSuspendAll
 4407              	.LVL386:
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4408              		.loc 1 2410 0
 4409 000c 224B     		ldr	r3, .L421
 4410 000e 1B68     		ldr	r3, [r3]
 4411 0010 A342     		cmp	r3, r4
 4412 0012 3BD8     		bhi	.L419
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4413              		.loc 1 2405 0
 4414 0014 3824     		movs	r4, #56
 4415              	.LVL387:
 4416 0016 0025     		movs	r5, #0
 4417              	.LVL388:
 4418              	.L418:
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4419              		.loc 1 2416 0 discriminator 1
 4420 0018 013C     		subs	r4, r4, #1
 4421              	.LVL389:
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4422              		.loc 1 2417 0 discriminator 1
 4423 001a 05EBC503 		add	r3, r5, r5, lsl #3
 4424 001e 9800     		lsls	r0, r3, #2
 4425 0020 04EB8402 		add	r2, r4, r4, lsl #2
 4426 0024 9300     		lsls	r3, r2, #2
 4427 0026 0122     		movs	r2, #1
 4428 0028 1C49     		ldr	r1, .L421+4
 4429 002a 1944     		add	r1, r1, r3
 4430 002c 3844     		add	r0, r0, r7
 4431 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4432              	.LVL390:
 4433 0032 0544     		add	r5, r5, r0
 4434              	.LVL391:
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4435              		.loc 1 2419 0 discriminator 1
 4436 0034 002C     		cmp	r4, #0
 4437 0036 EFD1     		bne	.L418
ARM GAS  /tmp/ccv30Qft.s 			page 179


2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4438              		.loc 1 2423 0
 4439 0038 05EBC503 		add	r3, r5, r5, lsl #3
 4440 003c 9800     		lsls	r0, r3, #2
 4441 003e 184B     		ldr	r3, .L421+8
 4442 0040 1968     		ldr	r1, [r3]
 4443 0042 0222     		movs	r2, #2
 4444 0044 3844     		add	r0, r0, r7
 4445 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4446              	.LVL392:
 4447 004a 2C18     		adds	r4, r5, r0
 4448              	.LVL393:
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4449              		.loc 1 2424 0
 4450 004c 04EBC403 		add	r3, r4, r4, lsl #3
 4451 0050 9800     		lsls	r0, r3, #2
 4452 0052 144B     		ldr	r3, .L421+12
 4453 0054 1968     		ldr	r1, [r3]
 4454 0056 0222     		movs	r2, #2
 4455 0058 3844     		add	r0, r0, r7
 4456 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 4457              	.LVL394:
 4458 005e 0444     		add	r4, r4, r0
 4459              	.LVL395:
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4460              		.loc 1 2430 0
 4461 0060 04EBC403 		add	r3, r4, r4, lsl #3
 4462 0064 9800     		lsls	r0, r3, #2
 4463 0066 0422     		movs	r2, #4
 4464 0068 0F49     		ldr	r1, .L421+16
 4465 006a 3844     		add	r0, r0, r7
 4466 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 4467              	.LVL396:
 4468 0070 0444     		add	r4, r4, r0
 4469              	.LVL397:
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4470              		.loc 1 2438 0
 4471 0072 04EBC403 		add	r3, r4, r4, lsl #3
 4472 0076 9800     		lsls	r0, r3, #2
 4473 0078 0322     		movs	r2, #3
 4474 007a 0C49     		ldr	r1, .L421+20
 4475 007c 3844     		add	r0, r0, r7
 4476 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4477              	.LVL398:
 4478 0082 0444     		add	r4, r4, r0
 4479              	.LVL399:
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4480              		.loc 1 2455 0
 4481 0084 1EB1     		cbz	r6, .L417
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4482              		.loc 1 2457 0
 4483 0086 0023     		movs	r3, #0
 4484 0088 3360     		str	r3, [r6]
 4485 008a 00E0     		b	.L417
 4486              	.LVL400:
 4487              	.L419:
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv30Qft.s 			page 180


 4488              		.loc 1 2405 0
 4489 008c 0024     		movs	r4, #0
 4490              	.LVL401:
 4491              	.L417:
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4492              		.loc 1 2467 0
 4493 008e FFF7FEFF 		bl	xTaskResumeAll
 4494              	.LVL402:
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4495              		.loc 1 2470 0
 4496 0092 2046     		mov	r0, r4
 4497 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4498              	.LVL403:
 4499              	.L422:
 4500 0096 00BF     		.align	2
 4501              	.L421:
 4502 0098 00000000 		.word	.LANCHOR9
 4503 009c 00000000 		.word	.LANCHOR4
 4504 00a0 00000000 		.word	.LANCHOR2
 4505 00a4 00000000 		.word	.LANCHOR8
 4506 00a8 00000000 		.word	.LANCHOR7
 4507 00ac 00000000 		.word	.LANCHOR0
 4508              		.cfi_endproc
 4509              	.LFE27:
 4511              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4512              		.align	1
 4513              		.global	uxTaskGetStackHighWaterMark
 4514              		.syntax unified
 4515              		.thumb
 4516              		.thumb_func
 4517              		.fpu fpv4-sp-d16
 4519              	uxTaskGetStackHighWaterMark:
 4520              	.LFB47:
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4521              		.loc 1 3643 0
 4522              		.cfi_startproc
 4523              		@ args = 0, pretend = 0, frame = 0
 4524              		@ frame_needed = 0, uses_anonymous_args = 0
 4525              	.LVL404:
 4526 0000 08B5     		push	{r3, lr}
 4527              	.LCFI46:
 4528              		.cfi_def_cfa_offset 8
 4529              		.cfi_offset 3, -8
 4530              		.cfi_offset 14, -4
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4531              		.loc 1 3648 0
 4532 0002 0346     		mov	r3, r0
 4533 0004 18B1     		cbz	r0, .L426
 4534              	.LVL405:
 4535              	.L424:
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4536              		.loc 1 3660 0 discriminator 4
 4537 0006 186B     		ldr	r0, [r3, #48]
 4538 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4539              	.LVL406:
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4540              		.loc 1 3663 0 discriminator 4
ARM GAS  /tmp/ccv30Qft.s 			page 181


 4541 000c 08BD     		pop	{r3, pc}
 4542              	.LVL407:
 4543              	.L426:
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4544              		.loc 1 3648 0 discriminator 1
 4545 000e 014B     		ldr	r3, .L427
 4546 0010 1B68     		ldr	r3, [r3]
 4547              	.LVL408:
 4548 0012 F8E7     		b	.L424
 4549              	.L428:
 4550              		.align	2
 4551              	.L427:
 4552 0014 00000000 		.word	.LANCHOR10
 4553              		.cfi_endproc
 4554              	.LFE47:
 4556              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4557              		.align	1
 4558              		.global	xTaskGetCurrentTaskHandle
 4559              		.syntax unified
 4560              		.thumb
 4561              		.thumb_func
 4562              		.fpu fpv4-sp-d16
 4564              	xTaskGetCurrentTaskHandle:
 4565              	.LFB50:
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4566              		.loc 1 3751 0
 4567              		.cfi_startproc
 4568              		@ args = 0, pretend = 0, frame = 0
 4569              		@ frame_needed = 0, uses_anonymous_args = 0
 4570              		@ link register save eliminated.
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4571              		.loc 1 3757 0
 4572 0000 014B     		ldr	r3, .L430
 4573 0002 1868     		ldr	r0, [r3]
 4574              	.LVL409:
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4575              		.loc 1 3760 0
 4576 0004 7047     		bx	lr
 4577              	.L431:
 4578 0006 00BF     		.align	2
 4579              	.L430:
 4580 0008 00000000 		.word	.LANCHOR10
 4581              		.cfi_endproc
 4582              	.LFE50:
 4584              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4585              		.align	1
 4586              		.global	xTaskGetSchedulerState
 4587              		.syntax unified
 4588              		.thumb
 4589              		.thumb_func
 4590              		.fpu fpv4-sp-d16
 4592              	xTaskGetSchedulerState:
 4593              	.LFB51:
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4594              		.loc 1 3768 0
 4595              		.cfi_startproc
 4596              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccv30Qft.s 			page 182


 4597              		@ frame_needed = 0, uses_anonymous_args = 0
 4598              		@ link register save eliminated.
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4599              		.loc 1 3771 0
 4600 0000 054B     		ldr	r3, .L437
 4601 0002 1B68     		ldr	r3, [r3]
 4602 0004 33B1     		cbz	r3, .L434
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4603              		.loc 1 3777 0
 4604 0006 054B     		ldr	r3, .L437+4
 4605 0008 1B68     		ldr	r3, [r3]
 4606 000a 0BB1     		cbz	r3, .L436
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4607              		.loc 1 3783 0
 4608 000c 0020     		movs	r0, #0
 4609              	.LVL410:
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4610              		.loc 1 3788 0
 4611 000e 7047     		bx	lr
 4612              	.LVL411:
 4613              	.L436:
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4614              		.loc 1 3779 0
 4615 0010 0220     		movs	r0, #2
 4616 0012 7047     		bx	lr
 4617              	.L434:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4618              		.loc 1 3773 0
 4619 0014 0120     		movs	r0, #1
 4620 0016 7047     		bx	lr
 4621              	.L438:
 4622              		.align	2
 4623              	.L437:
 4624 0018 00000000 		.word	.LANCHOR11
 4625 001c 00000000 		.word	.LANCHOR16
 4626              		.cfi_endproc
 4627              	.LFE51:
 4629              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4630              		.align	1
 4631              		.global	xTaskPriorityInherit
 4632              		.syntax unified
 4633              		.thumb
 4634              		.thumb_func
 4635              		.fpu fpv4-sp-d16
 4637              	xTaskPriorityInherit:
 4638              	.LFB52:
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 4639              		.loc 1 3796 0
 4640              		.cfi_startproc
 4641              		@ args = 0, pretend = 0, frame = 0
 4642              		@ frame_needed = 0, uses_anonymous_args = 0
 4643              	.LVL412:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4644              		.loc 1 3803 0
 4645 0000 0028     		cmp	r0, #0
 4646 0002 40D0     		beq	.L446
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
ARM GAS  /tmp/ccv30Qft.s 			page 183


 4647              		.loc 1 3796 0
 4648 0004 38B5     		push	{r3, r4, r5, lr}
 4649              	.LCFI47:
 4650              		.cfi_def_cfa_offset 16
 4651              		.cfi_offset 3, -16
 4652              		.cfi_offset 4, -12
 4653              		.cfi_offset 5, -8
 4654              		.cfi_offset 14, -4
 4655 0006 0546     		mov	r5, r0
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4656              		.loc 1 3808 0
 4657 0008 C26A     		ldr	r2, [r0, #44]
 4658 000a 2049     		ldr	r1, .L454
 4659 000c 0968     		ldr	r1, [r1]
 4660 000e C96A     		ldr	r1, [r1, #44]
 4661 0010 8A42     		cmp	r2, r1
 4662 0012 2ED2     		bcs	.L441
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4663              		.loc 1 3813 0
 4664 0014 8169     		ldr	r1, [r0, #24]
 4665 0016 0029     		cmp	r1, #0
 4666 0018 05DB     		blt	.L442
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4667              		.loc 1 3815 0
 4668 001a 1C49     		ldr	r1, .L454
 4669 001c 0968     		ldr	r1, [r1]
 4670 001e C96A     		ldr	r1, [r1, #44]
 4671 0020 C1F13801 		rsb	r1, r1, #56
 4672 0024 8161     		str	r1, [r0, #24]
 4673              	.L442:
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4674              		.loc 1 3824 0
 4675 0026 6869     		ldr	r0, [r5, #20]
 4676              	.LVL413:
 4677 0028 02EB8202 		add	r2, r2, r2, lsl #2
 4678 002c 9100     		lsls	r1, r2, #2
 4679 002e 184A     		ldr	r2, .L454+4
 4680 0030 0A44     		add	r2, r2, r1
 4681 0032 9042     		cmp	r0, r2
 4682 0034 05D0     		beq	.L452
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4683              		.loc 1 3842 0
 4684 0036 154A     		ldr	r2, .L454
 4685 0038 1268     		ldr	r2, [r2]
 4686 003a D26A     		ldr	r2, [r2, #44]
 4687 003c EA62     		str	r2, [r5, #44]
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4688              		.loc 1 3848 0
 4689 003e 0120     		movs	r0, #1
 4690              	.LVL414:
 4691              	.L439:
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4692              		.loc 1 3875 0
 4693 0040 38BD     		pop	{r3, r4, r5, pc}
 4694              	.LVL415:
 4695              	.L452:
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccv30Qft.s 			page 184


 4696              		.loc 1 3826 0
 4697 0042 2C1D     		adds	r4, r5, #4
 4698 0044 2046     		mov	r0, r4
 4699 0046 FFF7FEFF 		bl	uxListRemove
 4700              	.LVL416:
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4701              		.loc 1 3836 0
 4702 004a 104B     		ldr	r3, .L454
 4703 004c 1B68     		ldr	r3, [r3]
 4704 004e DB6A     		ldr	r3, [r3, #44]
 4705 0050 EB62     		str	r3, [r5, #44]
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4706              		.loc 1 3837 0
 4707 0052 104A     		ldr	r2, .L454+8
 4708 0054 1268     		ldr	r2, [r2]
 4709 0056 9342     		cmp	r3, r2
 4710 0058 01D9     		bls	.L445
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4711              		.loc 1 3837 0 is_stmt 0 discriminator 1
 4712 005a 0E4A     		ldr	r2, .L454+8
 4713 005c 1360     		str	r3, [r2]
 4714              	.L445:
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4715              		.loc 1 3837 0 discriminator 3
 4716 005e 03EB8303 		add	r3, r3, r3, lsl #2
 4717 0062 9A00     		lsls	r2, r3, #2
 4718 0064 2146     		mov	r1, r4
 4719 0066 0A48     		ldr	r0, .L454+4
 4720 0068 1044     		add	r0, r0, r2
 4721 006a FFF7FEFF 		bl	vListInsertEnd
 4722              	.LVL417:
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4723              		.loc 1 3848 0 is_stmt 1 discriminator 3
 4724 006e 0120     		movs	r0, #1
 4725 0070 E6E7     		b	.L439
 4726              	.LVL418:
 4727              	.L441:
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4728              		.loc 1 3852 0
 4729 0072 C26C     		ldr	r2, [r0, #76]
 4730 0074 054B     		ldr	r3, .L454
 4731 0076 1B68     		ldr	r3, [r3]
 4732 0078 DB6A     		ldr	r3, [r3, #44]
 4733 007a 9A42     		cmp	r2, r3
 4734 007c 01D2     		bcs	.L453
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4735              		.loc 1 3861 0
 4736 007e 0120     		movs	r0, #1
 4737              	.LVL419:
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4738              		.loc 1 3874 0
 4739 0080 DEE7     		b	.L439
 4740              	.LVL420:
 4741              	.L453:
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4742              		.loc 1 3798 0
 4743 0082 0020     		movs	r0, #0
ARM GAS  /tmp/ccv30Qft.s 			page 185


 4744              	.LVL421:
 4745 0084 DCE7     		b	.L439
 4746              	.LVL422:
 4747              	.L446:
 4748              	.LCFI48:
 4749              		.cfi_def_cfa_offset 0
 4750              		.cfi_restore 3
 4751              		.cfi_restore 4
 4752              		.cfi_restore 5
 4753              		.cfi_restore 14
 4754 0086 0020     		movs	r0, #0
 4755              	.LVL423:
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4756              		.loc 1 3875 0
 4757 0088 7047     		bx	lr
 4758              	.L455:
 4759 008a 00BF     		.align	2
 4760              	.L454:
 4761 008c 00000000 		.word	.LANCHOR10
 4762 0090 00000000 		.word	.LANCHOR4
 4763 0094 00000000 		.word	.LANCHOR13
 4764              		.cfi_endproc
 4765              	.LFE52:
 4767              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4768              		.align	1
 4769              		.global	xTaskPriorityDisinherit
 4770              		.syntax unified
 4771              		.thumb
 4772              		.thumb_func
 4773              		.fpu fpv4-sp-d16
 4775              	xTaskPriorityDisinherit:
 4776              	.LFB53:
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4777              		.loc 1 3883 0
 4778              		.cfi_startproc
 4779              		@ args = 0, pretend = 0, frame = 0
 4780              		@ frame_needed = 0, uses_anonymous_args = 0
 4781              	.LVL424:
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4782              		.loc 1 3887 0
 4783 0000 0028     		cmp	r0, #0
 4784 0002 38D0     		beq	.L463
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4785              		.loc 1 3883 0
 4786 0004 38B5     		push	{r3, r4, r5, lr}
 4787              	.LCFI49:
 4788              		.cfi_def_cfa_offset 16
 4789              		.cfi_offset 3, -16
 4790              		.cfi_offset 4, -12
 4791              		.cfi_offset 5, -8
 4792              		.cfi_offset 14, -4
 4793 0006 0446     		mov	r4, r0
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4794              		.loc 1 3893 0
 4795 0008 1E4A     		ldr	r2, .L470
 4796 000a 1268     		ldr	r2, [r2]
 4797 000c 8242     		cmp	r2, r0
ARM GAS  /tmp/ccv30Qft.s 			page 186


 4798 000e 08D0     		beq	.L458
 4799              	.LBB210:
 4800              	.LBB211:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4801              		.loc 2 195 0
 4802              		.syntax unified
 4803              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4804 0010 4FF05003 			mov r3, #80												
 4805 0014 83F31188 		msr basepri, r3											
 4806 0018 BFF36F8F 		isb														
 4807 001c BFF34F8F 		dsb														
 4808              	
 4809              	@ 0 "" 2
 4810              	.LVL425:
 4811              		.thumb
 4812              		.syntax unified
 4813              	.L459:
 4814 0020 FEE7     		b	.L459
 4815              	.L458:
 4816              	.LBE211:
 4817              	.LBE210:
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4818              		.loc 1 3894 0
 4819 0022 026D     		ldr	r2, [r0, #80]
 4820 0024 42B9     		cbnz	r2, .L460
 4821              	.LBB212:
 4822              	.LBB213:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4823              		.loc 2 195 0
 4824              		.syntax unified
 4825              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4826 0026 4FF05003 			mov r3, #80												
 4827 002a 83F31188 		msr basepri, r3											
 4828 002e BFF36F8F 		isb														
 4829 0032 BFF34F8F 		dsb														
 4830              	
 4831              	@ 0 "" 2
 4832              	.LVL426:
 4833              		.thumb
 4834              		.syntax unified
 4835              	.L461:
 4836 0036 FEE7     		b	.L461
 4837              	.L460:
 4838              	.LBE213:
 4839              	.LBE212:
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4840              		.loc 1 3895 0
 4841 0038 013A     		subs	r2, r2, #1
 4842 003a 0265     		str	r2, [r0, #80]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4843              		.loc 1 3899 0
 4844 003c C06A     		ldr	r0, [r0, #44]
 4845              	.LVL427:
 4846 003e E16C     		ldr	r1, [r4, #76]
 4847 0040 8842     		cmp	r0, r1
 4848 0042 1AD0     		beq	.L464
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccv30Qft.s 			page 187


 4849              		.loc 1 3902 0
 4850 0044 DAB9     		cbnz	r2, .L465
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4851              		.loc 1 3909 0
 4852 0046 251D     		adds	r5, r4, #4
 4853 0048 2846     		mov	r0, r5
 4854 004a FFF7FEFF 		bl	uxListRemove
 4855              	.LVL428:
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4856              		.loc 1 3921 0
 4857 004e E36C     		ldr	r3, [r4, #76]
 4858 0050 E362     		str	r3, [r4, #44]
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4859              		.loc 1 3926 0
 4860 0052 C3F13802 		rsb	r2, r3, #56
 4861 0056 A261     		str	r2, [r4, #24]
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4862              		.loc 1 3927 0
 4863 0058 0B4A     		ldr	r2, .L470+4
 4864 005a 1268     		ldr	r2, [r2]
 4865 005c 9342     		cmp	r3, r2
 4866 005e 01D9     		bls	.L462
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4867              		.loc 1 3927 0 is_stmt 0 discriminator 1
 4868 0060 094A     		ldr	r2, .L470+4
 4869 0062 1360     		str	r3, [r2]
 4870              	.L462:
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4871              		.loc 1 3927 0 discriminator 3
 4872 0064 2946     		mov	r1, r5
 4873 0066 094A     		ldr	r2, .L470+8
 4874 0068 1420     		movs	r0, #20
 4875 006a 00FB0320 		mla	r0, r0, r3, r2
 4876 006e FFF7FEFF 		bl	vListInsertEnd
 4877              	.LVL429:
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4878              		.loc 1 3937 0 is_stmt 1 discriminator 3
 4879 0072 0120     		movs	r0, #1
 4880              	.LVL430:
 4881              	.L456:
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4882              		.loc 1 3955 0
 4883 0074 38BD     		pop	{r3, r4, r5, pc}
 4884              	.LVL431:
 4885              	.L463:
 4886              	.LCFI50:
 4887              		.cfi_def_cfa_offset 0
 4888              		.cfi_restore 3
 4889              		.cfi_restore 4
 4890              		.cfi_restore 5
 4891              		.cfi_restore 14
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4892              		.loc 1 3885 0
 4893 0076 0020     		movs	r0, #0
 4894              	.LVL432:
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4895              		.loc 1 3955 0
ARM GAS  /tmp/ccv30Qft.s 			page 188


 4896 0078 7047     		bx	lr
 4897              	.LVL433:
 4898              	.L464:
 4899              	.LCFI51:
 4900              		.cfi_def_cfa_offset 16
 4901              		.cfi_offset 3, -16
 4902              		.cfi_offset 4, -12
 4903              		.cfi_offset 5, -8
 4904              		.cfi_offset 14, -4
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4905              		.loc 1 3885 0
 4906 007a 0020     		movs	r0, #0
 4907 007c FAE7     		b	.L456
 4908              	.L465:
 4909 007e 0020     		movs	r0, #0
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4910              		.loc 1 3954 0
 4911 0080 F8E7     		b	.L456
 4912              	.L471:
 4913 0082 00BF     		.align	2
 4914              	.L470:
 4915 0084 00000000 		.word	.LANCHOR10
 4916 0088 00000000 		.word	.LANCHOR13
 4917 008c 00000000 		.word	.LANCHOR4
 4918              		.cfi_endproc
 4919              	.LFE53:
 4921              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4922              		.align	1
 4923              		.global	vTaskPriorityDisinheritAfterTimeout
 4924              		.syntax unified
 4925              		.thumb
 4926              		.thumb_func
 4927              		.fpu fpv4-sp-d16
 4929              	vTaskPriorityDisinheritAfterTimeout:
 4930              	.LFB54:
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4931              		.loc 1 3963 0
 4932              		.cfi_startproc
 4933              		@ args = 0, pretend = 0, frame = 0
 4934              		@ frame_needed = 0, uses_anonymous_args = 0
 4935              	.LVL434:
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4936              		.loc 1 3968 0
 4937 0000 0028     		cmp	r0, #0
 4938 0002 45D0     		beq	.L482
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4939              		.loc 1 3963 0
 4940 0004 38B5     		push	{r3, r4, r5, lr}
 4941              	.LCFI52:
 4942              		.cfi_def_cfa_offset 16
 4943              		.cfi_offset 3, -16
 4944              		.cfi_offset 4, -12
 4945              		.cfi_offset 5, -8
 4946              		.cfi_offset 14, -4
 4947 0006 0346     		mov	r3, r0
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4948              		.loc 1 3972 0
ARM GAS  /tmp/ccv30Qft.s 			page 189


 4949 0008 006D     		ldr	r0, [r0, #80]
 4950              	.LVL435:
 4951 000a 40B9     		cbnz	r0, .L474
 4952              	.LBB214:
 4953              	.LBB215:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4954              		.loc 2 195 0
 4955              		.syntax unified
 4956              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4957 000c 4FF05003 			mov r3, #80												
 4958 0010 83F31188 		msr basepri, r3											
 4959 0014 BFF36F8F 		isb														
 4960 0018 BFF34F8F 		dsb														
 4961              	
 4962              	@ 0 "" 2
 4963              	.LVL436:
 4964              		.thumb
 4965              		.syntax unified
 4966              	.L475:
 4967 001c FEE7     		b	.L475
 4968              	.LVL437:
 4969              	.L474:
 4970              	.LBE215:
 4971              	.LBE214:
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4972              		.loc 1 3978 0
 4973 001e DA6C     		ldr	r2, [r3, #76]
 4974 0020 8A42     		cmp	r2, r1
 4975 0022 00D2     		bcs	.L476
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4976              		.loc 1 3980 0
 4977 0024 0A46     		mov	r2, r1
 4978              	.L476:
 4979              	.LVL438:
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4980              		.loc 1 3988 0
 4981 0026 D96A     		ldr	r1, [r3, #44]
 4982              	.LVL439:
 4983 0028 9142     		cmp	r1, r2
 4984 002a 01D0     		beq	.L472
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4985              		.loc 1 3994 0
 4986 002c 0128     		cmp	r0, #1
 4987 002e 00D0     		beq	.L485
 4988              	.LVL440:
 4989              	.L472:
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4990              		.loc 1 4057 0
 4991 0030 38BD     		pop	{r3, r4, r5, pc}
 4992              	.LVL441:
 4993              	.L485:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4994              		.loc 1 3999 0
 4995 0032 1848     		ldr	r0, .L486
 4996 0034 0068     		ldr	r0, [r0]
 4997 0036 9842     		cmp	r0, r3
 4998 0038 08D1     		bne	.L477
ARM GAS  /tmp/ccv30Qft.s 			page 190


 4999              	.LBB216:
 5000              	.LBB217:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5001              		.loc 2 195 0
 5002              		.syntax unified
 5003              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5004 003a 4FF05003 			mov r3, #80												
 5005 003e 83F31188 		msr basepri, r3											
 5006 0042 BFF36F8F 		isb														
 5007 0046 BFF34F8F 		dsb														
 5008              	
 5009              	@ 0 "" 2
 5010              	.LVL442:
 5011              		.thumb
 5012              		.syntax unified
 5013              	.L478:
 5014 004a FEE7     		b	.L478
 5015              	.LVL443:
 5016              	.L477:
 5017              	.LBE217:
 5018              	.LBE216:
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5019              		.loc 1 4006 0
 5020 004c DA62     		str	r2, [r3, #44]
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5021              		.loc 1 4010 0
 5022 004e 9869     		ldr	r0, [r3, #24]
 5023 0050 0028     		cmp	r0, #0
 5024 0052 02DB     		blt	.L479
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5025              		.loc 1 4012 0
 5026 0054 C2F13802 		rsb	r2, r2, #56
 5027              	.LVL444:
 5028 0058 9A61     		str	r2, [r3, #24]
 5029              	.L479:
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5030              		.loc 1 4025 0
 5031 005a 5A69     		ldr	r2, [r3, #20]
 5032 005c 0E48     		ldr	r0, .L486+4
 5033 005e 1424     		movs	r4, #20
 5034 0060 04FB0101 		mla	r1, r4, r1, r0
 5035              	.LVL445:
 5036 0064 8A42     		cmp	r2, r1
 5037 0066 E3D1     		bne	.L472
 5038 0068 1C46     		mov	r4, r3
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 5039              		.loc 1 4027 0
 5040 006a 1D1D     		adds	r5, r3, #4
 5041 006c 2846     		mov	r0, r5
 5042 006e FFF7FEFF 		bl	uxListRemove
 5043              	.LVL446:
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5044              		.loc 1 4036 0
 5045 0072 E36A     		ldr	r3, [r4, #44]
 5046 0074 094A     		ldr	r2, .L486+8
 5047 0076 1268     		ldr	r2, [r2]
 5048 0078 9342     		cmp	r3, r2
ARM GAS  /tmp/ccv30Qft.s 			page 191


 5049 007a 01D9     		bls	.L480
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5050              		.loc 1 4036 0 is_stmt 0 discriminator 1
 5051 007c 074A     		ldr	r2, .L486+8
 5052 007e 1360     		str	r3, [r2]
 5053              	.L480:
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5054              		.loc 1 4036 0 discriminator 3
 5055 0080 2946     		mov	r1, r5
 5056 0082 054A     		ldr	r2, .L486+4
 5057 0084 1420     		movs	r0, #20
 5058 0086 00FB0320 		mla	r0, r0, r3, r2
 5059 008a FFF7FEFF 		bl	vListInsertEnd
 5060              	.LVL447:
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5061              		.loc 1 4057 0 is_stmt 1 discriminator 3
 5062 008e CFE7     		b	.L472
 5063              	.LVL448:
 5064              	.L482:
 5065              	.LCFI53:
 5066              		.cfi_def_cfa_offset 0
 5067              		.cfi_restore 3
 5068              		.cfi_restore 4
 5069              		.cfi_restore 5
 5070              		.cfi_restore 14
 5071 0090 7047     		bx	lr
 5072              	.L487:
 5073 0092 00BF     		.align	2
 5074              	.L486:
 5075 0094 00000000 		.word	.LANCHOR10
 5076 0098 00000000 		.word	.LANCHOR4
 5077 009c 00000000 		.word	.LANCHOR13
 5078              		.cfi_endproc
 5079              	.LFE54:
 5081              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5082              		.align	1
 5083              		.global	uxTaskResetEventItemValue
 5084              		.syntax unified
 5085              		.thumb
 5086              		.thumb_func
 5087              		.fpu fpv4-sp-d16
 5089              	uxTaskResetEventItemValue:
 5090              	.LFB55:
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 5091              		.loc 1 4377 0
 5092              		.cfi_startproc
 5093              		@ args = 0, pretend = 0, frame = 0
 5094              		@ frame_needed = 0, uses_anonymous_args = 0
 5095              		@ link register save eliminated.
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5096              		.loc 1 4380 0
 5097 0000 044A     		ldr	r2, .L489
 5098 0002 1368     		ldr	r3, [r2]
 5099 0004 9869     		ldr	r0, [r3, #24]
 5100              	.LVL449:
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5101              		.loc 1 4384 0
ARM GAS  /tmp/ccv30Qft.s 			page 192


 5102 0006 1368     		ldr	r3, [r2]
 5103 0008 DB6A     		ldr	r3, [r3, #44]
 5104 000a 1268     		ldr	r2, [r2]
 5105 000c C3F13803 		rsb	r3, r3, #56
 5106 0010 9361     		str	r3, [r2, #24]
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5107              		.loc 1 4387 0
 5108 0012 7047     		bx	lr
 5109              	.L490:
 5110              		.align	2
 5111              	.L489:
 5112 0014 00000000 		.word	.LANCHOR10
 5113              		.cfi_endproc
 5114              	.LFE55:
 5116              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5117              		.align	1
 5118              		.global	pvTaskIncrementMutexHeldCount
 5119              		.syntax unified
 5120              		.thumb
 5121              		.thumb_func
 5122              		.fpu fpv4-sp-d16
 5124              	pvTaskIncrementMutexHeldCount:
 5125              	.LFB56:
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 5126              		.loc 1 4393 0
 5127              		.cfi_startproc
 5128              		@ args = 0, pretend = 0, frame = 0
 5129              		@ frame_needed = 0, uses_anonymous_args = 0
 5130              		@ link register save eliminated.
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5131              		.loc 1 4396 0
 5132 0000 054B     		ldr	r3, .L493
 5133 0002 1B68     		ldr	r3, [r3]
 5134 0004 23B1     		cbz	r3, .L492
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5135              		.loc 1 4398 0
 5136 0006 044B     		ldr	r3, .L493
 5137 0008 1A68     		ldr	r2, [r3]
 5138 000a 136D     		ldr	r3, [r2, #80]
 5139 000c 0133     		adds	r3, r3, #1
 5140 000e 1365     		str	r3, [r2, #80]
 5141              	.L492:
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5142              		.loc 1 4401 0
 5143 0010 014B     		ldr	r3, .L493
 5144 0012 1868     		ldr	r0, [r3]
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5145              		.loc 1 4402 0
 5146 0014 7047     		bx	lr
 5147              	.L494:
 5148 0016 00BF     		.align	2
 5149              	.L493:
 5150 0018 00000000 		.word	.LANCHOR10
 5151              		.cfi_endproc
 5152              	.LFE56:
 5154              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5155              		.align	1
ARM GAS  /tmp/ccv30Qft.s 			page 193


 5156              		.global	ulTaskNotifyTake
 5157              		.syntax unified
 5158              		.thumb
 5159              		.thumb_func
 5160              		.fpu fpv4-sp-d16
 5162              	ulTaskNotifyTake:
 5163              	.LFB57:
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 5164              		.loc 1 4410 0
 5165              		.cfi_startproc
 5166              		@ args = 0, pretend = 0, frame = 0
 5167              		@ frame_needed = 0, uses_anonymous_args = 0
 5168              	.LVL450:
 5169 0000 38B5     		push	{r3, r4, r5, lr}
 5170              	.LCFI54:
 5171              		.cfi_def_cfa_offset 16
 5172              		.cfi_offset 3, -16
 5173              		.cfi_offset 4, -12
 5174              		.cfi_offset 5, -8
 5175              		.cfi_offset 14, -4
 5176 0002 0546     		mov	r5, r0
 5177 0004 0C46     		mov	r4, r1
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5178              		.loc 1 4413 0
 5179 0006 FFF7FEFF 		bl	vPortEnterCritical
 5180              	.LVL451:
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5181              		.loc 1 4416 0
 5182 000a 194B     		ldr	r3, .L502
 5183 000c 1B68     		ldr	r3, [r3]
 5184 000e 5B6D     		ldr	r3, [r3, #84]
 5185 0010 2BB9     		cbnz	r3, .L496
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5186              		.loc 1 4419 0
 5187 0012 174B     		ldr	r3, .L502
 5188 0014 1B68     		ldr	r3, [r3]
 5189 0016 0122     		movs	r2, #1
 5190 0018 83F85820 		strb	r2, [r3, #88]
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5191              		.loc 1 4421 0
 5192 001c ACB9     		cbnz	r4, .L500
 5193              	.L496:
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5194              		.loc 1 4442 0
 5195 001e FFF7FEFF 		bl	vPortExitCritical
 5196              	.LVL452:
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5197              		.loc 1 4444 0
 5198 0022 FFF7FEFF 		bl	vPortEnterCritical
 5199              	.LVL453:
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5200              		.loc 1 4447 0
 5201 0026 124B     		ldr	r3, .L502
 5202 0028 1B68     		ldr	r3, [r3]
 5203 002a 5C6D     		ldr	r4, [r3, #84]
 5204              	.LVL454:
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccv30Qft.s 			page 194


 5205              		.loc 1 4449 0
 5206 002c 24B1     		cbz	r4, .L497
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5207              		.loc 1 4451 0
 5208 002e CDB9     		cbnz	r5, .L501
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5209              		.loc 1 4457 0
 5210 0030 0F4B     		ldr	r3, .L502
 5211 0032 1B68     		ldr	r3, [r3]
 5212 0034 621E     		subs	r2, r4, #1
 5213 0036 5A65     		str	r2, [r3, #84]
 5214              	.L497:
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5215              		.loc 1 4465 0
 5216 0038 0D4B     		ldr	r3, .L502
 5217 003a 1B68     		ldr	r3, [r3]
 5218 003c 0022     		movs	r2, #0
 5219 003e 83F85820 		strb	r2, [r3, #88]
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5220              		.loc 1 4467 0
 5221 0042 FFF7FEFF 		bl	vPortExitCritical
 5222              	.LVL455:
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5223              		.loc 1 4470 0
 5224 0046 2046     		mov	r0, r4
 5225 0048 38BD     		pop	{r3, r4, r5, pc}
 5226              	.LVL456:
 5227              	.L500:
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5228              		.loc 1 4423 0
 5229 004a 1146     		mov	r1, r2
 5230 004c 2046     		mov	r0, r4
 5231 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5232              	.LVL457:
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5233              		.loc 1 4430 0
 5234 0052 084B     		ldr	r3, .L502+4
 5235 0054 4FF08052 		mov	r2, #268435456
 5236 0058 1A60     		str	r2, [r3]
 5237              		.syntax unified
 5238              	@ 4430 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5239 005a BFF34F8F 		dsb
 5240              	@ 0 "" 2
 5241              	@ 4430 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5242 005e BFF36F8F 		isb
 5243              	@ 0 "" 2
 5244              		.thumb
 5245              		.syntax unified
 5246 0062 DCE7     		b	.L496
 5247              	.LVL458:
 5248              	.L501:
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5249              		.loc 1 4453 0
 5250 0064 024B     		ldr	r3, .L502
 5251 0066 1B68     		ldr	r3, [r3]
 5252 0068 0022     		movs	r2, #0
 5253 006a 5A65     		str	r2, [r3, #84]
ARM GAS  /tmp/ccv30Qft.s 			page 195


 5254 006c E4E7     		b	.L497
 5255              	.L503:
 5256 006e 00BF     		.align	2
 5257              	.L502:
 5258 0070 00000000 		.word	.LANCHOR10
 5259 0074 04ED00E0 		.word	-536810236
 5260              		.cfi_endproc
 5261              	.LFE57:
 5263              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5264              		.align	1
 5265              		.global	xTaskNotifyWait
 5266              		.syntax unified
 5267              		.thumb
 5268              		.thumb_func
 5269              		.fpu fpv4-sp-d16
 5271              	xTaskNotifyWait:
 5272              	.LFB58:
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5273              		.loc 1 4478 0
 5274              		.cfi_startproc
 5275              		@ args = 0, pretend = 0, frame = 0
 5276              		@ frame_needed = 0, uses_anonymous_args = 0
 5277              	.LVL459:
 5278 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5279              	.LCFI55:
 5280              		.cfi_def_cfa_offset 24
 5281              		.cfi_offset 3, -24
 5282              		.cfi_offset 4, -20
 5283              		.cfi_offset 5, -16
 5284              		.cfi_offset 6, -12
 5285              		.cfi_offset 7, -8
 5286              		.cfi_offset 14, -4
 5287 0002 0746     		mov	r7, r0
 5288 0004 0D46     		mov	r5, r1
 5289 0006 1446     		mov	r4, r2
 5290 0008 1E46     		mov	r6, r3
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5291              		.loc 1 4481 0
 5292 000a FFF7FEFF 		bl	vPortEnterCritical
 5293              	.LVL460:
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5294              		.loc 1 4484 0
 5295 000e 204B     		ldr	r3, .L512
 5296 0010 1B68     		ldr	r3, [r3]
 5297 0012 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5298 0016 DBB2     		uxtb	r3, r3
 5299 0018 022B     		cmp	r3, #2
 5300 001a 0AD0     		beq	.L505
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5301              		.loc 1 4489 0
 5302 001c 1C4B     		ldr	r3, .L512
 5303 001e 1A68     		ldr	r2, [r3]
 5304 0020 506D     		ldr	r0, [r2, #84]
 5305 0022 20EA0700 		bic	r0, r0, r7
 5306 0026 5065     		str	r0, [r2, #84]
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5307              		.loc 1 4492 0
ARM GAS  /tmp/ccv30Qft.s 			page 196


 5308 0028 1B68     		ldr	r3, [r3]
 5309 002a 0122     		movs	r2, #1
 5310 002c 83F85820 		strb	r2, [r3, #88]
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5311              		.loc 1 4494 0
 5312 0030 CEB9     		cbnz	r6, .L510
 5313              	.L505:
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5314              		.loc 1 4515 0
 5315 0032 FFF7FEFF 		bl	vPortExitCritical
 5316              	.LVL461:
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5317              		.loc 1 4517 0
 5318 0036 FFF7FEFF 		bl	vPortEnterCritical
 5319              	.LVL462:
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5320              		.loc 1 4521 0
 5321 003a 1CB1     		cbz	r4, .L506
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5322              		.loc 1 4525 0
 5323 003c 144B     		ldr	r3, .L512
 5324 003e 1B68     		ldr	r3, [r3]
 5325 0040 5B6D     		ldr	r3, [r3, #84]
 5326 0042 2360     		str	r3, [r4]
 5327              	.L506:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5328              		.loc 1 4532 0
 5329 0044 124B     		ldr	r3, .L512
 5330 0046 1B68     		ldr	r3, [r3]
 5331 0048 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5332 004c DBB2     		uxtb	r3, r3
 5333 004e 022B     		cmp	r3, #2
 5334 0050 16D0     		beq	.L511
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5335              		.loc 1 4535 0
 5336 0052 0024     		movs	r4, #0
 5337              	.LVL463:
 5338              	.L507:
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5339              		.loc 1 4545 0
 5340 0054 0E4B     		ldr	r3, .L512
 5341 0056 1B68     		ldr	r3, [r3]
 5342 0058 0022     		movs	r2, #0
 5343 005a 83F85820 		strb	r2, [r3, #88]
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5344              		.loc 1 4547 0
 5345 005e FFF7FEFF 		bl	vPortExitCritical
 5346              	.LVL464:
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5347              		.loc 1 4550 0
 5348 0062 2046     		mov	r0, r4
 5349 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5350              	.LVL465:
 5351              	.L510:
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5352              		.loc 1 4496 0
 5353 0066 1146     		mov	r1, r2
ARM GAS  /tmp/ccv30Qft.s 			page 197


 5354 0068 3046     		mov	r0, r6
 5355 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5356              	.LVL466:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5357              		.loc 1 4503 0
 5358 006e 094B     		ldr	r3, .L512+4
 5359 0070 4FF08052 		mov	r2, #268435456
 5360 0074 1A60     		str	r2, [r3]
 5361              		.syntax unified
 5362              	@ 4503 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5363 0076 BFF34F8F 		dsb
 5364              	@ 0 "" 2
 5365              	@ 4503 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5366 007a BFF36F8F 		isb
 5367              	@ 0 "" 2
 5368              		.thumb
 5369              		.syntax unified
 5370 007e D8E7     		b	.L505
 5371              	.L511:
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5372              		.loc 1 4541 0
 5373 0080 034B     		ldr	r3, .L512
 5374 0082 1A68     		ldr	r2, [r3]
 5375 0084 536D     		ldr	r3, [r2, #84]
 5376 0086 23EA0505 		bic	r5, r3, r5
 5377              	.LVL467:
 5378 008a 5565     		str	r5, [r2, #84]
 5379              	.LVL468:
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5380              		.loc 1 4542 0
 5381 008c 0124     		movs	r4, #1
 5382              	.LVL469:
 5383 008e E1E7     		b	.L507
 5384              	.L513:
 5385              		.align	2
 5386              	.L512:
 5387 0090 00000000 		.word	.LANCHOR10
 5388 0094 04ED00E0 		.word	-536810236
 5389              		.cfi_endproc
 5390              	.LFE58:
 5392              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5393              		.align	1
 5394              		.global	xTaskGenericNotify
 5395              		.syntax unified
 5396              		.thumb
 5397              		.thumb_func
 5398              		.fpu fpv4-sp-d16
 5400              	xTaskGenericNotify:
 5401              	.LFB59:
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5402              		.loc 1 4558 0
 5403              		.cfi_startproc
 5404              		@ args = 0, pretend = 0, frame = 0
 5405              		@ frame_needed = 0, uses_anonymous_args = 0
 5406              	.LVL470:
 5407 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5408              	.LCFI56:
ARM GAS  /tmp/ccv30Qft.s 			page 198


 5409              		.cfi_def_cfa_offset 24
 5410              		.cfi_offset 3, -24
 5411              		.cfi_offset 4, -20
 5412              		.cfi_offset 5, -16
 5413              		.cfi_offset 6, -12
 5414              		.cfi_offset 7, -8
 5415              		.cfi_offset 14, -4
 5416              	.LVL471:
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5417              		.loc 1 4563 0
 5418 0002 40B9     		cbnz	r0, .L515
 5419              	.LBB218:
 5420              	.LBB219:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5421              		.loc 2 195 0
 5422              		.syntax unified
 5423              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5424 0004 4FF05003 			mov r3, #80												
 5425 0008 83F31188 		msr basepri, r3											
 5426 000c BFF36F8F 		isb														
 5427 0010 BFF34F8F 		dsb														
 5428              	
 5429              	@ 0 "" 2
 5430              	.LVL472:
 5431              		.thumb
 5432              		.syntax unified
 5433              	.L516:
 5434 0014 FEE7     		b	.L516
 5435              	.LVL473:
 5436              	.L515:
 5437 0016 0446     		mov	r4, r0
 5438 0018 1F46     		mov	r7, r3
 5439 001a 1546     		mov	r5, r2
 5440 001c 0E46     		mov	r6, r1
 5441              	.LVL474:
 5442              	.LBE219:
 5443              	.LBE218:
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5444              		.loc 1 4566 0
 5445 001e FFF7FEFF 		bl	vPortEnterCritical
 5446              	.LVL475:
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5447              		.loc 1 4568 0
 5448 0022 0FB1     		cbz	r7, .L517
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5449              		.loc 1 4570 0
 5450 0024 636D     		ldr	r3, [r4, #84]
 5451 0026 3B60     		str	r3, [r7]
 5452              	.L517:
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5453              		.loc 1 4573 0
 5454 0028 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5455 002c DBB2     		uxtb	r3, r3
 5456              	.LVL476:
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5457              		.loc 1 4575 0
 5458 002e 0222     		movs	r2, #2
ARM GAS  /tmp/ccv30Qft.s 			page 199


 5459 0030 84F85820 		strb	r2, [r4, #88]
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5460              		.loc 1 4577 0
 5461 0034 6A1E     		subs	r2, r5, #1
 5462 0036 032A     		cmp	r2, #3
 5463 0038 1AD8     		bhi	.L528
 5464 003a DFE802F0 		tbb	[pc, r2]
 5465              	.L520:
 5466 003e 02       		.byte	(.L519-.L520)/2
 5467 003f 0C       		.byte	(.L521-.L520)/2
 5468 0040 11       		.byte	(.L522-.L520)/2
 5469 0041 14       		.byte	(.L523-.L520)/2
 5470              		.p2align 1
 5471              	.L519:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5472              		.loc 1 4580 0
 5473 0042 626D     		ldr	r2, [r4, #84]
 5474 0044 1643     		orrs	r6, r6, r2
 5475              	.LVL477:
 5476 0046 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5477              		.loc 1 4560 0
 5478 0048 0125     		movs	r5, #1
 5479              	.L518:
 5480              	.LVL478:
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5481              		.loc 1 4613 0
 5482 004a 012B     		cmp	r3, #1
 5483 004c 14D0     		beq	.L531
 5484              	.LVL479:
 5485              	.L524:
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5486              		.loc 1 4653 0
 5487 004e FFF7FEFF 		bl	vPortExitCritical
 5488              	.LVL480:
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5489              		.loc 1 4656 0
 5490 0052 2846     		mov	r0, r5
 5491 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5492              	.LVL481:
 5493              	.L521:
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5494              		.loc 1 4584 0
 5495 0056 626D     		ldr	r2, [r4, #84]
 5496 0058 0132     		adds	r2, r2, #1
 5497 005a 6265     		str	r2, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5498              		.loc 1 4560 0
 5499 005c 0125     		movs	r5, #1
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5500              		.loc 1 4585 0
 5501 005e F4E7     		b	.L518
 5502              	.L522:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5503              		.loc 1 4588 0
 5504 0060 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
ARM GAS  /tmp/ccv30Qft.s 			page 200


 5505              		.loc 1 4560 0
 5506 0062 0125     		movs	r5, #1
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5507              		.loc 1 4589 0
 5508 0064 F1E7     		b	.L518
 5509              	.L523:
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5510              		.loc 1 4592 0
 5511 0066 022B     		cmp	r3, #2
 5512 0068 04D0     		beq	.L529
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5513              		.loc 1 4594 0
 5514 006a 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5515              		.loc 1 4560 0
 5516 006c 0125     		movs	r5, #1
 5517 006e ECE7     		b	.L518
 5518              	.L528:
 5519 0070 0125     		movs	r5, #1
 5520 0072 EAE7     		b	.L518
 5521              	.L529:
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5522              		.loc 1 4599 0
 5523 0074 0025     		movs	r5, #0
 5524 0076 E8E7     		b	.L518
 5525              	.LVL482:
 5526              	.L531:
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5527              		.loc 1 4615 0
 5528 0078 261D     		adds	r6, r4, #4
 5529 007a 3046     		mov	r0, r6
 5530 007c FFF7FEFF 		bl	uxListRemove
 5531              	.LVL483:
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5532              		.loc 1 4616 0
 5533 0080 E36A     		ldr	r3, [r4, #44]
 5534 0082 134A     		ldr	r2, .L532
 5535 0084 1268     		ldr	r2, [r2]
 5536 0086 9342     		cmp	r3, r2
 5537 0088 01D9     		bls	.L525
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5538              		.loc 1 4616 0 is_stmt 0 discriminator 1
 5539 008a 114A     		ldr	r2, .L532
 5540 008c 1360     		str	r3, [r2]
 5541              	.L525:
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5542              		.loc 1 4616 0 discriminator 3
 5543 008e 3146     		mov	r1, r6
 5544 0090 104A     		ldr	r2, .L532+4
 5545 0092 1420     		movs	r0, #20
 5546 0094 00FB0320 		mla	r0, r0, r3, r2
 5547 0098 FFF7FEFF 		bl	vListInsertEnd
 5548              	.LVL484:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5549              		.loc 1 4619 0 is_stmt 1 discriminator 3
 5550 009c A36A     		ldr	r3, [r4, #40]
 5551 009e 43B1     		cbz	r3, .L526
ARM GAS  /tmp/ccv30Qft.s 			page 201


 5552              	.LBB220:
 5553              	.LBB221:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5554              		.loc 2 195 0
 5555              		.syntax unified
 5556              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5557 00a0 4FF05003 			mov r3, #80												
 5558 00a4 83F31188 		msr basepri, r3											
 5559 00a8 BFF36F8F 		isb														
 5560 00ac BFF34F8F 		dsb														
 5561              	
 5562              	@ 0 "" 2
 5563              	.LVL485:
 5564              		.thumb
 5565              		.syntax unified
 5566              	.L527:
 5567 00b0 FEE7     		b	.L527
 5568              	.L526:
 5569              	.LBE221:
 5570              	.LBE220:
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5571              		.loc 1 4637 0
 5572 00b2 E26A     		ldr	r2, [r4, #44]
 5573 00b4 084B     		ldr	r3, .L532+8
 5574 00b6 1B68     		ldr	r3, [r3]
 5575 00b8 DB6A     		ldr	r3, [r3, #44]
 5576 00ba 9A42     		cmp	r2, r3
 5577 00bc C7D9     		bls	.L524
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5578              		.loc 1 4641 0
 5579 00be 074B     		ldr	r3, .L532+12
 5580 00c0 4FF08052 		mov	r2, #268435456
 5581 00c4 1A60     		str	r2, [r3]
 5582              		.syntax unified
 5583              	@ 4641 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5584 00c6 BFF34F8F 		dsb
 5585              	@ 0 "" 2
 5586              	@ 4641 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5587 00ca BFF36F8F 		isb
 5588              	@ 0 "" 2
 5589              		.thumb
 5590              		.syntax unified
 5591 00ce BEE7     		b	.L524
 5592              	.L533:
 5593              		.align	2
 5594              	.L532:
 5595 00d0 00000000 		.word	.LANCHOR13
 5596 00d4 00000000 		.word	.LANCHOR4
 5597 00d8 00000000 		.word	.LANCHOR10
 5598 00dc 04ED00E0 		.word	-536810236
 5599              		.cfi_endproc
 5600              	.LFE59:
 5602              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5603              		.align	1
 5604              		.global	xTaskGenericNotifyFromISR
 5605              		.syntax unified
 5606              		.thumb
ARM GAS  /tmp/ccv30Qft.s 			page 202


 5607              		.thumb_func
 5608              		.fpu fpv4-sp-d16
 5610              	xTaskGenericNotifyFromISR:
 5611              	.LFB60:
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5612              		.loc 1 4664 0
 5613              		.cfi_startproc
 5614              		@ args = 4, pretend = 0, frame = 0
 5615              		@ frame_needed = 0, uses_anonymous_args = 0
 5616              	.LVL486:
 5617 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5618              	.LCFI57:
 5619              		.cfi_def_cfa_offset 32
 5620              		.cfi_offset 3, -32
 5621              		.cfi_offset 4, -28
 5622              		.cfi_offset 5, -24
 5623              		.cfi_offset 6, -20
 5624              		.cfi_offset 7, -16
 5625              		.cfi_offset 8, -12
 5626              		.cfi_offset 9, -8
 5627              		.cfi_offset 14, -4
 5628 0004 089E     		ldr	r6, [sp, #32]
 5629              	.LVL487:
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5630              		.loc 1 4670 0
 5631 0006 40B9     		cbnz	r0, .L535
 5632              	.LBB222:
 5633              	.LBB223:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5634              		.loc 2 195 0
 5635              		.syntax unified
 5636              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5637 0008 4FF05003 			mov r3, #80												
 5638 000c 83F31188 		msr basepri, r3											
 5639 0010 BFF36F8F 		isb														
 5640 0014 BFF34F8F 		dsb														
 5641              	
 5642              	@ 0 "" 2
 5643              	.LVL488:
 5644              		.thumb
 5645              		.syntax unified
 5646              	.L536:
 5647 0018 FEE7     		b	.L536
 5648              	.LVL489:
 5649              	.L535:
 5650 001a 0446     		mov	r4, r0
 5651 001c 9946     		mov	r9, r3
 5652 001e 1546     		mov	r5, r2
 5653 0020 8846     		mov	r8, r1
 5654              	.LBE223:
 5655              	.LBE222:
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5656              		.loc 1 4688 0
 5657 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5658              	.LVL490:
 5659              	.LBB224:
 5660              	.LBB225:
ARM GAS  /tmp/ccv30Qft.s 			page 203


 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5661              		.loc 2 211 0
 5662              		.syntax unified
 5663              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5664 0026 EFF31187 			mrs r7, basepri											
 5665 002a 4FF05003 		mov r3, #80												
 5666 002e 83F31188 		msr basepri, r3											
 5667 0032 BFF36F8F 		isb														
 5668 0036 BFF34F8F 		dsb														
 5669              	
 5670              	@ 0 "" 2
 5671              		.thumb
 5672              		.syntax unified
 5673              	.LBE225:
 5674              	.LBE224:
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5675              		.loc 1 4694 0
 5676 003a B9F1000F 		cmp	r9, #0
 5677 003e 02D0     		beq	.L537
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5678              		.loc 1 4696 0
 5679 0040 636D     		ldr	r3, [r4, #84]
 5680 0042 C9F80030 		str	r3, [r9]
 5681              	.L537:
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5682              		.loc 1 4699 0
 5683 0046 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5684 004a DBB2     		uxtb	r3, r3
 5685              	.LVL491:
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5686              		.loc 1 4700 0
 5687 004c 0222     		movs	r2, #2
 5688 004e 84F85820 		strb	r2, [r4, #88]
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5689              		.loc 1 4702 0
 5690 0052 6A1E     		subs	r2, r5, #1
 5691 0054 032A     		cmp	r2, #3
 5692 0056 1ED8     		bhi	.L551
 5693 0058 DFE802F0 		tbb	[pc, r2]
 5694              	.L540:
 5695 005c 02       		.byte	(.L539-.L540)/2
 5696 005d 0E       		.byte	(.L541-.L540)/2
 5697 005e 13       		.byte	(.L542-.L540)/2
 5698 005f 17       		.byte	(.L543-.L540)/2
 5699              		.p2align 1
 5700              	.L539:
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5701              		.loc 1 4705 0
 5702 0060 626D     		ldr	r2, [r4, #84]
 5703 0062 42EA0802 		orr	r2, r2, r8
 5704 0066 6265     		str	r2, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5705              		.loc 1 4667 0
 5706 0068 0125     		movs	r5, #1
 5707              	.L538:
 5708              	.LVL492:
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccv30Qft.s 			page 204


 5709              		.loc 1 4738 0
 5710 006a 012B     		cmp	r3, #1
 5711 006c 17D0     		beq	.L554
 5712              	.LVL493:
 5713              	.L544:
 5714              	.LBB226:
 5715              	.LBB227:
 5716              		.loc 2 229 0
 5717              		.syntax unified
 5718              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5719 006e 87F31188 			msr basepri, r7	
 5720              	@ 0 "" 2
 5721              	.LVL494:
 5722              		.thumb
 5723              		.syntax unified
 5724              	.LBE227:
 5725              	.LBE226:
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5726              		.loc 1 4780 0
 5727 0072 2846     		mov	r0, r5
 5728 0074 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5729              	.LVL495:
 5730              	.L541:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5731              		.loc 1 4709 0
 5732 0078 626D     		ldr	r2, [r4, #84]
 5733 007a 0132     		adds	r2, r2, #1
 5734 007c 6265     		str	r2, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5735              		.loc 1 4667 0
 5736 007e 0125     		movs	r5, #1
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5737              		.loc 1 4710 0
 5738 0080 F3E7     		b	.L538
 5739              	.L542:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5740              		.loc 1 4713 0
 5741 0082 C4F85480 		str	r8, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5742              		.loc 1 4667 0
 5743 0086 0125     		movs	r5, #1
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5744              		.loc 1 4714 0
 5745 0088 EFE7     		b	.L538
 5746              	.L543:
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5747              		.loc 1 4717 0
 5748 008a 022B     		cmp	r3, #2
 5749 008c 05D0     		beq	.L552
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5750              		.loc 1 4719 0
 5751 008e C4F85480 		str	r8, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5752              		.loc 1 4667 0
 5753 0092 0125     		movs	r5, #1
 5754 0094 E9E7     		b	.L538
 5755              	.L551:
ARM GAS  /tmp/ccv30Qft.s 			page 205


 5756 0096 0125     		movs	r5, #1
 5757 0098 E7E7     		b	.L538
 5758              	.L552:
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5759              		.loc 1 4724 0
 5760 009a 0025     		movs	r5, #0
 5761 009c E5E7     		b	.L538
 5762              	.LVL496:
 5763              	.L554:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5764              		.loc 1 4741 0
 5765 009e A36A     		ldr	r3, [r4, #40]
 5766              	.LVL497:
 5767 00a0 43B1     		cbz	r3, .L545
 5768              	.LBB228:
 5769              	.LBB229:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5770              		.loc 2 195 0
 5771              		.syntax unified
 5772              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5773 00a2 4FF05003 			mov r3, #80												
 5774 00a6 83F31188 		msr basepri, r3											
 5775 00aa BFF36F8F 		isb														
 5776 00ae BFF34F8F 		dsb														
 5777              	
 5778              	@ 0 "" 2
 5779              	.LVL498:
 5780              		.thumb
 5781              		.syntax unified
 5782              	.L546:
 5783 00b2 FEE7     		b	.L546
 5784              	.L545:
 5785              	.LBE229:
 5786              	.LBE228:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5787              		.loc 1 4743 0
 5788 00b4 144B     		ldr	r3, .L555
 5789 00b6 1B68     		ldr	r3, [r3]
 5790 00b8 E3B9     		cbnz	r3, .L547
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5791              		.loc 1 4745 0
 5792 00ba 04F10408 		add	r8, r4, #4
 5793              	.LVL499:
 5794 00be 4046     		mov	r0, r8
 5795 00c0 FFF7FEFF 		bl	uxListRemove
 5796              	.LVL500:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5797              		.loc 1 4746 0
 5798 00c4 E36A     		ldr	r3, [r4, #44]
 5799 00c6 114A     		ldr	r2, .L555+4
 5800 00c8 1268     		ldr	r2, [r2]
 5801 00ca 9342     		cmp	r3, r2
 5802 00cc 01D9     		bls	.L548
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5803              		.loc 1 4746 0 is_stmt 0 discriminator 1
 5804 00ce 0F4A     		ldr	r2, .L555+4
 5805 00d0 1360     		str	r3, [r2]
ARM GAS  /tmp/ccv30Qft.s 			page 206


 5806              	.L548:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5807              		.loc 1 4746 0 discriminator 3
 5808 00d2 4146     		mov	r1, r8
 5809 00d4 0E4A     		ldr	r2, .L555+8
 5810 00d6 1420     		movs	r0, #20
 5811 00d8 00FB0320 		mla	r0, r0, r3, r2
 5812 00dc FFF7FEFF 		bl	vListInsertEnd
 5813              	.LVL501:
 5814              	.L549:
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5815              		.loc 1 4755 0 is_stmt 1
 5816 00e0 E26A     		ldr	r2, [r4, #44]
 5817 00e2 0C4B     		ldr	r3, .L555+12
 5818 00e4 1B68     		ldr	r3, [r3]
 5819 00e6 DB6A     		ldr	r3, [r3, #44]
 5820 00e8 9A42     		cmp	r2, r3
 5821 00ea C0D9     		bls	.L544
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5822              		.loc 1 4759 0
 5823 00ec 46B1     		cbz	r6, .L550
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5824              		.loc 1 4761 0
 5825 00ee 0123     		movs	r3, #1
 5826 00f0 3360     		str	r3, [r6]
 5827 00f2 BCE7     		b	.L544
 5828              	.LVL502:
 5829              	.L547:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5830              		.loc 1 4752 0
 5831 00f4 04F11801 		add	r1, r4, #24
 5832 00f8 0748     		ldr	r0, .L555+16
 5833 00fa FFF7FEFF 		bl	vListInsertEnd
 5834              	.LVL503:
 5835 00fe EFE7     		b	.L549
 5836              	.LVL504:
 5837              	.L550:
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5838              		.loc 1 4768 0
 5839 0100 064B     		ldr	r3, .L555+20
 5840 0102 0122     		movs	r2, #1
 5841 0104 1A60     		str	r2, [r3]
 5842 0106 B2E7     		b	.L544
 5843              	.L556:
 5844              		.align	2
 5845              	.L555:
 5846 0108 00000000 		.word	.LANCHOR16
 5847 010c 00000000 		.word	.LANCHOR13
 5848 0110 00000000 		.word	.LANCHOR4
 5849 0114 00000000 		.word	.LANCHOR10
 5850 0118 00000000 		.word	.LANCHOR1
 5851 011c 00000000 		.word	.LANCHOR19
 5852              		.cfi_endproc
 5853              	.LFE60:
 5855              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5856              		.align	1
 5857              		.global	vTaskNotifyGiveFromISR
ARM GAS  /tmp/ccv30Qft.s 			page 207


 5858              		.syntax unified
 5859              		.thumb
 5860              		.thumb_func
 5861              		.fpu fpv4-sp-d16
 5863              	vTaskNotifyGiveFromISR:
 5864              	.LFB61:
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5865              		.loc 1 4788 0
 5866              		.cfi_startproc
 5867              		@ args = 0, pretend = 0, frame = 0
 5868              		@ frame_needed = 0, uses_anonymous_args = 0
 5869              	.LVL505:
 5870 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5871              	.LCFI58:
 5872              		.cfi_def_cfa_offset 24
 5873              		.cfi_offset 3, -24
 5874              		.cfi_offset 4, -20
 5875              		.cfi_offset 5, -16
 5876              		.cfi_offset 6, -12
 5877              		.cfi_offset 7, -8
 5878              		.cfi_offset 14, -4
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5879              		.loc 1 4793 0
 5880 0002 40B9     		cbnz	r0, .L558
 5881              	.LBB230:
 5882              	.LBB231:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5883              		.loc 2 195 0
 5884              		.syntax unified
 5885              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5886 0004 4FF05003 			mov r3, #80												
 5887 0008 83F31188 		msr basepri, r3											
 5888 000c BFF36F8F 		isb														
 5889 0010 BFF34F8F 		dsb														
 5890              	
 5891              	@ 0 "" 2
 5892              	.LVL506:
 5893              		.thumb
 5894              		.syntax unified
 5895              	.L559:
 5896 0014 FEE7     		b	.L559
 5897              	.L558:
 5898 0016 0446     		mov	r4, r0
 5899 0018 0D46     		mov	r5, r1
 5900              	.LBE231:
 5901              	.LBE230:
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5902              		.loc 1 4811 0
 5903 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 5904              	.LVL507:
 5905              	.LBB232:
 5906              	.LBB233:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5907              		.loc 2 211 0
 5908              		.syntax unified
 5909              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5910 001e EFF31186 			mrs r6, basepri											
ARM GAS  /tmp/ccv30Qft.s 			page 208


 5911 0022 4FF05003 		mov r3, #80												
 5912 0026 83F31188 		msr basepri, r3											
 5913 002a BFF36F8F 		isb														
 5914 002e BFF34F8F 		dsb														
 5915              	
 5916              	@ 0 "" 2
 5917              		.thumb
 5918              		.syntax unified
 5919              	.LBE233:
 5920              	.LBE232:
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5921              		.loc 1 4817 0
 5922 0032 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5923 0036 DBB2     		uxtb	r3, r3
 5924              	.LVL508:
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5925              		.loc 1 4818 0
 5926 0038 0222     		movs	r2, #2
 5927 003a 84F85820 		strb	r2, [r4, #88]
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5928              		.loc 1 4822 0
 5929 003e 626D     		ldr	r2, [r4, #84]
 5930 0040 0132     		adds	r2, r2, #1
 5931 0042 6265     		str	r2, [r4, #84]
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5932              		.loc 1 4828 0
 5933 0044 012B     		cmp	r3, #1
 5934 0046 02D0     		beq	.L568
 5935              	.LVL509:
 5936              	.L560:
 5937              	.LBB234:
 5938              	.LBB235:
 5939              		.loc 2 229 0
 5940              		.syntax unified
 5941              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5942 0048 86F31188 			msr basepri, r6	
 5943              	@ 0 "" 2
 5944              	.LVL510:
 5945              		.thumb
 5946              		.syntax unified
 5947              	.LBE235:
 5948              	.LBE234:
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5949              		.loc 1 4868 0
 5950 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5951              	.LVL511:
 5952              	.L568:
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5953              		.loc 1 4831 0
 5954 004e A36A     		ldr	r3, [r4, #40]
 5955              	.LVL512:
 5956 0050 43B1     		cbz	r3, .L561
 5957              	.LBB236:
 5958              	.LBB237:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5959              		.loc 2 195 0
 5960              		.syntax unified
ARM GAS  /tmp/ccv30Qft.s 			page 209


 5961              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5962 0052 4FF05003 			mov r3, #80												
 5963 0056 83F31188 		msr basepri, r3											
 5964 005a BFF36F8F 		isb														
 5965 005e BFF34F8F 		dsb														
 5966              	
 5967              	@ 0 "" 2
 5968              	.LVL513:
 5969              		.thumb
 5970              		.syntax unified
 5971              	.L562:
 5972 0062 FEE7     		b	.L562
 5973              	.L561:
 5974              	.LBE237:
 5975              	.LBE236:
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5976              		.loc 1 4833 0
 5977 0064 144B     		ldr	r3, .L569
 5978 0066 1B68     		ldr	r3, [r3]
 5979 0068 DBB9     		cbnz	r3, .L563
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5980              		.loc 1 4835 0
 5981 006a 271D     		adds	r7, r4, #4
 5982 006c 3846     		mov	r0, r7
 5983 006e FFF7FEFF 		bl	uxListRemove
 5984              	.LVL514:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5985              		.loc 1 4836 0
 5986 0072 E36A     		ldr	r3, [r4, #44]
 5987 0074 114A     		ldr	r2, .L569+4
 5988 0076 1268     		ldr	r2, [r2]
 5989 0078 9342     		cmp	r3, r2
 5990 007a 01D9     		bls	.L564
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5991              		.loc 1 4836 0 is_stmt 0 discriminator 1
 5992 007c 0F4A     		ldr	r2, .L569+4
 5993 007e 1360     		str	r3, [r2]
 5994              	.L564:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5995              		.loc 1 4836 0 discriminator 3
 5996 0080 3946     		mov	r1, r7
 5997 0082 0F4A     		ldr	r2, .L569+8
 5998 0084 1420     		movs	r0, #20
 5999 0086 00FB0320 		mla	r0, r0, r3, r2
 6000 008a FFF7FEFF 		bl	vListInsertEnd
 6001              	.LVL515:
 6002              	.L565:
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6003              		.loc 1 4845 0 is_stmt 1
 6004 008e E26A     		ldr	r2, [r4, #44]
 6005 0090 0C4B     		ldr	r3, .L569+12
 6006 0092 1B68     		ldr	r3, [r3]
 6007 0094 DB6A     		ldr	r3, [r3, #44]
 6008 0096 9A42     		cmp	r2, r3
 6009 0098 D6D9     		bls	.L560
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 6010              		.loc 1 4849 0
ARM GAS  /tmp/ccv30Qft.s 			page 210


 6011 009a 45B1     		cbz	r5, .L566
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6012              		.loc 1 4851 0
 6013 009c 0123     		movs	r3, #1
 6014 009e 2B60     		str	r3, [r5]
 6015 00a0 D2E7     		b	.L560
 6016              	.L563:
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6017              		.loc 1 4842 0
 6018 00a2 04F11801 		add	r1, r4, #24
 6019 00a6 0848     		ldr	r0, .L569+16
 6020 00a8 FFF7FEFF 		bl	vListInsertEnd
 6021              	.LVL516:
 6022 00ac EFE7     		b	.L565
 6023              	.L566:
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6024              		.loc 1 4858 0
 6025 00ae 074B     		ldr	r3, .L569+20
 6026 00b0 0122     		movs	r2, #1
 6027 00b2 1A60     		str	r2, [r3]
 6028 00b4 C8E7     		b	.L560
 6029              	.L570:
 6030 00b6 00BF     		.align	2
 6031              	.L569:
 6032 00b8 00000000 		.word	.LANCHOR16
 6033 00bc 00000000 		.word	.LANCHOR13
 6034 00c0 00000000 		.word	.LANCHOR4
 6035 00c4 00000000 		.word	.LANCHOR10
 6036 00c8 00000000 		.word	.LANCHOR1
 6037 00cc 00000000 		.word	.LANCHOR19
 6038              		.cfi_endproc
 6039              	.LFE61:
 6041              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6042              		.align	1
 6043              		.global	xTaskNotifyStateClear
 6044              		.syntax unified
 6045              		.thumb
 6046              		.thumb_func
 6047              		.fpu fpv4-sp-d16
 6049              	xTaskNotifyStateClear:
 6050              	.LFB62:
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 6051              		.loc 1 4877 0
 6052              		.cfi_startproc
 6053              		@ args = 0, pretend = 0, frame = 0
 6054              		@ frame_needed = 0, uses_anonymous_args = 0
 6055              	.LVL517:
 6056 0000 10B5     		push	{r4, lr}
 6057              	.LCFI59:
 6058              		.cfi_def_cfa_offset 8
 6059              		.cfi_offset 4, -8
 6060              		.cfi_offset 14, -4
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6061              		.loc 1 4883 0
 6062 0002 0446     		mov	r4, r0
 6063 0004 58B1     		cbz	r0, .L576
 6064              	.LVL518:
ARM GAS  /tmp/ccv30Qft.s 			page 211


 6065              	.L572:
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6066              		.loc 1 4885 0 discriminator 4
 6067 0006 FFF7FEFF 		bl	vPortEnterCritical
 6068              	.LVL519:
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6069              		.loc 1 4887 0 discriminator 4
 6070 000a 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 6071 000e DBB2     		uxtb	r3, r3
 6072 0010 022B     		cmp	r3, #2
 6073 0012 07D0     		beq	.L577
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6074              		.loc 1 4894 0
 6075 0014 0024     		movs	r4, #0
 6076              	.LVL520:
 6077              	.L573:
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6078              		.loc 1 4897 0
 6079 0016 FFF7FEFF 		bl	vPortExitCritical
 6080              	.LVL521:
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6081              		.loc 1 4900 0
 6082 001a 2046     		mov	r0, r4
 6083 001c 10BD     		pop	{r4, pc}
 6084              	.LVL522:
 6085              	.L576:
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6086              		.loc 1 4883 0 discriminator 1
 6087 001e 044B     		ldr	r3, .L578
 6088 0020 1C68     		ldr	r4, [r3]
 6089              	.LVL523:
 6090 0022 F0E7     		b	.L572
 6091              	.LVL524:
 6092              	.L577:
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6093              		.loc 1 4889 0
 6094 0024 0023     		movs	r3, #0
 6095 0026 84F85830 		strb	r3, [r4, #88]
 6096              	.LVL525:
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6097              		.loc 1 4890 0
 6098 002a 0124     		movs	r4, #1
 6099              	.LVL526:
 6100 002c F3E7     		b	.L573
 6101              	.L579:
 6102 002e 00BF     		.align	2
 6103              	.L578:
 6104 0030 00000000 		.word	.LANCHOR10
 6105              		.cfi_endproc
 6106              	.LFE62:
 6108              		.global	pxCurrentTCB
 6109              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6110              		.align	2
 6111              		.set	.LANCHOR10,. + 0
 6114              	pxCurrentTCB:
 6115 0000 00000000 		.space	4
 6116              		.section	.bss.pxDelayedTaskList,"aw",%nobits
ARM GAS  /tmp/ccv30Qft.s 			page 212


 6117              		.align	2
 6118              		.set	.LANCHOR2,. + 0
 6121              	pxDelayedTaskList:
 6122 0000 00000000 		.space	4
 6123              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 6124              		.align	2
 6125              		.set	.LANCHOR8,. + 0
 6128              	pxOverflowDelayedTaskList:
 6129 0000 00000000 		.space	4
 6130              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6131              		.align	2
 6132              		.set	.LANCHOR4,. + 0
 6135              	pxReadyTasksLists:
 6136 0000 00000000 		.space	1120
 6136      00000000 
 6136      00000000 
 6136      00000000 
 6136      00000000 
 6137              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 6138              		.align	2
 6139              		.set	.LANCHOR9,. + 0
 6142              	uxCurrentNumberOfTasks:
 6143 0000 00000000 		.space	4
 6144              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6145              		.align	2
 6146              		.set	.LANCHOR14,. + 0
 6149              	uxDeletedTasksWaitingCleanUp:
 6150 0000 00000000 		.space	4
 6151              		.section	.bss.uxPendedTicks,"aw",%nobits
 6152              		.align	2
 6153              		.set	.LANCHOR18,. + 0
 6156              	uxPendedTicks:
 6157 0000 00000000 		.space	4
 6158              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 6159              		.align	2
 6160              		.set	.LANCHOR16,. + 0
 6163              	uxSchedulerSuspended:
 6164 0000 00000000 		.space	4
 6165              		.section	.bss.uxTaskNumber,"aw",%nobits
 6166              		.align	2
 6167              		.set	.LANCHOR12,. + 0
 6170              	uxTaskNumber:
 6171 0000 00000000 		.space	4
 6172              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 6173              		.align	2
 6174              		.set	.LANCHOR13,. + 0
 6177              	uxTopReadyPriority:
 6178 0000 00000000 		.space	4
 6179              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 6180              		.align	2
 6181              		.set	.LANCHOR5,. + 0
 6184              	xDelayedTaskList1:
 6185 0000 00000000 		.space	20
 6185      00000000 
 6185      00000000 
 6185      00000000 
 6185      00000000 
ARM GAS  /tmp/ccv30Qft.s 			page 213


 6186              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 6187              		.align	2
 6188              		.set	.LANCHOR6,. + 0
 6191              	xDelayedTaskList2:
 6192 0000 00000000 		.space	20
 6192      00000000 
 6192      00000000 
 6192      00000000 
 6192      00000000 
 6193              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 6194              		.align	2
 6195              		.set	.LANCHOR3,. + 0
 6198              	xNextTaskUnblockTime:
 6199 0000 00000000 		.space	4
 6200              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6201              		.align	2
 6202              		.set	.LANCHOR17,. + 0
 6205              	xNumOfOverflows:
 6206 0000 00000000 		.space	4
 6207              		.section	.bss.xPendingReadyList,"aw",%nobits
 6208              		.align	2
 6209              		.set	.LANCHOR1,. + 0
 6212              	xPendingReadyList:
 6213 0000 00000000 		.space	20
 6213      00000000 
 6213      00000000 
 6213      00000000 
 6213      00000000 
 6214              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6215              		.align	2
 6216              		.set	.LANCHOR11,. + 0
 6219              	xSchedulerRunning:
 6220 0000 00000000 		.space	4
 6221              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6222              		.align	2
 6223              		.set	.LANCHOR0,. + 0
 6226              	xSuspendedTaskList:
 6227 0000 00000000 		.space	20
 6227      00000000 
 6227      00000000 
 6227      00000000 
 6227      00000000 
 6228              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6229              		.align	2
 6230              		.set	.LANCHOR7,. + 0
 6233              	xTasksWaitingTermination:
 6234 0000 00000000 		.space	20
 6234      00000000 
 6234      00000000 
 6234      00000000 
 6234      00000000 
 6235              		.section	.bss.xTickCount,"aw",%nobits
 6236              		.align	2
 6237              		.set	.LANCHOR15,. + 0
 6240              	xTickCount:
 6241 0000 00000000 		.space	4
 6242              		.section	.bss.xYieldPending,"aw",%nobits
ARM GAS  /tmp/ccv30Qft.s 			page 214


 6243              		.align	2
 6244              		.set	.LANCHOR19,. + 0
 6247              	xYieldPending:
 6248 0000 00000000 		.space	4
 6249              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 6250              		.align	2
 6251              	.LC0:
 6252 0000 49444C45 		.ascii	"IDLE\000"
 6252      00
 6253              		.text
 6254              	.Letext0:
 6255              		.file 3 "/home/hongtao/STM32_Tools/ARM_GCC/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eab
 6256              		.file 4 "/home/hongtao/STM32_Tools/ARM_GCC/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/includ
 6257              		.file 5 "/home/hongtao/STM32_Tools/ARM_GCC/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/includ
 6258              		.file 6 "/home/hongtao/STM32_Tools/ARM_GCC/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/includ
 6259              		.file 7 "/home/hongtao/STM32_Tools/ARM_GCC/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/includ
 6260              		.file 8 "/home/hongtao/STM32_Tools/ARM_GCC/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/includ
 6261              		.file 9 "/home/hongtao/STM32_Tools/ARM_GCC/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/includ
 6262              		.file 10 "Inc/FreeRTOSConfig.h"
 6263              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6264              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 6265              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6266              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 6267              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 6268              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 6269              		.file 17 "/home/hongtao/STM32_Tools/ARM_GCC/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/inclu
ARM GAS  /tmp/ccv30Qft.s 			page 215


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccv30Qft.s:18     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccv30Qft.s:24     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccv30Qft.s:92     .text.prvTaskIsTaskSuspended:0000000000000038 $d
     /tmp/ccv30Qft.s:98     .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/ccv30Qft.s:104    .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/ccv30Qft.s:138    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccv30Qft.s:144    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccv30Qft.s:178    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
     /tmp/ccv30Qft.s:184    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccv30Qft.s:190    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccv30Qft.s:310    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccv30Qft.s:316    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccv30Qft.s:383    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/ccv30Qft.s:395    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccv30Qft.s:401    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccv30Qft.s:514    .text.prvAddNewTaskToReadyList:0000000000000090 $d
     /tmp/ccv30Qft.s:525    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccv30Qft.s:531    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccv30Qft.s:594    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccv30Qft.s:600    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccv30Qft.s:667    .text.prvCheckTasksWaitingTermination:0000000000000040 $d
     /tmp/ccv30Qft.s:674    .text.prvIdleTask:0000000000000000 $t
     /tmp/ccv30Qft.s:680    .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccv30Qft.s:720    .text.prvIdleTask:0000000000000020 $d
     /tmp/ccv30Qft.s:726    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccv30Qft.s:732    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccv30Qft.s:821    .text.prvAddCurrentTaskToDelayedList:0000000000000064 $d
     /tmp/ccv30Qft.s:831    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/ccv30Qft.s:838    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/ccv30Qft.s:960    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccv30Qft.s:967    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccv30Qft.s:1074   .text.vTaskDelete:0000000000000000 $t
     /tmp/ccv30Qft.s:1081   .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccv30Qft.s:1216   .text.vTaskDelete:0000000000000098 $d
     /tmp/ccv30Qft.s:1228   .text.eTaskGetState:0000000000000000 $t
     /tmp/ccv30Qft.s:1235   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/ccv30Qft.s:1349   .text.eTaskGetState:000000000000006c $d
     /tmp/ccv30Qft.s:1358   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccv30Qft.s:1365   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccv30Qft.s:1404   .text.uxTaskPriorityGet:000000000000001c $d
     /tmp/ccv30Qft.s:1409   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccv30Qft.s:1416   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccv30Qft.s:1479   .text.uxTaskPriorityGetFromISR:000000000000002c $d
     /tmp/ccv30Qft.s:1484   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccv30Qft.s:1491   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccv30Qft.s:1662   .text.vTaskPrioritySet:00000000000000bc $d
     /tmp/ccv30Qft.s:1670   .text.vTaskResume:0000000000000000 $t
     /tmp/ccv30Qft.s:1677   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccv30Qft.s:1783   .text.vTaskResume:0000000000000074 $d
     /tmp/ccv30Qft.s:1791   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccv30Qft.s:1798   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccv30Qft.s:1934   .text.xTaskResumeFromISR:0000000000000090 $d
     /tmp/ccv30Qft.s:1943   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccv30Qft.s:1950   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccv30Qft.s:2074   .text.vTaskStartScheduler:0000000000000080 $d
ARM GAS  /tmp/ccv30Qft.s 			page 216


     /tmp/ccv30Qft.s:2085   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccv30Qft.s:2092   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccv30Qft.s:2130   .text.vTaskEndScheduler:0000000000000020 $d
     /tmp/ccv30Qft.s:2135   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccv30Qft.s:2142   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccv30Qft.s:2159   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/ccv30Qft.s:2164   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccv30Qft.s:2171   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccv30Qft.s:2187   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/ccv30Qft.s:2192   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccv30Qft.s:2199   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccv30Qft.s:2222   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/ccv30Qft.s:2227   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccv30Qft.s:2234   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccv30Qft.s:2249   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/ccv30Qft.s:2254   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccv30Qft.s:2261   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccv30Qft.s:2307   .text.pcTaskGetName:0000000000000024 $d
     /tmp/ccv30Qft.s:2314   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccv30Qft.s:2321   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccv30Qft.s:2528   .text.xTaskIncrementTick:00000000000000ec $d
     /tmp/ccv30Qft.s:2543   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccv30Qft.s:2550   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccv30Qft.s:2737   .text.xTaskResumeAll:00000000000000d0 $d
     /tmp/ccv30Qft.s:2750   .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/ccv30Qft.s:2757   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/ccv30Qft.s:2922   .text.vTaskDelayUntil:0000000000000098 $d
     /tmp/ccv30Qft.s:2930   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccv30Qft.s:2937   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccv30Qft.s:3010   .text.vTaskDelay:0000000000000044 $d
     /tmp/ccv30Qft.s:3016   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccv30Qft.s:3023   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccv30Qft.s:3143   .text.vTaskSwitchContext:0000000000000084 $d
     /tmp/ccv30Qft.s:3154   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccv30Qft.s:3161   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccv30Qft.s:3311   .text.vTaskSuspend:00000000000000ac $d
     /tmp/ccv30Qft.s:3321   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccv30Qft.s:3328   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccv30Qft.s:3381   .text.vTaskPlaceOnEventList:000000000000002c $d
     /tmp/ccv30Qft.s:3386   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccv30Qft.s:3393   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccv30Qft.s:3481   .text.vTaskPlaceOnUnorderedEventList:0000000000000054 $d
     /tmp/ccv30Qft.s:3487   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/ccv30Qft.s:3494   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/ccv30Qft.s:3556   .text.vTaskPlaceOnEventListRestricted:0000000000000034 $d
     /tmp/ccv30Qft.s:3561   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccv30Qft.s:3568   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccv30Qft.s:3674   .text.xTaskRemoveFromEventList:0000000000000074 $d
     /tmp/ccv30Qft.s:3684   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccv30Qft.s:3691   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccv30Qft.s:3798   .text.vTaskRemoveFromUnorderedEventList:0000000000000074 $d
     /tmp/ccv30Qft.s:3809   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccv30Qft.s:3816   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccv30Qft.s:3871   .text.vTaskSetTimeOutState:0000000000000030 $d
     /tmp/ccv30Qft.s:3877   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/ccv30Qft.s:3884   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/ccv30Qft.s:3905   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
ARM GAS  /tmp/ccv30Qft.s 			page 217


     /tmp/ccv30Qft.s:3911   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccv30Qft.s:3918   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccv30Qft.s:4050   .text.xTaskCheckForTimeOut:0000000000000078 $d
     /tmp/ccv30Qft.s:4057   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccv30Qft.s:4064   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccv30Qft.s:4080   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/ccv30Qft.s:4085   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/ccv30Qft.s:4092   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/ccv30Qft.s:4118   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/ccv30Qft.s:4125   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/ccv30Qft.s:4146   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/ccv30Qft.s:4153   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/ccv30Qft.s:4266   .text.vTaskGetInfo:0000000000000074 $d
     /tmp/ccv30Qft.s:4271   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/ccv30Qft.s:4277   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/ccv30Qft.s:4378   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/ccv30Qft.s:4385   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/ccv30Qft.s:4502   .text.uxTaskGetSystemState:0000000000000098 $d
     /tmp/ccv30Qft.s:4512   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/ccv30Qft.s:4519   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/ccv30Qft.s:4552   .text.uxTaskGetStackHighWaterMark:0000000000000014 $d
     /tmp/ccv30Qft.s:4557   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccv30Qft.s:4564   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccv30Qft.s:4580   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/ccv30Qft.s:4585   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccv30Qft.s:4592   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccv30Qft.s:4624   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/ccv30Qft.s:4630   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/ccv30Qft.s:4637   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccv30Qft.s:4761   .text.xTaskPriorityInherit:000000000000008c $d
     /tmp/ccv30Qft.s:4768   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccv30Qft.s:4775   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccv30Qft.s:4915   .text.xTaskPriorityDisinherit:0000000000000084 $d
     /tmp/ccv30Qft.s:4922   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccv30Qft.s:4929   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccv30Qft.s:5075   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000094 $d
     /tmp/ccv30Qft.s:5082   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccv30Qft.s:5089   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccv30Qft.s:5112   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/ccv30Qft.s:5117   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccv30Qft.s:5124   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccv30Qft.s:5150   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/ccv30Qft.s:5155   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccv30Qft.s:5162   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccv30Qft.s:5258   .text.ulTaskNotifyTake:0000000000000070 $d
     /tmp/ccv30Qft.s:5264   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccv30Qft.s:5271   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccv30Qft.s:5387   .text.xTaskNotifyWait:0000000000000090 $d
     /tmp/ccv30Qft.s:5393   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccv30Qft.s:5400   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccv30Qft.s:5466   .text.xTaskGenericNotify:000000000000003e $d
     /tmp/ccv30Qft.s:5470   .text.xTaskGenericNotify:0000000000000042 $t
     /tmp/ccv30Qft.s:5595   .text.xTaskGenericNotify:00000000000000d0 $d
     /tmp/ccv30Qft.s:5603   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccv30Qft.s:5610   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccv30Qft.s:5695   .text.xTaskGenericNotifyFromISR:000000000000005c $d
     /tmp/ccv30Qft.s:5699   .text.xTaskGenericNotifyFromISR:0000000000000060 $t
ARM GAS  /tmp/ccv30Qft.s 			page 218


     /tmp/ccv30Qft.s:5846   .text.xTaskGenericNotifyFromISR:0000000000000108 $d
     /tmp/ccv30Qft.s:5856   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccv30Qft.s:5863   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccv30Qft.s:6032   .text.vTaskNotifyGiveFromISR:00000000000000b8 $d
     /tmp/ccv30Qft.s:6042   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccv30Qft.s:6049   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccv30Qft.s:6104   .text.xTaskNotifyStateClear:0000000000000030 $d
     /tmp/ccv30Qft.s:6114   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccv30Qft.s:6110   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccv30Qft.s:6117   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccv30Qft.s:6121   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccv30Qft.s:6124   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccv30Qft.s:6128   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccv30Qft.s:6131   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccv30Qft.s:6135   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccv30Qft.s:6138   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccv30Qft.s:6142   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccv30Qft.s:6145   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccv30Qft.s:6149   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccv30Qft.s:6152   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccv30Qft.s:6156   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccv30Qft.s:6159   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccv30Qft.s:6163   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccv30Qft.s:6166   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccv30Qft.s:6170   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccv30Qft.s:6173   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccv30Qft.s:6177   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccv30Qft.s:6180   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccv30Qft.s:6184   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccv30Qft.s:6187   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccv30Qft.s:6191   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccv30Qft.s:6194   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccv30Qft.s:6198   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccv30Qft.s:6201   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccv30Qft.s:6205   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccv30Qft.s:6208   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccv30Qft.s:6212   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccv30Qft.s:6215   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccv30Qft.s:6219   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccv30Qft.s:6222   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccv30Qft.s:6226   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccv30Qft.s:6229   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccv30Qft.s:6233   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccv30Qft.s:6236   .bss.xTickCount:0000000000000000 $d
     /tmp/ccv30Qft.s:6240   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccv30Qft.s:6243   .bss.xYieldPending:0000000000000000 $d
     /tmp/ccv30Qft.s:6247   .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccv30Qft.s:6250   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
ARM GAS  /tmp/ccv30Qft.s 			page 219


vPortFree
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
